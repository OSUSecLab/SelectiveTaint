#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <getopt.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <sys/mman.h>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <climits>
#include <set>
#include "math.h"


// DyninstAPI includes
#include "BPatch.h"
#include "BPatch_binaryEdit.h"
#include "BPatch_flowGraph.h"
#include "BPatch_function.h"
#include "BPatch_point.h"
#include "BPatch_addressSpace.h"
#include "BPatch_process.h"
#include "dyninstversion.h"
#include "BPatch_sourceObj.h"
#include "Instrumenter.h"
#include "Instruction.h"
#include "dynC.h"
#include "snippetGen.h"

// capstone includes
#include <inttypes.h>
#include <capstone/capstone.h>
#include <capstone/platform.h>
#include <capstone/x86.h>

// libelf includes
#include <err.h>
#include <fcntl.h>
#include <gelf.h>
#include <sysexits.h>

#include "taint.h"



using namespace std;
using namespace Dyninst;
using namespace ParseAPI;
using namespace InstructionAPI;
using namespace PatchAPI;
using namespace SymtabAPI;
using namespace dynC_API;


//cmd line options
char *originalBinary;
char *instrumentedBinary;

char *selectiveFileName;
int taintAll = 0;

const char *instLibrary = "libtaintutils.so";

BPatch bpatch;
BPatch_binaryEdit *appBin;
BPatch_image *appImage;
vector<BPatch_module*> *modules;
vector<BPatch_module*> exemodules;

BPatch_function *readmemaddr_fun;
BPatch_function *printint_fun;


std::vector<std::vector<int>> shdrInfos;

FILE *originalBinaryFile;
char *originalBinaryFileBuffer;
long long originalBinaryFileReadLen;

FILE *selectiveFile;

csh capstone_handle;
cs_insn *func_insns;
size_t func_insn_count;

std::vector<long long> instrumented_addrs;
std::vector<long long> func_loadstore_addrs;
std::vector<std::string> lib_func_names;
std::vector<long long> lib_func_addrs;
std::map<std::string, long long> lib_func_names_addrs_map;
std::map<long long, std::string> lib_func_addrs_names_map;
std::vector<long long> epilogue_addrs;
std::vector<int> epilogue_stack_offsets;
std::vector<long long> selective_addrs;

BPatch_variableExpr *bitmapvarexpr;
BPatch_arithExpr *bitmapvaraddrexpr;
BPatch_variableExpr *gprvarexpr;
BPatch_arithExpr *gprvaraddrexpr;
BPatch_variableExpr *localrepeattimeexpr;
BPatch_variableExpr *localeffectiveaddressexpr;
BPatch_variableExpr *localregvaluebeforeexpr;
BPatch_variableExpr *localregvalueafterexpr;
BPatch_variableExpr *localinsnaddrexpr;
BPatch_variableExpr *localop0valueexpr;
BPatch_variableExpr *localop1valueexpr;
BPatch_variableExpr *localtmptagexpr;
BPatch_variableExpr *localop0tagexpr;
BPatch_variableExpr *localop1tagexpr;
BPatch_variableExpr *localfirstbytesexpr;
BPatch_variableExpr *twosquarevarexpr;
BPatch_variableExpr *squarevaluevarexpr;

int section_addr_min = 0x7fffffff;
int section_addr_max = 0x0;
int section_size_addr_min = 0;
int section_size_addr_max = 0;
int configuration = 0;



static const char *OPT_STR = "i:o:t:";
static const char *USAGE = " -i <binary> -o <binary> -t <selective tainted insn file>\n \
  -i: input binary \n \
  -o: output binary\n \
  -t: selective tainted instructions (optional, default taint all instructions)\n";


bool parse_options(int argc, char **argv) {
  int c;

  while ((c = getopt(argc, argv, OPT_STR)) != -1) {
    switch ((char) c) {
    case 'i':
      originalBinary = optarg;
      break;
    case 'o':
      instrumentedBinary = optarg;
      break;
    case 't':
      selectiveFileName = optarg;
      break;

    default:
      cerr << "Usage: " << argv[0] << USAGE;
      return false;
    }
  }


  if (originalBinary == NULL) {
    cerr << "Input binary is required!" << endl;
    cerr << "Usage: " << argv[0] << USAGE;
    return false;
  }

  if (instrumentedBinary == NULL) {
    cerr << "Output binary is required!" << endl;
    cerr << "Usage: " << argv[0] << USAGE;
    return false;
  }

  if (selectiveFileName == NULL) {
    taintAll = 1;
  }

  return true;
}

BPatch_function *find_func_by_name(BPatch_image * appImage, char *funcName)
{
	BPatch_Vector < BPatch_function * >funcs;
	if(NULL == appImage->findFunction(funcName, funcs) || !funcs.size() || NULL == funcs[0])
	{
		cerr << "Failed to find " << funcName << " function." << endl;
		return NULL;
	}
	return funcs[0];
}

int csregvalue_to_regwidth(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_AH:
		case X86_REG_AL:
		case X86_REG_BH:
		case X86_REG_BL:
		case X86_REG_CH:
		case X86_REG_CL:
		case X86_REG_DH:
		case X86_REG_DL:
			return 8;
			break;
		case X86_REG_AX:
		case X86_REG_BX:
		case X86_REG_CX:
		case X86_REG_DX:
		case X86_REG_DI:
		case X86_REG_SI:
		case X86_REG_SP:
		case X86_REG_BP:
		case X86_REG_IP:
		case X86_REG_CS:
		case X86_REG_DS:
		case X86_REG_ES:
		case X86_REG_FS:
		case X86_REG_GS:
		case X86_REG_SS:
			return 16;
			break;
		case X86_REG_EAX:
		case X86_REG_EBX:
		case X86_REG_ECX:
		case X86_REG_EDX:
		case X86_REG_EDI:
		case X86_REG_ESI:
		case X86_REG_ESP:
		case X86_REG_EBP:
		case X86_REG_EIP:
		case X86_REG_EFLAGS:
		case X86_REG_CR0:
		case X86_REG_CR1:
		case X86_REG_CR2:
		case X86_REG_CR3:
		case X86_REG_CR4:
		case X86_REG_CR5:
		case X86_REG_CR6:
		case X86_REG_CR7:
		case X86_REG_DR0:
		case X86_REG_DR1:
		case X86_REG_DR2:
		case X86_REG_DR3:
		case X86_REG_DR4:
		case X86_REG_DR5:
		case X86_REG_DR6:
		case X86_REG_DR7:
			return 32;
			break;
		default:
			return -1;
	}
}

int csregvalue_is_gr(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_AH:
		case X86_REG_AL:
		case X86_REG_BH:
		case X86_REG_BL:
		case X86_REG_CH:
		case X86_REG_CL:
		case X86_REG_DH:
		case X86_REG_DL:
		case X86_REG_AX:
		case X86_REG_BX:
		case X86_REG_CX:
		case X86_REG_DX:
		case X86_REG_DI:
		case X86_REG_SI:
		case X86_REG_SP:
		case X86_REG_BP:
		case X86_REG_EAX:
		case X86_REG_EBX:
		case X86_REG_ECX:
		case X86_REG_EDX:
		case X86_REG_EDI:
		case X86_REG_ESI:
		case X86_REG_ESP:
		case X86_REG_EBP:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

int csregvalue_is_seg(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_CS:
		case X86_REG_DS:
		case X86_REG_ES:
		case X86_REG_FS:
		case X86_REG_GS:
		case X86_REG_SS:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

int csregvalue_is_grupper8bits(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_AH:
		case X86_REG_BH:
		case X86_REG_CH:
		case X86_REG_DH:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

int csregvalue_is_grlower8bits(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_AL:
		case X86_REG_BL:
		case X86_REG_CL:
		case X86_REG_DL:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

int csregvalue_is_gr32(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_EAX:
		case X86_REG_EBX:
		case X86_REG_ECX:
		case X86_REG_EDX:
		case X86_REG_EDI:
		case X86_REG_ESI:
		case X86_REG_ESP:
		case X86_REG_EBP:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

int csregvalue_is_gr16(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_AX:
		case X86_REG_BX:
		case X86_REG_CX:
		case X86_REG_DX:
		case X86_REG_DI:
		case X86_REG_SI:
		case X86_REG_SP:
		case X86_REG_BP:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

int csregvalue_is_gr8(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_AH:
		case X86_REG_AL:
		case X86_REG_BH:
		case X86_REG_BL:
		case X86_REG_CH:
		case X86_REG_CL:
		case X86_REG_DH:
		case X86_REG_DL:
			return 1;
			break;
		default:
			return 0;
			break;
	}
}

BPatch_registerExpr *csregvalue_to_grregexprptr(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_EAX:
			return new BPatch_registerExpr(x86::eax);
		case X86_REG_EBX:
			return new BPatch_registerExpr(x86::ebx);
		case X86_REG_ECX:
			return new BPatch_registerExpr(x86::ecx);
		case X86_REG_EDX:
			return new BPatch_registerExpr(x86::edx);
		case X86_REG_EDI:
			return new BPatch_registerExpr(x86::edi);
		case X86_REG_ESI:
			return new BPatch_registerExpr(x86::esi);
		case X86_REG_ESP:
			return new BPatch_registerExpr(x86::esp);
		case X86_REG_EBP:
			return new BPatch_registerExpr(x86::ebp);
		case X86_REG_AX:
			return new BPatch_registerExpr(x86::ax);
		case X86_REG_BX:
			return new BPatch_registerExpr(x86::bx);
		case X86_REG_CX:
			return new BPatch_registerExpr(x86::cx);
		case X86_REG_DX:
			return new BPatch_registerExpr(x86::dx);
		case X86_REG_DI:
			return new BPatch_registerExpr(x86::di);
		case X86_REG_SI:
			return new BPatch_registerExpr(x86::si);
		case X86_REG_SP:
			return new BPatch_registerExpr(x86::sp);
		case X86_REG_BP:
			return new BPatch_registerExpr(x86::bp);
		case X86_REG_AH:
			return new BPatch_registerExpr(x86::ah);
		case X86_REG_AL:
			return new BPatch_registerExpr(x86::al);
		case X86_REG_BH:
			return new BPatch_registerExpr(x86::bh);
		case X86_REG_BL:
			return new BPatch_registerExpr(x86::bl);
		case X86_REG_CH:
			return new BPatch_registerExpr(x86::ch);
		case X86_REG_CL:
			return new BPatch_registerExpr(x86::cl);
		case X86_REG_DH:
			return new BPatch_registerExpr(x86::dh);
		case X86_REG_DL:
			return new BPatch_registerExpr(x86::dl);
		default:
			return NULL;
	}
}

int csregvalue_to_grregindex(x86_reg regvalue)
{
	switch(regvalue)
	{
		case X86_REG_EAX:
			return 0;
		case X86_REG_EBX:
			return 1;
		case X86_REG_ECX:
			return 2;
		case X86_REG_EDX:
			return 3;
		case X86_REG_EDI:
			return 4;
		case X86_REG_ESI:
			return 5;
		case X86_REG_ESP:
			return 6;
		case X86_REG_EBP:
			return 7;
		case X86_REG_AX:
			return 0;
		case X86_REG_BX:
			return 1;
		case X86_REG_CX:
			return 2;
		case X86_REG_DX:
			return 3;
		case X86_REG_DI:
			return 4;
		case X86_REG_SI:
			return 5;
		case X86_REG_SP:
			return 6;
		case X86_REG_BP:
			return 7;
		case X86_REG_AH:
			return 0;
		case X86_REG_AL:
			return 0;
		case X86_REG_BH:
			return 1;
		case X86_REG_BL:
			return 1;
		case X86_REG_CH:
			return 2;
		case X86_REG_CL:
			return 2;
		case X86_REG_DH:
			return 3;
		case X86_REG_DL:
			return 3;
		default:
			return -1;
	}
}


BPatch_registerExpr *regstr_to_regexprptr(std::string regstr)
{
	if(regstr.compare("eax") == 0)
		return new BPatch_registerExpr(x86::eax);
	else if(regstr.compare("ebx") == 0)
		return new BPatch_registerExpr(x86::ebx);
	else if(regstr.compare("ecx") == 0)
		return new BPatch_registerExpr(x86::ecx);
	else if(regstr.compare("edx") == 0)
		return new BPatch_registerExpr(x86::edx);
	else if(regstr.compare("edi") == 0)
		return new BPatch_registerExpr(x86::edi);
	else if(regstr.compare("esi") == 0)
		return new BPatch_registerExpr(x86::esi);
	else if(regstr.compare("esp") == 0)
		return new BPatch_registerExpr(x86::esp);
	else if(regstr.compare("ebp") == 0)
		return new BPatch_registerExpr(x86::ebp);
	else if(regstr.compare("ax") == 0)
		return new BPatch_registerExpr(x86::ax);
	else if(regstr.compare("bx") == 0)
		return new BPatch_registerExpr(x86::bx);
	else if(regstr.compare("cx") == 0)
		return new BPatch_registerExpr(x86::cx);
	else if(regstr.compare("dx") == 0)
		return new BPatch_registerExpr(x86::dx);
	else if(regstr.compare("di") == 0)
		return new BPatch_registerExpr(x86::di);
	else if(regstr.compare("si") == 0)
		return new BPatch_registerExpr(x86::si);
	else if(regstr.compare("sp") == 0)
		return new BPatch_registerExpr(x86::sp);
	else if(regstr.compare("bp") == 0)
		return new BPatch_registerExpr(x86::bp);
	else if(regstr.compare("ah") == 0)
		return new BPatch_registerExpr(x86::ah);
	else if(regstr.compare("al") == 0)
		return new BPatch_registerExpr(x86::al);
	else if(regstr.compare("bh") == 0)
		return new BPatch_registerExpr(x86::bh);
	else if(regstr.compare("bl") == 0)
		return new BPatch_registerExpr(x86::bl);
	else if(regstr.compare("ch") == 0)
		return new BPatch_registerExpr(x86::ch);
	else if(regstr.compare("cl") == 0)
		return new BPatch_registerExpr(x86::cl);
	else if(regstr.compare("dh") == 0)
		return new BPatch_registerExpr(x86::dh);
	else if(regstr.compare("dl") == 0)
		return new BPatch_registerExpr(x86::dl);
	else
		return NULL;
}

void r_clrl(x86_reg regvalue, BPatch_point *inspoint)
{
	int index = csregvalue_to_grregindex(regvalue);
	BPatch_constExpr *indexexpr = new BPatch_constExpr(index);
	BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *indexexpr);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *refexpr, BPatch_constExpr(0x0));
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(indexexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(ref2expr);
	printfArgs.push_back(ref3expr);
	printfArgs.push_back(ref4expr);
	printfArgs.push_back(ref5expr);
	printfArgs.push_back(ref6expr);
	printfArgs.push_back(ref7expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/


	/*
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *gprvarexpr, BPatch_arithExpr(BPatch_plus, *gprvarexpr, BPatch_constExpr(0x1)));

	gprvarexpr = appImage->findVariable("gpr");
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("gpr at: 0x%lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(gprvarexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr1);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);


	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/


}

void r_clrw(x86_reg regvalue, BPatch_point *inspoint)
{
	int index = csregvalue_to_grregindex(regvalue);
	BPatch_constExpr *indexexpr = new BPatch_constExpr(index);
	BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *indexexpr);
	BPatch_arithExpr *divideexpr = new BPatch_arithExpr(BPatch_divide, *refexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *divideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *refexpr, *timesexpr);
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(indexexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(ref2expr);
	printfArgs.push_back(ref3expr);
	printfArgs.push_back(ref4expr);
	printfArgs.push_back(ref5expr);
	printfArgs.push_back(ref6expr);
	printfArgs.push_back(ref7expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/

}

void r_clrb_u(x86_reg regvalue, BPatch_point *inspoint)
{
	int index = csregvalue_to_grregindex(regvalue);
	//BPatch_variableExpr *operand0tagupperbitsexpr = appImage->findVariable("operand0tagupperbits");
	//BPatch_variableExpr *operand0taglowerbitsexpr = appImage->findVariable("operand0taglowerbits");

	BPatch_constExpr *indexexpr = new BPatch_constExpr(index);
	BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *indexexpr);

	// get upper bits
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *refexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x4));

	// get lower bits
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *refexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *refexpr, *timesexpr2);

	// get new tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *minusexpr2);

	// assign new tag
	BPatch_arithExpr *assignexpr4 = new BPatch_arithExpr(BPatch_assign, *refexpr, *plusexpr3);

	if (!appBin->insertSnippet(*assignexpr4, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(indexexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(ref2expr);
	printfArgs.push_back(ref3expr);
	printfArgs.push_back(ref4expr);
	printfArgs.push_back(ref5expr);
	printfArgs.push_back(ref6expr);
	printfArgs.push_back(ref7expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr4);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/
}

void r_clrb_l(x86_reg regvalue, BPatch_point *inspoint)
{
	int index = csregvalue_to_grregindex(regvalue);
	BPatch_constExpr *indexexpr = new BPatch_constExpr(index);
	BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *indexexpr);
	BPatch_arithExpr *divideexpr = new BPatch_arithExpr(BPatch_divide, *refexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *divideexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *refexpr, *timesexpr);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
}

void r_clrb_l_al(BPatch_point *inspoint)
{
	// clear al only
	int index = 0;
	BPatch_constExpr *indexexpr = new BPatch_constExpr(index);
	BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *indexexpr);
	BPatch_arithExpr *divideexpr = new BPatch_arithExpr(BPatch_divide, *refexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *divideexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *refexpr, *timesexpr);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
}

void r2r_binary_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times0expr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr3 = new BPatch_arithExpr(BPatch_minus, *divide0expr2, *times0expr3);
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr3, *minus1expr3);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *divideexpr3, *minusexpr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr4 = new BPatch_arithExpr(BPatch_minus, *divide0expr3, *times0expr4);
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr4, *minus1expr4);
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *plusexpr4, *timesexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *divideexpr4, *minusexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr1a);
	printfArgs.push_back(timesexpr2a);
	printfArgs.push_back(timesexpr3a);
	printfArgs.push_back(timesexpr4a);
	printfArgs.push_back(minus0expr3);
	printfArgs.push_back(minus1expr3);
	printfArgs.push_back(divide1expr3);
	printfArgs.push_back(times1expr3);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_binary_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*
	BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr1a);
	printfArgs.push_back(timesexpr2a);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/
}

void r2r_binary_opb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get new tag
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr1a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);
	
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr1a);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_binary_opb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);
	
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(timesexpr2a);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_binary_opb_lu(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get reg0 bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));

	// get reg1 bit 1
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);

	// get bit 0 tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr2);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3a, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3a, *timesexpr3);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *minusexpr3, *divideexpr3);

	// get new tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *times0expr1, *plusexpr3b);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(minus0expr1);
	printfArgs.push_back(minus1expr2);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/
}

void r2r_binary_opb_ul(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);

	// get bit 1 tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *minus0expr2);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3a, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3a, *timesexpr3a);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *minusexpr3, *divideexpr3);
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *plusexpr3b, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr3b);

	// get new tag
	BPatch_arithExpr *timesexpr5 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr5 = new BPatch_arithExpr(BPatch_plus, *timesexpr5, *plusexpr4);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr5);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	
	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(minus1expr1);
	printfArgs.push_back(minus0expr2);
	printfArgs.push_back(minus0expr1);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/
}

void m2r_binary_opl(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db4);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);



	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times0expr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr3 = new BPatch_arithExpr(BPatch_minus, *divide0expr2, *times0expr3);
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr3, *minus1expr3);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *divideexpr3, *minusexpr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr4 = new BPatch_arithExpr(BPatch_minus, *divide0expr3, *times0expr4);
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr4, *minus1expr4);
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *plusexpr4, *timesexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *divideexpr4, *minusexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(remainderexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/


	/*
	BPatch_arithExpr *tagidxexpr = new BPatch_arithExpr(BPatch_minus, *eaers3expr, *eaers32ls29expr);
	BPatch_variableExpr *testvarexpr = appImage->findVariable("testvar");
	BPatch_arithExpr *testvaraddrexpr = new BPatch_arithExpr(BPatch_addr, *testvarexpr);
	BPatch_snippet *insnaddrexpr = new BPatch_originalAddressExpr();
	BPatch_registerExpr *ebpexpr = new BPatch_registerExpr(x86::ebp);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *testvarexpr, *deref1expr);
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(tagidxexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(testvarexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(assignexpr1);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_binary_opw(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_binary_opb_u(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_binary_opb_l(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db0);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get reg0 bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);


	// get reg1 bit 0
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr2);

	// get bit 0 tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr2);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3a, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3a, *timesexpr3);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *minusexpr3, *divideexpr3);

	// get new tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *times0expr1, *plusexpr3b);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_binary_opl(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db0);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref0expr = deref0expr;
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localop0tagexpr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times0expr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr3 = new BPatch_arithExpr(BPatch_minus, *divide0expr2, *times0expr3);
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr3, *minus1expr3);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *divideexpr3, *minusexpr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr4 = new BPatch_arithExpr(BPatch_minus, *divide0expr3, *times0expr4);
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr4, *minus1expr4);
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *plusexpr4, *timesexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *divideexpr4, *minusexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6);

	BPatch_arithExpr *timesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr6 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr6a);
	BPatch_arithExpr *timesexpr6b = new BPatch_arithExpr(BPatch_times, *plusexpr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6a = new BPatch_arithExpr(BPatch_plus, *timesexpr6b, *minusexpr6);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6a);
	BPatch_ifExpr *ifexpr6 = new BPatch_ifExpr(*bexpr0a, *assignexpr6, *assignexpr);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr6);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(localop0tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr6);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_binary_opw(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref0expr = deref0expr;
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);




	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localop0tagexpr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);

	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(localop0tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_binary_opb_u(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref0expr = deref0expr;
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localop0tagexpr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);

	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(localop0tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_binary_opb_l(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref0expr = deref0expr;
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get reg0 bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localop0tagexpr, *times0expr1);

	// get reg1 bit 0
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr2);

	// get bit 0 tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr2);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3a, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3a, *timesexpr3);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *minusexpr3, *divideexpr3);

	// get new tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *times0expr1, *plusexpr3b);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);

	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(localop0tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void tagmap_clrl(BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref0expr = deref0expr;



	// if remainder is 0, 4
	BPatch_arithExpr *divideexpr0 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr0 = new BPatch_arithExpr(BPatch_times, *divideexpr0, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr0 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr0);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *timesexpr0);

	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x100));
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *minusexpr0);
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr1);

	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr, *assignexpr1, *assignexpr);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	//BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(remainderexpr);
	printfArgs.push_back(minusexpr0);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	//snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void tagmap_clrw(BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db2);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;



	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *divideexpr0 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr0 = new BPatch_arithExpr(BPatch_times, *divideexpr0, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr0 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr0);
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *timesexpr0);

	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *minusexpr0);
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr1);

	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr2);
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minusexpr1);
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr2);

	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x100));
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *minusexpr2);
	BPatch_arithExpr *assignexpr3 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr3);




	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr3);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr2, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr1, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void tagmap_clrb(BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;



	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *divideexpr0 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr0 = new BPatch_arithExpr(BPatch_times, *divideexpr0, BPatch_constExpr(0x2));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *timesexpr0);

	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x8));
	BPatch_arithExpr *divideexpr1a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr1a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1a);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *minusexpr1a);
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr1);

	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x20));
	BPatch_arithExpr *divideexpr2a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *divideexpr2a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr2a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr2a);
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minusexpr2a);
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr2);

	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x80));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x80));
	BPatch_arithExpr *divideexpr3a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *divideexpr3a, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr3a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr3a);
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *minusexpr3a);
	BPatch_arithExpr *assignexpr3 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr3);

	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr3);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr2, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr1, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr6);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr4);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr2);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr4);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opb_lu(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 1 tag as bit 0 tag
	BPatch_arithExpr *divide1expr1a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr1b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *divide1expr1a, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr2);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opb_ul(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr4);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_xfer_opl_cmovcc(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	BPatch_registerExpr *reg0expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_registerExpr *reg1expr = csregvalue_to_grregexprptr(reg1value);

	// similar to a normal mov instruction
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);

	// if they are equal, we assume the condition is true
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *reg0expr, *reg1expr);
	BPatch_ifExpr *cmovexpr = new BPatch_ifExpr(*bexpr, *assignexpr);

	if (!appBin->insertSnippet(*cmovexpr, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr6);
	printfArgs.push_back(reg0expr);
	printfArgs.push_back(reg1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(cmovexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/

	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(reg0expr);
	printfArgs.push_back(reg1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callBefore))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/

	/*
	// check condition first
	BPatch_registerExpr *flagreg0expr;// = new BPatch_registerExpr(x86::cf);
	unsigned int insnid = 0;
	switch(insnid)
	{
		case X86_INS_CMOVA:
		{
			BPatch_registerExpr *cfregexpr = new BPatch_registerExpr(x86::cf);
			//BPatch_registerExpr *zfregexpr = new BPatch_registerExpr(x86::zf);
			BPatch_registerExpr *eaxregexpr = new BPatch_registerExpr(x86::eax);
			BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *eaxregexpr, BPatch_constExpr(0));

			std::vector<BPatch_snippet*> printfArgs;
			BPatch_snippet* fmt = new BPatch_constExpr("%lx\n");
			printfArgs.push_back(fmt);
			printfArgs.push_back(bexpr);

			// Find the debug_printf function
			std::vector<BPatch_function*> printfFuncs;
			appImage->findFunction("debug_printf", printfFuncs);
			if (printfFuncs.size() == 0)
			{
				fprintf(stderr, "Could not find debug_printf\n");
				return;
			}
			// Construct a function call snippet
			BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

			std::vector<BPatch_snippet*> snippets;
			snippets.push_back(&printfCall);
			BPatch_sequence *seq = new BPatch_sequence(snippets);

			// Insert the snippet at the instrumentation points
			if (!appBin->insertSnippet(*seq, *inspoint))
			{
				fprintf(stderr, "insertSnippet failed\n");
				return;
			}
			break;
		}
		//case X86_INS_CMOVAE:
		//{
		//	break;
		//}
		//case X86_INS_CMOVB:
		//{
		//	break;
		//}
		//case X86_INS_CMOVBE:
		//{
		//	break;
		//}
		//case X86_INS_CMOVE:
		//{
		//	break;
		//}
		//case X86_INS_CMOVG:
		//{
		//	break;
		//}
		//case X86_INS_CMOVGE:
		//{
		//	break;
		//}
		//case X86_INS_CMOVL:
		//{
		//	break;
		//}
		//case X86_INS_CMOVLE:
		//{
		//	break;
		//}
		//case X86_INS_CMOVNE:
		//{
		//	break;
		//}
		//case X86_INS_CMOVNO:
		//{
		//	break;
		//}
		//case X86_INS_CMOVNP:
		//{
		//	break;
		//}
		//case X86_INS_CMOVNS:
		//{
		//	break;
		//}
		//case X86_INS_CMOVO:
		//{
		//	break;
		//}
		//case X86_INS_CMOVP:
		//{
		//	break;
		//}
		//case X86_INS_CMOVS:
		//{
		//	break;
		//}
		default:
			break;
	}
	*/
}

void r2r_xfer_opw_cmovcc(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	BPatch_registerExpr *reg032expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_arithExpr *divide032expr = new BPatch_arithExpr(BPatch_divide, *reg032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *times032expr = new BPatch_arithExpr(BPatch_times, *divide032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *reg0expr = new BPatch_arithExpr(BPatch_minus, *reg032expr, *times032expr);
	BPatch_registerExpr *reg132expr = csregvalue_to_grregexprptr(reg1value);
	BPatch_arithExpr *divide132expr = new BPatch_arithExpr(BPatch_divide, *reg132expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *times132expr = new BPatch_arithExpr(BPatch_times, *divide132expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *reg1expr = new BPatch_arithExpr(BPatch_minus, *reg132expr, *times132expr);


	// similar to a normal mov instruction
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	// if they are equal, we assume the condition is true
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *reg0expr, *reg1expr);
	BPatch_ifExpr *cmovexpr = new BPatch_ifExpr(*bexpr, *assignexpr);

	if (!appBin->insertSnippet(*cmovexpr, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr4);
	printfArgs.push_back(reg0expr);
	printfArgs.push_back(reg1expr);
	printfArgs.push_back(reg032expr);
	printfArgs.push_back(reg132expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(cmovexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opl(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db4);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opw(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db2);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);



	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opb_u(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);



	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opb_l(x86_reg reg0value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opl_cmovcc(x86_reg reg0value, BPatch_point *inspoint)
{
	// similar to a normal mov instruction

	// get memory operand addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// get dest register value before the instruction
	BPatch_registerExpr *reg0expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_registerExpr *newreg0expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_arithExpr *assignregbeforeexpr = new BPatch_arithExpr(BPatch_assign, *localregvaluebeforeexpr, *reg0expr);
	BPatch_arithExpr *assignregafterexpr = new BPatch_arithExpr(BPatch_assign, *localregvalueafterexpr, *newreg0expr);

	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *assigninsnaddrexpr = new BPatch_arithExpr(BPatch_assign, *localinsnaddrexpr, *addrexpr);


	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr00);
	snippets0.push_back(assignregbeforeexpr);
	snippets0.push_back(assigninsnaddrexpr);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);

	// if the dest reg value before and after are not equal, we assume the condition is true
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localregvaluebeforeexpr, *localregvalueafterexpr);
	BPatch_ifExpr *cmovexpr = new BPatch_ifExpr(*bexpr, *assignexpr);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignregafterexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmovexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localinsnaddrexpr);
	printfArgs.push_back(localeffectiveaddressexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(localregvaluebeforeexpr);
	printfArgs.push_back(localregvalueafterexpr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignregafterexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmovexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}


void m2r_xfer_opw_cmovcc(x86_reg reg0value, BPatch_point *inspoint)
{
	// similar to a normal mov instruction
	// get memory operand addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// get dest register value before the instruction
	BPatch_registerExpr *reg032expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_arithExpr *divide032expr = new BPatch_arithExpr(BPatch_divide, *reg032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *times032expr = new BPatch_arithExpr(BPatch_times, *divide032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *reg0expr = new BPatch_arithExpr(BPatch_minus, *reg032expr, *times032expr);

	BPatch_registerExpr *newreg032expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_arithExpr *newdivide032expr = new BPatch_arithExpr(BPatch_divide, *newreg032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *newtimes032expr = new BPatch_arithExpr(BPatch_times, *newdivide032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *newreg0expr = new BPatch_arithExpr(BPatch_minus, *newreg032expr, *newtimes032expr);


	BPatch_arithExpr *assignregbeforeexpr = new BPatch_arithExpr(BPatch_assign, *localregvaluebeforeexpr, *reg0expr);
	BPatch_arithExpr *assignregafterexpr = new BPatch_arithExpr(BPatch_assign, *localregvalueafterexpr, *newreg0expr);

	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *assigninsnaddrexpr = new BPatch_arithExpr(BPatch_assign, *localinsnaddrexpr, *addrexpr);


	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr00);
	snippets0.push_back(assignregbeforeexpr);
	snippets0.push_back(assigninsnaddrexpr);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	// if the dest reg value before and after are not equal, we assume the condition is true
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localregvaluebeforeexpr, *localregvalueafterexpr);
	BPatch_ifExpr *cmovexpr = new BPatch_ifExpr(*bexpr, *assignexpr);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignregafterexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmovexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localinsnaddrexpr);
	printfArgs.push_back(localeffectiveaddressexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(localregvaluebeforeexpr);
	printfArgs.push_back(localregvalueafterexpr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignregafterexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmovexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opl_eax(BPatch_point *inspoint)
{
	x86_reg reg0value = X86_REG_EAX;

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db4);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opw_ax(BPatch_point *inspoint)
{
	x86_reg reg0value = X86_REG_AX;

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db2);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);


	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_xfer_opb_l_al(BPatch_point *inspoint)
{
	x86_reg reg0value = X86_REG_AL;

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opl(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db0);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6);

	BPatch_arithExpr *timesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr6 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr6a);
	BPatch_arithExpr *timesexpr6b = new BPatch_arithExpr(BPatch_times, *plusexpr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6a = new BPatch_arithExpr(BPatch_plus, *timesexpr6b, *minusexpr6);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6a);
	BPatch_ifExpr *ifexpr6 = new BPatch_ifExpr(*bexpr0a, *assignexpr6, *assignexpr);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr6);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr6);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opw(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);




	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);




	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opb_u(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);



	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localop0tagexpr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);



	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opb_l(x86_reg reg1value, BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr2);


	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr2, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr2, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opl_eax(BPatch_point *inspoint)
{
	x86_reg reg1value = X86_REG_EAX;

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db0);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6);


	BPatch_arithExpr *timesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr6 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr6a);
	BPatch_arithExpr *timesexpr6b = new BPatch_arithExpr(BPatch_times, *plusexpr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6a = new BPatch_arithExpr(BPatch_plus, *timesexpr6b, *minusexpr6);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6a);
	BPatch_ifExpr *ifexpr6 = new BPatch_ifExpr(*bexpr0a, *assignexpr6, *assignexpr);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr6);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr6);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opw_ax(BPatch_point *inspoint)
{
	x86_reg reg1value = X86_REG_AX;

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);


	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opb_l_al(BPatch_point *inspoint)
{
	x86_reg reg1value = X86_REG_AL;

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);



	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr2);


	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr2, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr2, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);




	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(ifexpr4a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opl_eax_n(BPatch_point *inspoint)
{
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164904);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x84);



	x86_reg reg1value = X86_REG_EAX;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));


	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesaccessedexpr, *remainderexpr);

	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);




	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);

	BPatch_arithExpr *divide1expr0 = new BPatch_arithExpr(BPatch_divide, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, *divide1expr0);


	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;




	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get 8 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);
	BPatch_arithExpr *times1expr5 = new BPatch_arithExpr(BPatch_times, *plusexpr5c, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr5d = new BPatch_arithExpr(BPatch_plus, *plusexpr5c, *times1expr5);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x100));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5d);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6);

	BPatch_arithExpr *plusexpr7 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr7 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr7);


	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr6);
	bodysnippets.push_back(assignexpr7);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	BPatch_arithExpr *divide0expr8 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr8 = new BPatch_arithExpr(BPatch_times, *divide0expr8, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr8 = new BPatch_arithExpr(BPatch_plus, *timesexpr8, *plusexpr5c);
	BPatch_arithExpr *assignexpr8 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr8);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr00, *assignexpr8);


	// first few tags



	BPatch_arithExpr *deref0expr9 = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr0);
	BPatch_arithExpr *ref0expr9 = deref0expr9;
	BPatch_arithExpr *divide0expr9 = new BPatch_arithExpr(BPatch_divide, *ref0expr9, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr9 = new BPatch_arithExpr(BPatch_times, *divide0expr9, BPatch_constExpr(0x100));
	BPatch_arithExpr *divide0expr9a = new BPatch_arithExpr(BPatch_divide, *ref0expr9, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr9a = new BPatch_arithExpr(BPatch_times, *divide0expr9a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr9a = new BPatch_arithExpr(BPatch_minus, *ref0expr9, *timesexpr9a);
	BPatch_arithExpr *plusexpr9 = new BPatch_arithExpr(BPatch_plus, *timesexpr9, *minusexpr9a);
	BPatch_arithExpr *plusexpr9a = new BPatch_arithExpr(BPatch_plus, *plusexpr9, *times1expr5);
	BPatch_arithExpr *assignexpr9 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr0, *plusexpr9a);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr9 = new BPatch_ifExpr(*bexpr0a, *assignexpr9);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	snippets.push_back(ifexpr);
	snippets.push_back(ifexpr9);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *addrexprt0 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x0));
	BPatch_arithExpr *addrexprt1 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x4));
	BPatch_arithExpr *addrexprt2 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *addrexprt3 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0xc));
	BPatch_arithExpr *addrexprt4 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x10));

	BPatch_arithExpr *derefexprt0 = new BPatch_arithExpr(BPatch_deref, *addrexprt0);
	BPatch_arithExpr *derefexprt1 = new BPatch_arithExpr(BPatch_deref, *addrexprt1);
	BPatch_arithExpr *derefexprt2 = new BPatch_arithExpr(BPatch_deref, *addrexprt2);
	BPatch_arithExpr *derefexprt3 = new BPatch_arithExpr(BPatch_deref, *addrexprt3);
	BPatch_arithExpr *derefexprt4 = new BPatch_arithExpr(BPatch_deref, *addrexprt4);

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(derefexprt0);
	printfArgs.push_back(derefexprt1);
	printfArgs.push_back(derefexprt2);
	printfArgs.push_back(derefexprt3);
	printfArgs.push_back(derefexprt4);
	printfArgs.push_back(iteratetimesexpr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(tagaddrexpr0);
	printfArgs.push_back(bytesaccessedexpr);
	printfArgs.push_back(localeffectiveaddressexpr);

	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	snippets.push_back(ifexpr);
	snippets.push_back(ifexpr9);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/


	/*
	BPatch_originalAddressExpr *originaladdrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(originaladdrexpr);
	printfArgs.push_back(bytesaccessedexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/

}


void r2m_xfer_opw_ax_n(BPatch_point *inspoint)
{
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164906);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x86);

	x86_reg reg1value = X86_REG_AX;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *minusexpr0 = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);




	BPatch_arithExpr *minusexpr0a = new BPatch_arithExpr(BPatch_minus, BPatch_constExpr(0x8), *minusexpr0);
	BPatch_arithExpr *dividesexpr0 = new BPatch_arithExpr(BPatch_divide, *minusexpr0a, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr0 = new BPatch_arithExpr(BPatch_times, *dividesexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *minusexpr0a, *timesexpr0);


	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesaccessedexpr, *remainderexpr);

	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00 = new BPatch_boolExpr(BPatch_ne, *restremainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr01 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr02 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr03 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x6));

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);




	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);

	BPatch_arithExpr *plusexpr0 = new BPatch_arithExpr(BPatch_plus, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *divide1expr0 = new BPatch_arithExpr(BPatch_divide, *plusexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, *divide1expr0);

	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get 8 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr3c = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *timesexpr3a);
	BPatch_arithExpr *plusexpr3a1 = new BPatch_arithExpr(BPatch_plus, *plusexpr3a, *timesexpr3b);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *timesexpr3b, *timesexpr3c);
	BPatch_arithExpr *plusexpr3c = new BPatch_arithExpr(BPatch_plus, *plusexpr3a, *plusexpr3b);


	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr3c);

	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr4 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr4);


	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr4);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	// if remainder is 2
	BPatch_arithExpr *divide0expr5a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr5a = new BPatch_arithExpr(BPatch_times, *divide0expr5a, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *timesexpr5a, *plusexpr3);
	BPatch_arithExpr *assignexpr5a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr5a);
	BPatch_ifExpr *ifexpr5a = new BPatch_ifExpr(*bexpr01, *assignexpr5a);
	// if remainder is 4
	BPatch_arithExpr *divide0expr5b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr5b = new BPatch_arithExpr(BPatch_times, *divide0expr5b, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr5b, *plusexpr3a);
	BPatch_arithExpr *assignexpr5b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr5b);
	BPatch_ifExpr *ifexpr5b = new BPatch_ifExpr(*bexpr02, *assignexpr5b);
	// if remainder is 6
	BPatch_arithExpr *divide0expr5c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr5c = new BPatch_arithExpr(BPatch_times, *divide0expr5c, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *timesexpr5c, *plusexpr3a1);
	BPatch_arithExpr *assignexpr5c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr5c);
	BPatch_ifExpr *ifexpr5c = new BPatch_ifExpr(*bexpr03, *assignexpr5c);

	std::vector<BPatch_snippet*> ifsnippets;
	ifsnippets.push_back(ifexpr5a);
	ifsnippets.push_back(ifexpr5b);
	ifsnippets.push_back(ifexpr5c);
	BPatch_sequence *ifseq = new BPatch_sequence(ifsnippets);

	BPatch_ifExpr *ifexpr6 = new BPatch_ifExpr(*bexpr00, *ifseq);


	// first few tags
	BPatch_arithExpr *deref0expr7 = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr0);
	BPatch_arithExpr *ref0expr7 = deref0expr7;
	BPatch_arithExpr *divide0expr7 = new BPatch_arithExpr(BPatch_divide, *ref0expr7, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr7 = new BPatch_arithExpr(BPatch_times, *divide0expr7, BPatch_constExpr(0x100));


	BPatch_arithExpr *divideexpr8 = new BPatch_arithExpr(BPatch_divide, *ref0expr7, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr8 = new BPatch_arithExpr(BPatch_times, *divideexpr8, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr8 = new BPatch_arithExpr(BPatch_minus, *ref0expr7, *timesexpr8);
	BPatch_arithExpr *divideexpr8a = new BPatch_arithExpr(BPatch_divide, *plusexpr3c, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr8a = new BPatch_arithExpr(BPatch_times, *divideexpr8a, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr8 = new BPatch_arithExpr(BPatch_plus, *timesexpr8a, *minusexpr8);
	BPatch_arithExpr *plusexpr8a = new BPatch_arithExpr(BPatch_plus, *timesexpr7, *plusexpr8);
	BPatch_arithExpr *assignexpr8 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr0, *plusexpr8a);


	BPatch_arithExpr *divideexpr9 = new BPatch_arithExpr(BPatch_divide, *ref0expr7, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr9 = new BPatch_arithExpr(BPatch_times, *divideexpr9, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr9 = new BPatch_arithExpr(BPatch_minus, *ref0expr7, *timesexpr9);
	BPatch_arithExpr *divideexpr9a = new BPatch_arithExpr(BPatch_divide, *plusexpr3c, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr9a = new BPatch_arithExpr(BPatch_times, *divideexpr9a, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr9 = new BPatch_arithExpr(BPatch_plus, *timesexpr9a, *minusexpr9);
	BPatch_arithExpr *plusexpr9a = new BPatch_arithExpr(BPatch_plus, *timesexpr7, *plusexpr9);
	BPatch_arithExpr *assignexpr9 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr0, *plusexpr9a);


	BPatch_arithExpr *divideexpr10 = new BPatch_arithExpr(BPatch_divide, *ref0expr7, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr10 = new BPatch_arithExpr(BPatch_times, *divideexpr10, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr10 = new BPatch_arithExpr(BPatch_minus, *ref0expr7, *timesexpr10);
	BPatch_arithExpr *divideexpr10a = new BPatch_arithExpr(BPatch_divide, *plusexpr3c, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr10a = new BPatch_arithExpr(BPatch_times, *divideexpr10a, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr10 = new BPatch_arithExpr(BPatch_plus, *timesexpr10a, *minusexpr10);
	BPatch_arithExpr *plusexpr10a = new BPatch_arithExpr(BPatch_plus, *timesexpr7, *plusexpr10);
	BPatch_arithExpr *assignexpr10 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr0, *plusexpr10a);


	BPatch_boolExpr *bexpr11a = new BPatch_boolExpr(BPatch_ne, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr11b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr11c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr11d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr11d = new BPatch_ifExpr(*bexpr11d, *assignexpr8);
	BPatch_ifExpr *ifexpr11c = new BPatch_ifExpr(*bexpr11c, *assignexpr9, *ifexpr11d);
	BPatch_ifExpr *ifexpr11b = new BPatch_ifExpr(*bexpr11b, *assignexpr10, *ifexpr11c);
	BPatch_ifExpr *ifexpr11a = new BPatch_ifExpr(*bexpr11a, *ifexpr11b);





	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	snippets.push_back(ifexpr6);
	snippets.push_back(ifexpr11a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *addrexprt0 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x0));
	BPatch_arithExpr *addrexprt1 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x1));
	BPatch_arithExpr *addrexprt2 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x2));
	BPatch_arithExpr *addrexprt3 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x3));
	BPatch_arithExpr *addrexprt4 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x9));
	BPatch_arithExpr *addrexprt5 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0xf));

	BPatch_arithExpr *derefexprt0 = new BPatch_arithExpr(BPatch_deref, *addrexprt0);
	BPatch_arithExpr *derefexprt1 = new BPatch_arithExpr(BPatch_deref, *addrexprt1);
	BPatch_arithExpr *derefexprt2 = new BPatch_arithExpr(BPatch_deref, *addrexprt2);
	BPatch_arithExpr *derefexprt3 = new BPatch_arithExpr(BPatch_deref, *addrexprt3);
	BPatch_arithExpr *derefexprt4 = new BPatch_arithExpr(BPatch_deref, *addrexprt4);
	BPatch_arithExpr *derefexprt5 = new BPatch_arithExpr(BPatch_deref, *addrexprt5);

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(derefexprt0);
	printfArgs.push_back(derefexprt1);
	printfArgs.push_back(derefexprt2);
	printfArgs.push_back(derefexprt3);
	printfArgs.push_back(derefexprt4);
	printfArgs.push_back(derefexprt5);
	printfArgs.push_back(iteratetimesexpr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(tagaddrexpr0);
	printfArgs.push_back(remainderexpr);
	printfArgs.push_back(localeffectiveaddressexpr);
	printfArgs.push_back(bytesaccessedexpr);
	printfArgs.push_back(restbytesaccessedexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	snippets.push_back(ifexpr6);
	snippets.push_back(ifexpr11a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_xfer_opb_l_al_n(BPatch_point *inspoint)
{
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164902);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x81);

	x86_reg reg1value = X86_REG_AL;


	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));

	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *minusexpr0 = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);
	BPatch_arithExpr *minusexpr0a = new BPatch_arithExpr(BPatch_minus, BPatch_constExpr(0x8), *minusexpr0);
	BPatch_arithExpr *dividesexpr0 = new BPatch_arithExpr(BPatch_divide, *minusexpr0a, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr0 = new BPatch_arithExpr(BPatch_times, *dividesexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *minusexpr0a, *timesexpr0);

	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesaccessedexpr, *remainderexpr);


	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00 = new BPatch_boolExpr(BPatch_ne, *restremainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr01 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr02 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr03 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr04 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr05 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr06 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr07 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x7));

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);







	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);

	BPatch_arithExpr *plusexpr0 = new BPatch_arithExpr(BPatch_plus, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_arithExpr *divide1expr0 = new BPatch_arithExpr(BPatch_divide, *plusexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, *divide1expr0);

	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get 8 bits tag
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr2d = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2e = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x20));
	BPatch_arithExpr *timesexpr2f = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr2g = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x80));

	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *plusexpr2a, *timesexpr2b);
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *plusexpr2b, *timesexpr2c);
	BPatch_arithExpr *plusexpr2d = new BPatch_arithExpr(BPatch_plus, *plusexpr2c, *timesexpr2d);
	BPatch_arithExpr *plusexpr2e = new BPatch_arithExpr(BPatch_plus, *plusexpr2d, *timesexpr2e);
	BPatch_arithExpr *plusexpr2f = new BPatch_arithExpr(BPatch_plus, *plusexpr2e, *timesexpr2f);
	BPatch_arithExpr *plusexpr2g = new BPatch_arithExpr(BPatch_plus, *plusexpr2f, *timesexpr2g);


	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr2g);

	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr3 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr3);


	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr3);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	// if remainder is 1
	BPatch_arithExpr *divide0expr4a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divide0expr4a, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4a, *minus1expr1);
	BPatch_arithExpr *assignexpr4a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr01, *assignexpr4a);
	// if remainder is 2
	BPatch_arithExpr *divide0expr4b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *divide0expr4b, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *plusexpr2a);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr02, *assignexpr4b);
	// if remainder is 3
	BPatch_arithExpr *divide0expr4c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divide0expr4c, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4c, *plusexpr2b);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr03, *assignexpr4c);
	// if remainder is 4
	BPatch_arithExpr *divide0expr4d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *divide0expr4d, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4d = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *plusexpr2c);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4d);
	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr04, *assignexpr4d);
	// if remainder is 5
	BPatch_arithExpr *divide0expr4e = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divide0expr4e, BPatch_constExpr(0x20));
	BPatch_arithExpr *plusexpr4e = new BPatch_arithExpr(BPatch_plus, *timesexpr4e, *plusexpr2d);
	BPatch_arithExpr *assignexpr4e = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4e);
	BPatch_ifExpr *ifexpr4e = new BPatch_ifExpr(*bexpr05, *assignexpr4e);
	// if remainder is 6
	BPatch_arithExpr *divide0expr4f = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *divide0expr4f, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4f = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *plusexpr2e);
	BPatch_arithExpr *assignexpr4f = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4f);
	BPatch_ifExpr *ifexpr4f = new BPatch_ifExpr(*bexpr06, *assignexpr4f);
	// if remainder is 7
	BPatch_arithExpr *divide0expr4g = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x80));
	BPatch_arithExpr *timesexpr4g = new BPatch_arithExpr(BPatch_times, *divide0expr4g, BPatch_constExpr(0x80));
	BPatch_arithExpr *plusexpr4g = new BPatch_arithExpr(BPatch_plus, *timesexpr4g, *plusexpr2f);
	BPatch_arithExpr *assignexpr4g = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4g);
	BPatch_ifExpr *ifexpr4g = new BPatch_ifExpr(*bexpr07, *assignexpr4g);

	std::vector<BPatch_snippet*> ifsnippets;
	ifsnippets.push_back(ifexpr4a);
	ifsnippets.push_back(ifexpr4b);
	ifsnippets.push_back(ifexpr4c);
	ifsnippets.push_back(ifexpr4d);
	ifsnippets.push_back(ifexpr4e);
	ifsnippets.push_back(ifexpr4f);
	ifsnippets.push_back(ifexpr4g);
	BPatch_sequence *ifseq = new BPatch_sequence(ifsnippets);

	BPatch_ifExpr *ifexpr5 = new BPatch_ifExpr(*bexpr00, *ifseq);




	// first few tags

	BPatch_arithExpr *deref0expr6 = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr0);
	BPatch_arithExpr *ref0expr6 = deref0expr6;
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr6, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x100));

	BPatch_arithExpr *squareexpr7 = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *minusexpr0);
	//BPatch_constExpr *squareexpr7 = new BPatch_constExpr(0x0);

	BPatch_arithExpr *divideexpr7 = new BPatch_arithExpr(BPatch_divide, *ref0expr6, *squareexpr7);
	BPatch_arithExpr *timesexpr7 = new BPatch_arithExpr(BPatch_times, *divideexpr7, *squareexpr7);
	BPatch_arithExpr *minusexpr7 = new BPatch_arithExpr(BPatch_minus, *ref0expr6, *timesexpr7);
	BPatch_arithExpr *divideexpr7a = new BPatch_arithExpr(BPatch_divide, *plusexpr2g, *squareexpr7);
	BPatch_arithExpr *timesexpr7a = new BPatch_arithExpr(BPatch_times, *divideexpr7a, *squareexpr7);
	BPatch_arithExpr *plusexpr7 = new BPatch_arithExpr(BPatch_plus, *timesexpr7a, *minusexpr7);
	BPatch_arithExpr *plusexpr7a = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr7);
	BPatch_arithExpr *assignexpr7 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr0, *plusexpr7a);

	BPatch_boolExpr *bexpr8 = new BPatch_boolExpr(BPatch_ne, *minusexpr0, BPatch_constExpr(0x0));
	BPatch_ifExpr *ifexpr8 = new BPatch_ifExpr(*bexpr8, *assignexpr7);






	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr00);
	snippets0.push_back(assignexpr0);
	snippets0.push_back(whileexpr);
	snippets0.push_back(ifexpr5);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(ifexpr8);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *addrexprt0 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x0));
	BPatch_arithExpr *addrexprt1 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x4));
	BPatch_arithExpr *addrexprt2 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *addrexprt3 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0xc));
	BPatch_arithExpr *addrexprt4 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x10));

	BPatch_arithExpr *derefexprt0 = new BPatch_arithExpr(BPatch_deref, *addrexprt0);
	BPatch_arithExpr *derefexprt1 = new BPatch_arithExpr(BPatch_deref, *addrexprt1);
	BPatch_arithExpr *derefexprt2 = new BPatch_arithExpr(BPatch_deref, *addrexprt2);
	BPatch_arithExpr *derefexprt3 = new BPatch_arithExpr(BPatch_deref, *addrexprt3);
	BPatch_arithExpr *derefexprt4 = new BPatch_arithExpr(BPatch_deref, *addrexprt4);

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(derefexprt0);
	printfArgs.push_back(derefexprt1);
	printfArgs.push_back(derefexprt2);
	printfArgs.push_back(derefexprt3);
	printfArgs.push_back(derefexprt4);
	printfArgs.push_back(iteratetimesexpr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(tagaddrexpr0);
	printfArgs.push_back(remainderexpr);
	printfArgs.push_back(localeffectiveaddressexpr);
	printfArgs.push_back(squareexpr7);
	printfArgs.push_back(minusexpr0);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr00);
	//snippets.push_back(assignexpr0);
	//snippets.push_back(&printfCall);
	//snippets.push_back(whileexpr);
	//snippets.push_back(ifexpr5);
	snippets.push_back(ifexpr8);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _cwde(BPatch_point *inspoint)
{
	x86_reg reg0value = X86_REG_EAX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);



	// get bit 0 tag
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1);

	// get bit 1 tag
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *divideexpr1, *timesexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minusexpr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minusexpr1, *timesexpr2a);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *timesexpr4);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_r2r_opwb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr2, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr4);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_r2r_opwb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	BPatch_arithExpr *times1expr1a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *times1expr1a);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr2);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_r2r_oplw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the word to l-word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *times1expr3);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3a);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr3a);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_r2r_oplb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to l-word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr3c = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus1expr2, *timesexpr3a);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *timesexpr3b, *timesexpr3c);
	BPatch_arithExpr *plusexpr3c = new BPatch_arithExpr(BPatch_plus, *plusexpr3a, *plusexpr3b);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3c);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr3c);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_r2r_oplb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to l-word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 0 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr2);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr3c = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus1expr2, *timesexpr3a);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *timesexpr3b, *timesexpr3c);
	BPatch_arithExpr *plusexpr3c = new BPatch_arithExpr(BPatch_plus, *plusexpr3a, *plusexpr3b);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3c);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr3c);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_m2r_opwb(x86_reg reg0value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to word

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164903);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);


	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);



	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_plus, *ref1expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *divideexpr0e = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0f = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *divideexpr0g = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *divideexpr0h = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x80));

	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_arithExpr *assignexpr0e = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0e);
	BPatch_arithExpr *assignexpr0f = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0f);
	BPatch_arithExpr *assignexpr0g = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0g);
	BPatch_arithExpr *assignexpr0h = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0h);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr0e = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0f = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr0g = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr0h = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_ifExpr *ifexpr0h = new BPatch_ifExpr(*bexpr0h, *assignexpr0h);
	BPatch_ifExpr *ifexpr0g = new BPatch_ifExpr(*bexpr0g, *assignexpr0g, *ifexpr0h);
	BPatch_ifExpr *ifexpr0f = new BPatch_ifExpr(*bexpr0f, *assignexpr0f, *ifexpr0g);
	BPatch_ifExpr *ifexpr0e = new BPatch_ifExpr(*bexpr0e, *assignexpr0e, *ifexpr0f);
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d, *ifexpr0e);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	//BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));



	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);
	BPatch_arithExpr *times1expr1a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *times1expr1a);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_m2r_oplw(x86_reg reg0value, BPatch_point *inspoint)
{
	// propogate the tag of the word to l-word

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164902);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get new 4 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3a);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movsx_m2r_oplb(x86_reg reg0value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to l-word

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164902);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);


	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);



	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_plus, *ref1expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *divideexpr0e = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0f = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *divideexpr0g = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *divideexpr0h = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x80));

	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_arithExpr *assignexpr0e = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0e);
	BPatch_arithExpr *assignexpr0f = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0f);
	BPatch_arithExpr *assignexpr0g = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0g);
	BPatch_arithExpr *assignexpr0h = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0h);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr0e = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0f = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr0g = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr0h = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_ifExpr *ifexpr0h = new BPatch_ifExpr(*bexpr0h, *assignexpr0h);
	BPatch_ifExpr *ifexpr0g = new BPatch_ifExpr(*bexpr0g, *assignexpr0g, *ifexpr0h);
	BPatch_ifExpr *ifexpr0f = new BPatch_ifExpr(*bexpr0f, *assignexpr0f, *ifexpr0g);
	BPatch_ifExpr *ifexpr0e = new BPatch_ifExpr(*bexpr0e, *assignexpr0e, *ifexpr0f);
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d, *ifexpr0e);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);




	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *timesexpr2b, *timesexpr2c);
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *plusexpr2a, *plusexpr2b);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2c);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_r2r_opwb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr2, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr4);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_r2r_opwb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	BPatch_arithExpr *times1expr1a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *times1expr1a);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr2);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_r2r_oplw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the word to l-word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *times1expr3);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3a);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr3a);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_r2r_oplb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to l-word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr3c = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus1expr2, *timesexpr3a);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *timesexpr3b, *timesexpr3c);
	BPatch_arithExpr *plusexpr3c = new BPatch_arithExpr(BPatch_plus, *plusexpr3a, *plusexpr3b);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3c);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr3c);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_r2r_oplb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to l-word

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 0 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr2);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr3c = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus1expr2, *timesexpr3a);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *timesexpr3b, *timesexpr3c);
	BPatch_arithExpr *plusexpr3c = new BPatch_arithExpr(BPatch_plus, *plusexpr3a, *plusexpr3b);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3c);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(plusexpr3c);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_m2r_opwb(x86_reg reg0value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to word

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164905);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);


	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);



	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_plus, *ref1expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *divideexpr0e = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0f = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *divideexpr0g = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *divideexpr0h = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x80));

	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_arithExpr *assignexpr0e = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0e);
	BPatch_arithExpr *assignexpr0f = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0f);
	BPatch_arithExpr *assignexpr0g = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0g);
	BPatch_arithExpr *assignexpr0h = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0h);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr0e = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0f = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr0g = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr0h = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_ifExpr *ifexpr0h = new BPatch_ifExpr(*bexpr0h, *assignexpr0h);
	BPatch_ifExpr *ifexpr0g = new BPatch_ifExpr(*bexpr0g, *assignexpr0g, *ifexpr0h);
	BPatch_ifExpr *ifexpr0f = new BPatch_ifExpr(*bexpr0f, *assignexpr0f, *ifexpr0g);
	BPatch_ifExpr *ifexpr0e = new BPatch_ifExpr(*bexpr0e, *assignexpr0e, *ifexpr0f);
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d, *ifexpr0e);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);




	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);
	BPatch_arithExpr *times1expr1a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *times1expr1a);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_m2r_oplw(x86_reg reg0value, BPatch_point *inspoint)
{
	// propogate the tag of the word to l-word

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164902);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get new 4 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *plusexpr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr3a);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _movzx_m2r_oplb(x86_reg reg0value, BPatch_point *inspoint)
{
	// propogate the tag of the byte to l-word

	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164901);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;

	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);



	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_plus, *ref1expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *divideexpr0e = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0f = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *divideexpr0g = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *divideexpr0h = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x80));

	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_arithExpr *assignexpr0e = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0e);
	BPatch_arithExpr *assignexpr0f = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0f);
	BPatch_arithExpr *assignexpr0g = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0g);
	BPatch_arithExpr *assignexpr0h = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0h);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr0e = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0f = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr0g = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr0h = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_ifExpr *ifexpr0h = new BPatch_ifExpr(*bexpr0h, *assignexpr0h);
	BPatch_ifExpr *ifexpr0g = new BPatch_ifExpr(*bexpr0g, *assignexpr0g, *ifexpr0h);
	BPatch_ifExpr *ifexpr0f = new BPatch_ifExpr(*bexpr0f, *assignexpr0f, *ifexpr0g);
	BPatch_ifExpr *ifexpr0e = new BPatch_ifExpr(*bexpr0e, *assignexpr0e, *ifexpr0f);
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d, *ifexpr0e);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get new 4 bits tag
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *timesexpr2b, *timesexpr2c);
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *plusexpr2a, *plusexpr2b);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2c);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*
	//BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(divideexpr0a);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	//snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_ternary_opl(BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164904);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref1expr = deref1expr;

	x86_reg reg0value = X86_REG_EAX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times0expr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr3 = new BPatch_arithExpr(BPatch_minus, *divide0expr2, *times0expr3);
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr3, *minus1expr3);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *divideexpr3, *minusexpr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr4 = new BPatch_arithExpr(BPatch_minus, *divide0expr3, *times0expr4);
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr4, *minus1expr4);
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *plusexpr4, *timesexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *divideexpr4, *minusexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);


	x86_reg newreg0value = X86_REG_EDX;

	int newindex0 = csregvalue_to_grregindex(newreg0value);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *plusexpr6);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(newref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_ternary_opw(BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	BPatch_arithExpr *ref1expr = deref1expr;

	x86_reg reg0value = X86_REG_AX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);


	x86_reg newreg0value = X86_REG_EDX;

	int newindex0 = csregvalue_to_grregindex(newreg0value);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);

	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *plusexpr3a);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(newref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_ternary_opb(BPatch_point *inspoint)
{
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *eae, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	x86_reg reg0value = X86_REG_AX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get reg0 bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);

	// get reg1 bit 0
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr2);

	// get bit 0 tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr2);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3a, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3a, *timesexpr3);
	BPatch_arithExpr *plusexpr3b = new BPatch_arithExpr(BPatch_plus, *minusexpr3, *divideexpr3);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr4a = new BPatch_arithExpr(BPatch_times, *plusexpr3b, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *plusexpr3b, *times0expr4a);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *times0expr4, *plusexpr4);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4a);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_ternary_opl(x86_reg reg0value, BPatch_point *inspoint)
{
	x86_reg reg1value = reg0value;
	
	reg0value = X86_REG_EAX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times0expr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr3 = new BPatch_arithExpr(BPatch_minus, *divide0expr2, *times0expr3);
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr3, *minus1expr3);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *divideexpr3, *minusexpr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr4 = new BPatch_arithExpr(BPatch_minus, *divide0expr3, *times0expr4);
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr4, *minus1expr4);
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *plusexpr4, *timesexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *divideexpr4, *minusexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);


	x86_reg newreg0value = X86_REG_EDX;

	int newindex0 = csregvalue_to_grregindex(newreg0value);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *plusexpr6);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_ternary_opw(x86_reg reg0value, BPatch_point *inspoint)
{
	x86_reg reg1value = reg0value;
	
	reg0value = X86_REG_EAX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);



	x86_reg newreg0value = X86_REG_EDX;

	int newindex0 = csregvalue_to_grregindex(newreg0value);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *plusexpr3a);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	
	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
	
}

void r2r_ternary_opb_u(x86_reg reg0value, BPatch_point *inspoint)
{
	x86_reg reg1value = reg0value;
	
	reg0value = X86_REG_EAX;


	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 1
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));

	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr2a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);
	
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_ternary_opb_l(x86_reg reg0value, BPatch_point *inspoint)
{
	x86_reg reg1value = reg0value;
	
	reg0value = X86_REG_EAX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);
	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *plusexpr1a, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr1b = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr1a);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr1b);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr2);
	
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r_clrl2(BPatch_point *inspoint)
{
	x86_reg reg0value = X86_REG_EAX;
	x86_reg reg1value = X86_REG_EDX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *ref1expr, BPatch_constExpr(0x0));



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(assignexpr1);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(assignexpr1);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r_clrl4(BPatch_point *inspoint)
{
	x86_reg reg0value = X86_REG_EAX;
	x86_reg reg1value = X86_REG_EBX;
	x86_reg reg2value = X86_REG_ECX;
	x86_reg reg3value = X86_REG_EDX;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	int index2 = csregvalue_to_grregindex(reg2value);
	BPatch_constExpr *index2expr = new BPatch_constExpr(index2);
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index2expr);
	int index3 = csregvalue_to_grregindex(reg3value);
	BPatch_constExpr *index3expr = new BPatch_constExpr(index3);
	BPatch_arithExpr *ref3expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index3expr);



	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *ref0expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *ref1expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *ref2expr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexpr3 = new BPatch_arithExpr(BPatch_assign, *ref3expr, BPatch_constExpr(0x0));


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0);
	snippets.push_back(assignexpr1);
	snippets.push_back(assignexpr2);
	snippets.push_back(assignexpr3);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr0);
	snippets.push_back(assignexpr1);
	snippets.push_back(assignexpr2);
	snippets.push_back(assignexpr3);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _cmpxchg_r2r_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	BPatch_registerExpr *reg0expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_registerExpr *regeaxexpr = csregvalue_to_grregexprptr(X86_REG_EAX);

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);



	x86_reg newreg0value = X86_REG_EAX;
	x86_reg newreg1value = reg0value;

	int newindex0 = csregvalue_to_grregindex(newreg0value);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	int newindex1 = csregvalue_to_grregindex(newreg1value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *newdivide1expr3 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *newtimes1expr3 = new BPatch_arithExpr(BPatch_times, *newdivide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr3 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2, *newtimes1expr3);
	BPatch_arithExpr *newtimesexpr3a = new BPatch_arithExpr(BPatch_times, *newminus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *newdivide1expr4 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimes1expr4 = new BPatch_arithExpr(BPatch_times, *newdivide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr4 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr3, *newtimes1expr4);
	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *newminus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *newplusexpr5a = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);
	BPatch_arithExpr *newplusexpr5b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr3a, *newtimesexpr4a);
	BPatch_arithExpr *newplusexpr5c = new BPatch_arithExpr(BPatch_plus, *newplusexpr5a, *newplusexpr5b);

	// get new tag
	BPatch_arithExpr *newdivide0expr6 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimesexpr6 = new BPatch_arithExpr(BPatch_times, *newdivide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6, *newplusexpr5c);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr6);



	// if dst == EAX, then t[dst] = t[src], else t[EAX] = t[dst]
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *reg0expr, *regeaxexpr);
	BPatch_ifExpr *cmpxchgexpr = new BPatch_ifExpr(*bexpr, *assignexpr, *newassignexpr);



	if (!appBin->insertSnippet(*cmpxchgexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(reg0expr);
	printfArgs.push_back(regeaxexpr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(cmpxchgexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _cmpxchg_r2r_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	BPatch_registerExpr *reg032expr = csregvalue_to_grregexprptr(reg0value);
	BPatch_arithExpr *divide032expr = new BPatch_arithExpr(BPatch_divide, *reg032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *times032expr = new BPatch_arithExpr(BPatch_times, *divide032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *reg0expr = new BPatch_arithExpr(BPatch_minus, *reg032expr, *times032expr);
	BPatch_registerExpr *regeaxexpr = csregvalue_to_grregexprptr(X86_REG_EAX);
	BPatch_arithExpr *divideeaxexpr = new BPatch_arithExpr(BPatch_divide, *regeaxexpr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *timeseaxexpr = new BPatch_arithExpr(BPatch_times, *divideeaxexpr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *regaxexpr = new BPatch_arithExpr(BPatch_minus, *regeaxexpr, *timeseaxexpr);


	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr4);



	x86_reg newreg0value = X86_REG_AX;
	x86_reg newreg1value = reg0value;

	int newindex0 = csregvalue_to_grregindex(newreg0value);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	int newindex1 = csregvalue_to_grregindex(newreg1value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// if dst == AX, then t[dst] = t[src], else t[AX] = t[dst]
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *reg0expr, *regaxexpr);
	BPatch_ifExpr *cmpxchgexpr = new BPatch_ifExpr(*bexpr, *assignexpr, *newassignexpr);



	if (!appBin->insertSnippet(*cmpxchgexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(reg0expr);
	printfArgs.push_back(regaxexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(cmpxchgexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _cmpxchg_r2m_opl(x86_reg reg1value, BPatch_point *inspoint)
{
	// get dest op value and eax value
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *localeffectiveaddressexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_registerExpr *regeaxexpr = csregvalue_to_grregexprptr(X86_REG_EAX);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *regeaxexpr);
	BPatch_boolExpr *bminexpr = new BPatch_boolExpr(BPatch_ge, *localeffectiveaddressexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *bmaxexpr = new BPatch_boolExpr(BPatch_le, *localeffectiveaddressexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;


	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6);

	BPatch_arithExpr *minusexpr7 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr6);
	BPatch_arithExpr *divide0expr7 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr7 = new BPatch_arithExpr(BPatch_times, *divide0expr7, BPatch_constExpr(0x100));
	BPatch_arithExpr *plusexpr7 = new BPatch_arithExpr(BPatch_plus, *timesexpr7, *minusexpr7);
	BPatch_arithExpr *timesexpr7a = new BPatch_arithExpr(BPatch_times, *plusexpr5c, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr7a = new BPatch_arithExpr(BPatch_plus, *plusexpr7, *timesexpr7a);
	BPatch_arithExpr *assignexpr7 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr7a);
	BPatch_ifExpr *ifexpr7 = new BPatch_ifExpr(*bexpr0a, *assignexpr7, *assignexpr);


	BPatch_arithExpr *newderef1expr = new BPatch_arithExpr(BPatch_plus, *localop0tagexpr, BPatch_constExpr(0x0));

	int newindex0 = csregvalue_to_grregindex(X86_REG_EAX);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	BPatch_arithExpr *newref1expr = newderef1expr;

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *newdivide1expr3 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *newtimes1expr3 = new BPatch_arithExpr(BPatch_times, *newdivide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr3 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2, *newtimes1expr3);
	BPatch_arithExpr *newtimesexpr3a = new BPatch_arithExpr(BPatch_times, *newminus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *newdivide1expr4 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimes1expr4 = new BPatch_arithExpr(BPatch_times, *newdivide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr4 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr3, *newtimes1expr4);
	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *newminus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *newplusexpr5a = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);
	BPatch_arithExpr *newplusexpr5b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr3a, *newtimesexpr4a);
	BPatch_arithExpr *newplusexpr5c = new BPatch_arithExpr(BPatch_plus, *newplusexpr5a, *newplusexpr5b);

	// get new tag
	BPatch_arithExpr *newdivide0expr6 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimesexpr6 = new BPatch_arithExpr(BPatch_times, *newdivide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6, *newplusexpr5c);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr6);


	// if dst == EAX, then t[dst] = t[src], else t[EAX] = t[dst]
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *localop0valueexpr, *regeaxexpr);
	BPatch_ifExpr *cmpxchgexpr = new BPatch_ifExpr(*bexpr, *ifexpr7, *newassignexpr);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(op0minifexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmpxchgexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_registerExpr *regebxexpr = csregvalue_to_grregexprptr(X86_REG_EBX);

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx .... %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(localop0valueexpr);
	printfArgs.push_back(regeaxexpr);
	printfArgs.push_back(bexpr);
	printfArgs.push_back(regebxexpr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(op0minifexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmpxchgexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _cmpxchg_r2m_opw(x86_reg reg1value, BPatch_point *inspoint)
{
	// get dest op 16 bits value and ax value
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	BPatch_arithExpr *op032valueexpr = new BPatch_arithExpr(BPatch_deref, *localeffectiveaddressexpr);
	BPatch_arithExpr *divide032expr = new BPatch_arithExpr(BPatch_divide, *op032valueexpr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *times032expr = new BPatch_arithExpr(BPatch_times, *divide032expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_minus, *op032valueexpr, *times032expr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);

	BPatch_registerExpr *regeaxexpr = csregvalue_to_grregexprptr(X86_REG_EAX);
	BPatch_arithExpr *divideeaxexpr = new BPatch_arithExpr(BPatch_divide, *regeaxexpr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *timeseaxexpr = new BPatch_arithExpr(BPatch_times, *divideeaxexpr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *regaxexpr = new BPatch_arithExpr(BPatch_minus, *regeaxexpr, *timeseaxexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *regaxexpr);

	BPatch_boolExpr *bminexpr = new BPatch_boolExpr(BPatch_ge, *localeffectiveaddressexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *bmaxexpr = new BPatch_boolExpr(BPatch_le, *localeffectiveaddressexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*bminexpr, *op0maxifexpr, *assignexprlocalop0b);

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	BPatch_arithExpr *ref0expr = deref0expr;


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *ref0expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4);

	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);

	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4c);
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *minusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4e);
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *plusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *minusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *assignexpr, *ifexpr4b);


	BPatch_arithExpr *newderef1expr = new BPatch_arithExpr(BPatch_plus, *localop0tagexpr, BPatch_constExpr(0x0));

	int newindex0 = csregvalue_to_grregindex(X86_REG_EAX);
	BPatch_constExpr *newindex0expr = new BPatch_constExpr(newindex0);
	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex0expr);
	BPatch_arithExpr *newref1expr = newderef1expr;

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// if dst == AX, then t[dst] = t[src], else t[AX] = t[dst]
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_eq, *localop0valueexpr, *regaxexpr);
	BPatch_ifExpr *cmpxchgexpr = new BPatch_ifExpr(*bexpr, *ifexpr4a, *newassignexpr);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(op0minifexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmpxchgexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_registerExpr *regebxexpr = csregvalue_to_grregexprptr(X86_REG_EBX);

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx........ %lx .... %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(deref0expr);
	printfArgs.push_back(localop0valueexpr);
	printfArgs.push_back(regaxexpr);
	printfArgs.push_back(bexpr);
	printfArgs.push_back(regebxexpr);
	printfArgs.push_back(localeffectiveaddressexpr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(op0minifexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(cmpxchgexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_r2r_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{

	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr6);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *newdivide1expr3 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *newtimes1expr3 = new BPatch_arithExpr(BPatch_times, *newdivide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr3 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2, *newtimes1expr3);
	BPatch_arithExpr *newtimesexpr3a = new BPatch_arithExpr(BPatch_times, *newminus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *newdivide1expr4 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimes1expr4 = new BPatch_arithExpr(BPatch_times, *newdivide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr4 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr3, *newtimes1expr4);
	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *newminus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *newplusexpr5a = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);
	BPatch_arithExpr *newplusexpr5b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr3a, *newtimesexpr4a);
	BPatch_arithExpr *newplusexpr5c = new BPatch_arithExpr(BPatch_plus, *newplusexpr5a, *newplusexpr5b);

	// get new tag
	BPatch_arithExpr *newdivide0expr6 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimesexpr6 = new BPatch_arithExpr(BPatch_times, *newdivide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6, *newplusexpr5c);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr6);


	// tmp to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *new1divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *new1times1expr3 = new BPatch_arithExpr(BPatch_times, *new1divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr3 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2, *new1times1expr3);
	BPatch_arithExpr *new1timesexpr3a = new BPatch_arithExpr(BPatch_times, *new1minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *new1divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1times1expr4 = new BPatch_arithExpr(BPatch_times, *new1divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr4 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr3, *new1times1expr4);
	BPatch_arithExpr *new1timesexpr4a = new BPatch_arithExpr(BPatch_times, *new1minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *new1plusexpr5a = new BPatch_arithExpr(BPatch_plus, *new1minus1expr1, *new1timesexpr2a);
	BPatch_arithExpr *new1plusexpr5b = new BPatch_arithExpr(BPatch_plus, *new1timesexpr3a, *new1timesexpr4a);
	BPatch_arithExpr *new1plusexpr5c = new BPatch_arithExpr(BPatch_plus, *new1plusexpr5a, *new1plusexpr5b);

	// get new tag
	BPatch_arithExpr *new1divide0expr6 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1timesexpr6 = new BPatch_arithExpr(BPatch_times, *new1divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1plusexpr6 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr6, *new1plusexpr5c);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr6);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_r2r_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// tmp to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus1expr1, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}





	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_r2r_opb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr2);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get new tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newplusexpr2 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2, *newminus1expr1);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr2);


	// tmp to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get new tag
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr2, *new1minus1expr1);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr2);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_r2r_opb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *newdivide0expr1 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes0expr1 = new BPatch_arithExpr(BPatch_times, *newdivide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus0expr1 = new BPatch_arithExpr(BPatch_minus, *newref0expr, *newtimes0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *newdivide1expr2a = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newdivide1expr2b = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2a, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus0expr1, *newtimesexpr2);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// tmp to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *new1divide1expr2a = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1divide1expr2b = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2a, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1timesexpr2);

	// get new tag
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_r2r_opb_lu(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 1 tag as bit 0 tag
	BPatch_arithExpr *divide1expr1a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr1b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *divide1expr1a, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr2);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0
	BPatch_arithExpr *newdivide0expr1 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes0expr1 = new BPatch_arithExpr(BPatch_times, *newdivide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus0expr1 = new BPatch_arithExpr(BPatch_minus, *newref0expr, *newtimes0expr1);
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newminus1expr1, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus0expr1, *newtimesexpr2);

	// get new tag
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// tmp to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get new tag
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr2, *new1minus1expr1);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr2);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_r2r_opb_ul(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get op1 bit 1 tag as bit 0 tag
	BPatch_arithExpr *newdivide1expr1a = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newdivide1expr1b = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1b, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1a, *newtimes1expr1);

	// get new tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newplusexpr2 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2, *newminus1expr1);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr2);


	// tmp to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *new1divide1expr2a = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1divide1expr2b = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2a, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1timesexpr2);

	// get new tag
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_m2r_opl(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);



	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr6);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *newdivide1expr3 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *newtimes1expr3 = new BPatch_arithExpr(BPatch_times, *newdivide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr3 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2, *newtimes1expr3);
	BPatch_arithExpr *newtimesexpr3a = new BPatch_arithExpr(BPatch_times, *newminus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *newdivide1expr4 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimes1expr4 = new BPatch_arithExpr(BPatch_times, *newdivide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr4 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr3, *newtimes1expr4);
	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *newminus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *newplusexpr5a = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);
	BPatch_arithExpr *newplusexpr5b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr3a, *newtimesexpr4a);
	BPatch_arithExpr *newplusexpr5c = new BPatch_arithExpr(BPatch_plus, *newplusexpr5a, *newplusexpr5b);

	// get new tag
	BPatch_arithExpr *newdivide0expr6 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimesexpr6 = new BPatch_arithExpr(BPatch_times, *newdivide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6, *newplusexpr5c);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr6);

	BPatch_arithExpr *newtimesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr6 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr6a);
	BPatch_arithExpr *newtimesexpr6b = new BPatch_arithExpr(BPatch_times, *newplusexpr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6b, *newminusexpr6);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr6a);
	BPatch_ifExpr *ifexpr6 = new BPatch_ifExpr(*bexpr0a, *assignexpr6, *newassignexpr);


	// tmp to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *new1divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *new1times1expr3 = new BPatch_arithExpr(BPatch_times, *new1divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr3 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2, *new1times1expr3);
	BPatch_arithExpr *new1timesexpr3a = new BPatch_arithExpr(BPatch_times, *new1minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *new1divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1times1expr4 = new BPatch_arithExpr(BPatch_times, *new1divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr4 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr3, *new1times1expr4);
	BPatch_arithExpr *new1timesexpr4a = new BPatch_arithExpr(BPatch_times, *new1minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *new1plusexpr5a = new BPatch_arithExpr(BPatch_plus, *new1minus1expr1, *new1timesexpr2a);
	BPatch_arithExpr *new1plusexpr5b = new BPatch_arithExpr(BPatch_plus, *new1timesexpr3a, *new1timesexpr4a);
	BPatch_arithExpr *new1plusexpr5c = new BPatch_arithExpr(BPatch_plus, *new1plusexpr5a, *new1plusexpr5b);

	// get new tag
	BPatch_arithExpr *new1divide0expr6 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1timesexpr6 = new BPatch_arithExpr(BPatch_times, *new1divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1plusexpr6 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr6, *new1plusexpr5c);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr6);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr6);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr6);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_m2r_opw(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4);

	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *newminusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4a);
	BPatch_arithExpr *newtimesexpr4b = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4b, *newminusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4a);

	BPatch_arithExpr *newtimesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4c);
	BPatch_arithExpr *newtimesexpr4d = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr4b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4d, *newminusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4b);

	BPatch_arithExpr *newtimesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *newminusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4e);
	BPatch_arithExpr *newtimesexpr4f = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *newplusexpr4c = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4f, *newminusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *newassignexpr, *ifexpr4b);





	// tmp to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus1expr1, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_m2r_opb_u(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));


	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *newdivide0expr1 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes0expr1 = new BPatch_arithExpr(BPatch_times, *newdivide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus0expr1 = new BPatch_arithExpr(BPatch_minus, *newref0expr, *newtimes0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *newdivide1expr2a = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newdivide1expr2b = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2a, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus0expr1, *newtimesexpr2);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4);


	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *newminusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4a);
	BPatch_arithExpr *newtimesexpr4b = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4b, *newminusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4a);

	BPatch_arithExpr *newtimesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4c);
	BPatch_arithExpr *newtimesexpr4d = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr4b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4d, *newminusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4b);

	BPatch_arithExpr *newtimesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *newminusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4e);
	BPatch_arithExpr *newtimesexpr4f = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *newplusexpr4c = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4f, *newminusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *newassignexpr, *ifexpr4b);








	// tmp to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *new1divide1expr2a = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1divide1expr2b = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2a, *new1times1expr2);
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1timesexpr2);

	// get new tag
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xchg_m2r_opb_l(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr2);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get new tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newplusexpr2 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2, *newminus1expr1);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2);


	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *newminusexpr2 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr2a);
	BPatch_arithExpr *newtimesexpr2b = new BPatch_arithExpr(BPatch_times, *newplusexpr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr2a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2b, *newminusexpr2);
	BPatch_arithExpr *assignexpr2b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2a);

	BPatch_arithExpr *newtimesexpr2c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr2a = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr2c);
	BPatch_arithExpr *newtimesexpr2d = new BPatch_arithExpr(BPatch_times, *newplusexpr2, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr2b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2d, *newminusexpr2a);
	BPatch_arithExpr *assignexpr2c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2b);

	BPatch_arithExpr *newtimesexpr2e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *newminusexpr2b = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr2e);
	BPatch_arithExpr *newtimesexpr2f = new BPatch_arithExpr(BPatch_times, *newplusexpr2, BPatch_constExpr(0x40));
	BPatch_arithExpr *newplusexpr2c = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2f, *newminusexpr2b);
	BPatch_arithExpr *assignexpr2d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2c);

	BPatch_ifExpr *ifexpr2d = new BPatch_ifExpr(*bexpr0d, *assignexpr2d);
	BPatch_ifExpr *ifexpr2c = new BPatch_ifExpr(*bexpr0c, *assignexpr2c, *ifexpr2d);
	BPatch_ifExpr *ifexpr2b = new BPatch_ifExpr(*bexpr0b, *assignexpr2b, *ifexpr2c);
	BPatch_ifExpr *ifexpr2a = new BPatch_ifExpr(*bexpr0a, *newassignexpr, *ifexpr2b);



	// tmp to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0 tag
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);

	// get new tag
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr2, *new1minus1expr1);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr2);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr2a);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr2a);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_r2r_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr6);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *newdivide1expr3 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *newtimes1expr3 = new BPatch_arithExpr(BPatch_times, *newdivide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr3 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2, *newtimes1expr3);
	BPatch_arithExpr *newtimesexpr3a = new BPatch_arithExpr(BPatch_times, *newminus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *newdivide1expr4 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimes1expr4 = new BPatch_arithExpr(BPatch_times, *newdivide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr4 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr3, *newtimes1expr4);
	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *newminus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *newplusexpr5a = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);
	BPatch_arithExpr *newplusexpr5b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr3a, *newtimesexpr4a);
	BPatch_arithExpr *newplusexpr5c = new BPatch_arithExpr(BPatch_plus, *newplusexpr5a, *newplusexpr5b);

	// get new tag
	BPatch_arithExpr *newdivide0expr6 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimesexpr6 = new BPatch_arithExpr(BPatch_times, *newdivide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6, *newplusexpr5c);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr6);


	// binary(tmp, reg0) to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *new1divide0expr3 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *new1times0expr3 = new BPatch_arithExpr(BPatch_times, *new1divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr3 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr2, *new1times0expr3);
	BPatch_arithExpr *new1divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *new1times1expr3 = new BPatch_arithExpr(BPatch_times, *new1divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr3 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2, *new1times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr3, *new1minus1expr3);
	BPatch_arithExpr *new1divideexpr3 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr3 = new BPatch_arithExpr(BPatch_times, *new1divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr3 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr3, *new1timesexpr3);
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr3, *new1minusexpr3);
	BPatch_arithExpr *new1timesexpr3a = new BPatch_arithExpr(BPatch_times, *new1plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1times0expr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr4 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr3, *new1times0expr4);
	BPatch_arithExpr *new1divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1times1expr4 = new BPatch_arithExpr(BPatch_times, *new1divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr4 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr3, *new1times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr4, *new1minus1expr4);
	BPatch_arithExpr *new1divideexpr4 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr4 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr4, *new1timesexpr4);
	BPatch_arithExpr *new1plusexpr4a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr4, *new1minusexpr4);
	BPatch_arithExpr *new1timesexpr4a = new BPatch_arithExpr(BPatch_times, *new1plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *new1plusexpr5a = new BPatch_arithExpr(BPatch_plus, *new1plusexpr1a, *new1timesexpr2a);
	BPatch_arithExpr *new1plusexpr5b = new BPatch_arithExpr(BPatch_plus, *new1timesexpr3a, *new1timesexpr4a);
	BPatch_arithExpr *new1plusexpr5c = new BPatch_arithExpr(BPatch_plus, *new1plusexpr5a, *new1plusexpr5b);

	// get new tag
	BPatch_arithExpr *new1timesexpr6 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1plusexpr6 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr6, *new1plusexpr5c);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr6);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_r2r_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// binary(tmp, reg0) to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1plusexpr1a, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_r2r_opb_l(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr2);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get new tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newplusexpr2 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2, *newminus1expr1);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr2);


	// binary(tmp, reg0) to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get new tag
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr2, *new1plusexpr1a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr2);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_r2r_opb_u(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *newdivide0expr1 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes0expr1 = new BPatch_arithExpr(BPatch_times, *newdivide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus0expr1 = new BPatch_arithExpr(BPatch_minus, *newref0expr, *newtimes0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *newdivide1expr2a = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newdivide1expr2b = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2a, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus0expr1, *newtimesexpr2);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// binary(tmp, reg0) to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_r2r_opb_lu(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get op1 bit 1 tag as bit 0 tag
	BPatch_arithExpr *divide1expr1a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr1b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *divide1expr1a, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr2);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0
	BPatch_arithExpr *newdivide0expr1 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes0expr1 = new BPatch_arithExpr(BPatch_times, *newdivide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus0expr1 = new BPatch_arithExpr(BPatch_minus, *newref0expr, *newtimes0expr1);
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newminus1expr1, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus0expr1, *newtimesexpr2);

	// get new tag
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr4);


	// binary(tmp, reg0) to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get new tag
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr2, *new1plusexpr1a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr2);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_r2r_opb_ul(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	// reg1 to tmp

	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr1, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// reg0 to reg1

	BPatch_arithExpr *newref0expr = ref1expr;
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get op1 bit 1 tag as bit 0 tag
	BPatch_arithExpr *newdivide1expr1a = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newdivide1expr1b = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1b, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1a, *newtimes1expr1);

	// get new tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newplusexpr2 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2, *newminus1expr1);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *newref0expr, *newplusexpr2);


	// binary(tmp, reg0) to reg0

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx .......... %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(new1index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);
	printfArgs.push_back(localtmptagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(newassignexpr);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_m2r_opl(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));


	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr6);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *newdivide1expr3 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *newtimes1expr3 = new BPatch_arithExpr(BPatch_times, *newdivide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr3 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2, *newtimes1expr3);
	BPatch_arithExpr *newtimesexpr3a = new BPatch_arithExpr(BPatch_times, *newminus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *newdivide1expr4 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimes1expr4 = new BPatch_arithExpr(BPatch_times, *newdivide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr4 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr3, *newtimes1expr4);
	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *newminus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *newplusexpr5a = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);
	BPatch_arithExpr *newplusexpr5b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr3a, *newtimesexpr4a);
	BPatch_arithExpr *newplusexpr5c = new BPatch_arithExpr(BPatch_plus, *newplusexpr5a, *newplusexpr5b);

	// get new tag
	BPatch_arithExpr *newdivide0expr6 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *newtimesexpr6 = new BPatch_arithExpr(BPatch_times, *newdivide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6, *newplusexpr5c);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr6);


	BPatch_arithExpr *newtimesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr6 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr6a);
	BPatch_arithExpr *newtimesexpr6b = new BPatch_arithExpr(BPatch_times, *newplusexpr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr6a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr6b, *newminusexpr6);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr6a);
	BPatch_ifExpr *ifexpr6 = new BPatch_ifExpr(*bexpr0a, *assignexpr6, *newassignexpr);



	// binary(tmp, op0) to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *new1divide0expr3 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *new1times0expr3 = new BPatch_arithExpr(BPatch_times, *new1divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr3 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr2, *new1times0expr3);
	BPatch_arithExpr *new1divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *new1times1expr3 = new BPatch_arithExpr(BPatch_times, *new1divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr3 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr2, *new1times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *new1plusexpr3 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr3, *new1minus1expr3);
	BPatch_arithExpr *new1divideexpr3 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr3 = new BPatch_arithExpr(BPatch_times, *new1divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr3 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr3, *new1timesexpr3);
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr3, *new1minusexpr3);
	BPatch_arithExpr *new1timesexpr3a = new BPatch_arithExpr(BPatch_times, *new1plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *new1divide0expr4 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1times0expr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr4 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr3, *new1times0expr4);
	BPatch_arithExpr *new1divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1times1expr4 = new BPatch_arithExpr(BPatch_times, *new1divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr4 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr3, *new1times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr4, *new1minus1expr4);
	BPatch_arithExpr *new1divideexpr4 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr4 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr4, *new1timesexpr4);
	BPatch_arithExpr *new1plusexpr4a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr4, *new1minusexpr4);
	BPatch_arithExpr *new1timesexpr4a = new BPatch_arithExpr(BPatch_times, *new1plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *new1plusexpr5a = new BPatch_arithExpr(BPatch_plus, *new1plusexpr1a, *new1timesexpr2a);
	BPatch_arithExpr *new1plusexpr5b = new BPatch_arithExpr(BPatch_plus, *new1timesexpr3a, *new1timesexpr4a);
	BPatch_arithExpr *new1plusexpr5c = new BPatch_arithExpr(BPatch_plus, *new1plusexpr5a, *new1plusexpr5b);

	// get new tag
	BPatch_arithExpr *new1timesexpr6 = new BPatch_arithExpr(BPatch_times, *new1divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *new1plusexpr6 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr6, *new1plusexpr5c);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr6);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr6);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr6);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_m2r_opw(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);

	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get bit 1 tag
	BPatch_arithExpr *newdivide1expr2 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr1, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus1expr1, *newtimesexpr2a);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4);


	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *newminusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4a);
	BPatch_arithExpr *newtimesexpr4b = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4b, *newminusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4a);

	BPatch_arithExpr *newtimesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4c);
	BPatch_arithExpr *newtimesexpr4d = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr4b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4d, *newminusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4b);

	BPatch_arithExpr *newtimesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *newminusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4e);
	BPatch_arithExpr *newtimesexpr4f = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *newplusexpr4c = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4f, *newminusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *newassignexpr, *ifexpr4b);



	// binary(tmp, op0) to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1plusexpr1a, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_m2r_opb_u(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get op0 bit 0 tag
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *times0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *divide1expr2a = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *divide1expr2b = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr2a, *times1expr2);
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *timesexpr2);

	// get new tag
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr4);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get op0 bit 0 tag
	BPatch_arithExpr *newdivide0expr1 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes0expr1 = new BPatch_arithExpr(BPatch_times, *newdivide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus0expr1 = new BPatch_arithExpr(BPatch_minus, *newref0expr, *newtimes0expr1);

	// get op1 bit 1 tag
	BPatch_arithExpr *newdivide1expr2a = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newdivide1expr2b = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimes1expr2 = new BPatch_arithExpr(BPatch_times, *newdivide1expr2b, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr2 = new BPatch_arithExpr(BPatch_minus, *newdivide1expr2a, *newtimes1expr2);
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newminus1expr2, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *newplusexpr3 = new BPatch_arithExpr(BPatch_plus, *newminus0expr1, *newtimesexpr2);

	// get new tag
	BPatch_arithExpr *newdivide0expr4 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *newtimesexpr4 = new BPatch_arithExpr(BPatch_times, *newdivide0expr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4, *newplusexpr3);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4);


	BPatch_arithExpr *newtimesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *newminusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4a);
	BPatch_arithExpr *newtimesexpr4b = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr4a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4b, *newminusexpr4);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4a);

	BPatch_arithExpr *newtimesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4c);
	BPatch_arithExpr *newtimesexpr4d = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr4b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4d, *newminusexpr4a);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4b);

	BPatch_arithExpr *newtimesexpr4e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *newminusexpr4b = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr4e);
	BPatch_arithExpr *newtimesexpr4f = new BPatch_arithExpr(BPatch_times, *newplusexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *newplusexpr4c = new BPatch_arithExpr(BPatch_plus, *newtimesexpr4f, *newminusexpr4b);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr4c);

	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr0d, *assignexpr4d);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr0c, *assignexpr4c, *ifexpr4d);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr0b, *assignexpr4b, *ifexpr4c);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr0a, *newassignexpr, *ifexpr4b);



	// tmp to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));

	// get bit 1
	BPatch_arithExpr *new1divide0expr2 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times0expr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide0expr1, *new1times0expr2);
	BPatch_arithExpr *new1divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1times1expr2 = new BPatch_arithExpr(BPatch_times, *new1divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr2 = new BPatch_arithExpr(BPatch_minus, *new1divide1expr1, *new1times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr2, *new1minus1expr2);
	BPatch_arithExpr *new1divideexpr2 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr2 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr2, *new1timesexpr2);
	BPatch_arithExpr *new1plusexpr2a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr2, *new1minusexpr2);
	BPatch_arithExpr *new1timesexpr2a = new BPatch_arithExpr(BPatch_times, *new1plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *new1plusexpr3a = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1timesexpr2a);

	// get new tag
	BPatch_arithExpr *new1timesexpr4 = new BPatch_arithExpr(BPatch_times, *new1divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *new1plusexpr4 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr4, *new1plusexpr3a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr4);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr4a);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _xadd_m2r_opb_l(x86_reg reg0value, BPatch_point *inspoint)
{
	// op1 (mem) to tmp
	// compute tag addr
	BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x8063db6);

	BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *localeffectiveaddressexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;
	BPatch_arithExpr *assigntmpexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, BPatch_constExpr(0x0));

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *localeffectiveaddressexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0b = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *divideexpr0c = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *divideexpr0d = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0b);
	BPatch_arithExpr *assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0c);
	BPatch_arithExpr *assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0d);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr0d = new BPatch_ifExpr(*bexpr0d, *assignexpr0d);
	BPatch_ifExpr *ifexpr0c = new BPatch_ifExpr(*bexpr0c, *assignexpr0c, *ifexpr0d);
	BPatch_ifExpr *ifexpr0b = new BPatch_ifExpr(*bexpr0b, *assignexpr0b, *ifexpr0c);
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *ifexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get new tag
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *minus1expr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *plusexpr2);


	// op0(reg0) to op1 (mem)

	BPatch_arithExpr *newref0expr = new BPatch_arithExpr(BPatch_plus, *localop1tagexpr, BPatch_constExpr(0x0));
	int newindex1 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *newindex1expr = new BPatch_constExpr(newindex1);
	BPatch_arithExpr *newref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *newindex1expr);

	// get bit 0 tag
	BPatch_arithExpr *newdivide1expr1 = new BPatch_arithExpr(BPatch_divide, *newref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimes1expr1 = new BPatch_arithExpr(BPatch_times, *newdivide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *newminus1expr1 = new BPatch_arithExpr(BPatch_minus, *newref1expr, *newtimes1expr1);

	// get new tag
	BPatch_arithExpr *newdivide0expr2 = new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *newtimesexpr2 = new BPatch_arithExpr(BPatch_times, *newdivide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *newplusexpr2 = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2, *newminus1expr1);
	BPatch_arithExpr *newassignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2);

	BPatch_arithExpr *newtimesexpr2a = new BPatch_arithExpr(BPatch_times, *divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *newminusexpr2 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr2a);
	BPatch_arithExpr *newtimesexpr2b = new BPatch_arithExpr(BPatch_times, *newplusexpr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *newplusexpr2a = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2b, *newminusexpr2);
	BPatch_arithExpr *assignexpr2b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2a);

	BPatch_arithExpr *newtimesexpr2c = new BPatch_arithExpr(BPatch_times, *divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *newminusexpr2a = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr2c);
	BPatch_arithExpr *newtimesexpr2d = new BPatch_arithExpr(BPatch_times, *newplusexpr2, BPatch_constExpr(0x10));
	BPatch_arithExpr *newplusexpr2b = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2d, *newminusexpr2a);
	BPatch_arithExpr *assignexpr2c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2b);

	BPatch_arithExpr *newtimesexpr2e = new BPatch_arithExpr(BPatch_times, *divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *newminusexpr2b = new BPatch_arithExpr(BPatch_minus, *ref1expr, *newtimesexpr2e);
	BPatch_arithExpr *newtimesexpr2f = new BPatch_arithExpr(BPatch_times, *newplusexpr2, BPatch_constExpr(0x40));
	BPatch_arithExpr *newplusexpr2c = new BPatch_arithExpr(BPatch_plus, *newtimesexpr2f, *newminusexpr2b);
	BPatch_arithExpr *assignexpr2d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *newplusexpr2c);

	BPatch_ifExpr *ifexpr2d = new BPatch_ifExpr(*bexpr0d, *assignexpr2d);
	BPatch_ifExpr *ifexpr2c = new BPatch_ifExpr(*bexpr0c, *assignexpr2c, *ifexpr2d);
	BPatch_ifExpr *ifexpr2b = new BPatch_ifExpr(*bexpr0b, *assignexpr2b, *ifexpr2c);
	BPatch_ifExpr *ifexpr2a = new BPatch_ifExpr(*bexpr0a, *newassignexpr, *ifexpr2b);



	// tmp to op0 (reg0)

	int new1index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *new1index0expr = new BPatch_constExpr(new1index0);
	BPatch_arithExpr *new1ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *new1index0expr);

	// get bit 0
	BPatch_arithExpr *new1divide0expr1 = new BPatch_arithExpr(BPatch_divide, *new1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times0expr1 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus0expr1 = new BPatch_arithExpr(BPatch_minus, *new1ref0expr, *new1times0expr1);
	BPatch_arithExpr *new1divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localtmptagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1times1expr1 = new BPatch_arithExpr(BPatch_times, *new1divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localtmptagexpr, *new1times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *new1plusexpr1 = new BPatch_arithExpr(BPatch_plus, *new1minus0expr1, *new1minus1expr1);
	BPatch_arithExpr *new1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *new1plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1timesexpr1 = new BPatch_arithExpr(BPatch_times, *new1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *new1plusexpr1, *new1timesexpr1);
	BPatch_arithExpr *new1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *new1divideexpr1, *new1minusexpr1);

	// get new tag
	BPatch_arithExpr *new1timesexpr2 = new BPatch_arithExpr(BPatch_times, *new1divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *new1plusexpr2 = new BPatch_arithExpr(BPatch_plus, *new1timesexpr2, *new1plusexpr1a);
	BPatch_arithExpr *new1assignexpr = new BPatch_arithExpr(BPatch_assign, *new1ref0expr, *new1plusexpr2);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr2a);
	snippets.push_back(new1assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(eae);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(deref1expr);
	printfArgs.push_back(newref1expr);
	printfArgs.push_back(localeffectiveaddressexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(assigntmpexpr);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr2a);
	snippets.push_back(new1assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opl_movs(BPatch_point *inspoint)
{
	BPatch_registerExpr *regesiexpr = csregvalue_to_grregexprptr(X86_REG_ESI);
	BPatch_registerExpr *regediexpr = csregvalue_to_grregexprptr(X86_REG_EDI);


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_plus, *regediexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_plus, *regesiexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;



	// if op0 remainder is 0, 4
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *op0divideexpr0a = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0a);
	BPatch_arithExpr *op0assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0ref0expr);
	BPatch_boolExpr *op0bexpr0a = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *op0ifexpr0a = new BPatch_ifExpr(*op0bexpr0a, *op0assignexpr0a, *op0assignexpr0b);


	// if op1 remainder is 0, 4
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *regesiexpr, *op1eaers3ls3expr);

	BPatch_arithExpr *op1divideexpr0a = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0a);
	BPatch_arithExpr *op1assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1ref0expr);
	BPatch_boolExpr *op1bexpr0a = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *op1ifexpr0a = new BPatch_ifExpr(*op1bexpr0a, *op1assignexpr0a, *op1assignexpr0b);


	// 4 bit tags
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *timesexpr1);
	BPatch_arithExpr *divideexpr1a = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_times, *minusexpr1, *timesexpr1a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1);

	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *op0divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr2a);
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *timesexpr2b, *minusexpr2);
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2a);
	BPatch_ifExpr *ifexpr2 = new BPatch_ifExpr(*op0bexpr0a, *assignexpr2, *assignexpr);







	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *assignexpr);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr2);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localop0tagexpr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr2);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opw_movs(BPatch_point *inspoint)
{
	BPatch_registerExpr *regesiexpr = csregvalue_to_grregexprptr(X86_REG_ESI);
	BPatch_registerExpr *regediexpr = csregvalue_to_grregexprptr(X86_REG_EDI);


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *regediexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_deref, *regesiexpr);
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;

	// if op0 remainder is 0, 2, 4, 6
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *op0divideexpr0b = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0divideexpr0c = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0divideexpr0d = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op0assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0ref0expr);
	BPatch_arithExpr *op0assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0b);
	BPatch_arithExpr *op0assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0c);
	BPatch_arithExpr *op0assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0d);
	BPatch_boolExpr *op0bexpr0a = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *op0bexpr0b = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *op0bexpr0c = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *op0bexpr0d = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *op0ifexpr0d = new BPatch_ifExpr(*op0bexpr0d, *op0assignexpr0d);
	BPatch_ifExpr *op0ifexpr0c = new BPatch_ifExpr(*op0bexpr0c, *op0assignexpr0c, *op0ifexpr0d);
	BPatch_ifExpr *op0ifexpr0b = new BPatch_ifExpr(*op0bexpr0b, *op0assignexpr0b, *op0ifexpr0c);
	BPatch_ifExpr *op0ifexpr0a = new BPatch_ifExpr(*op0bexpr0a, *op0assignexpr0a, *op0ifexpr0b);


	// if op1 remainder is 0, 2, 4, 6
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *regesiexpr, *op1eaers3ls3expr);

	BPatch_arithExpr *op1divideexpr0b = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1divideexpr0c = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1divideexpr0d = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op1assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1ref0expr);
	BPatch_arithExpr *op1assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0b);
	BPatch_arithExpr *op1assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0c);
	BPatch_arithExpr *op1assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0d);
	BPatch_boolExpr *op1bexpr0a = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *op1bexpr0b = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *op1bexpr0c = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *op1bexpr0d = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *op1ifexpr0d = new BPatch_ifExpr(*op1bexpr0d, *op1assignexpr0d);
	BPatch_ifExpr *op1ifexpr0c = new BPatch_ifExpr(*op1bexpr0c, *op1assignexpr0c, *op1ifexpr0d);
	BPatch_ifExpr *op1ifexpr0b = new BPatch_ifExpr(*op1bexpr0b, *op1assignexpr0b, *op1ifexpr0c);
	BPatch_ifExpr *op1ifexpr0a = new BPatch_ifExpr(*op1bexpr0a, *op1assignexpr0a, *op1ifexpr0b);


	// get new tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1);


	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *op0divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1a);
	BPatch_arithExpr *timesexpr1b = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1b, *minusexpr1);
	BPatch_arithExpr *assignexpr1b = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);

	BPatch_arithExpr *timesexpr1c = new BPatch_arithExpr(BPatch_times, *op0divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1a = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1c);
	BPatch_arithExpr *timesexpr1d = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr1b = new BPatch_arithExpr(BPatch_plus, *timesexpr1d, *minusexpr1a);
	BPatch_arithExpr *assignexpr1c = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1b);

	BPatch_arithExpr *timesexpr1e = new BPatch_arithExpr(BPatch_times, *op0divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr1b = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1e);
	BPatch_arithExpr *timesexpr1f = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr1c = new BPatch_arithExpr(BPatch_plus, *timesexpr1f, *minusexpr1b);
	BPatch_arithExpr *assignexpr1d = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1c);

	BPatch_ifExpr *ifexpr1d = new BPatch_ifExpr(*op0bexpr0d, *assignexpr1d);
	BPatch_ifExpr *ifexpr1c = new BPatch_ifExpr(*op0bexpr0c, *assignexpr1c, *ifexpr1d);
	BPatch_ifExpr *ifexpr1b = new BPatch_ifExpr(*op0bexpr0b, *assignexpr1b, *ifexpr1c);
	BPatch_ifExpr *ifexpr1a = new BPatch_ifExpr(*op0bexpr0a, *assignexpr, *ifexpr1b);







	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *assignexpr);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localop0tagexpr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opb_movs(BPatch_point *inspoint)
{
	BPatch_registerExpr *regesiexpr = csregvalue_to_grregexprptr(X86_REG_ESI);
	BPatch_registerExpr *regediexpr = csregvalue_to_grregexprptr(X86_REG_EDI);


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *regediexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_deref, *regesiexpr);
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;


	// if op0 remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);
	BPatch_arithExpr *op0squareexpr = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op0remainderexpr);

	BPatch_arithExpr *op0divideexpr0 = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, *op0squareexpr);
	BPatch_arithExpr *op0timesexpr0 = new BPatch_arithExpr(BPatch_times, *op0divideexpr0, *op0squareexpr);
	BPatch_arithExpr *op0minusexpr0 = new BPatch_arithExpr(BPatch_times, *op0ref0expr, *op0timesexpr0);
	BPatch_arithExpr *op0assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0);


	// if op1 remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *regesiexpr, *op1eaers3ls3expr);
	BPatch_arithExpr *op1squareexpr = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op1remainderexpr);

	BPatch_arithExpr *op1divideexpr0 = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, *op1squareexpr);
	//BPatch_arithExpr *op1timesexpr0 = new BPatch_arithExpr(BPatch_times, *op1divideexpr0, *op1squareexpr);
	//BPatch_arithExpr *op1minusexpr0 = new BPatch_arithExpr(BPatch_times, *op1ref0expr, *op1timesexpr0);
	BPatch_arithExpr *op1assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0);





	// get new tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *plusexpr1, *op0squareexpr);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *op0minusexpr0);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);



	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *assignexpr);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0assignexpr0);
	snippets.push_back(op1assignexpr0);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localop0tagexpr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0assignexpr0);
	snippets.push_back(op1assignexpr0);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opl_movs_n(BPatch_point *inspoint)
{
	BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x88);



	BPatch_registerExpr *regesiexpr = csregvalue_to_grregexprptr(X86_REG_ESI);
	BPatch_registerExpr *regediexpr = csregvalue_to_grregexprptr(X86_REG_EDI);


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *regediexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_deref, *regesiexpr);
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));

	// if remainder is 0, 4
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesaccessedexpr, *remainderexpr);

	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);



	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);

	BPatch_arithExpr *op0divide1expr0 = new BPatch_arithExpr(BPatch_divide, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *op0tagaddrexpr0, *op0divide1expr0);

	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *op0tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;




	BPatch_arithExpr *op1divideexpr = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1timesexpr = new BPatch_arithExpr(BPatch_times, *op1divideexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1minusexpr = new BPatch_arithExpr(BPatch_minus, *op1ref0expr, *op1timesexpr);
	BPatch_arithExpr *op1timesexpra = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1plusexpra = new BPatch_arithExpr(BPatch_plus, *op1timesexpra, *op1minusexpr);

	BPatch_arithExpr *op0divideexpr = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x100));
	BPatch_arithExpr *op0timesexpr = new BPatch_arithExpr(BPatch_times, *op0divideexpr, BPatch_constExpr(0x100));

	BPatch_arithExpr *plusexpr = new BPatch_arithExpr(BPatch_plus, *op0timesexpr, *op1plusexpra);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr);




	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr1);

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr1);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *op1minusexpr);
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr00, *assignexpr2);


	// first few tags
	BPatch_arithExpr *deref0expr3 = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr0);
	BPatch_arithExpr *ref0expr3 = deref0expr3;
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x100));
	BPatch_arithExpr *divide0expr3a = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *divide0expr3a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr3a = new BPatch_arithExpr(BPatch_minus, *ref0expr3, *timesexpr3a);
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *minusexpr3a);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr3, *op1timesexpra);
	BPatch_arithExpr *assignexpr3 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr0, *plusexpr3a);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr3 = new BPatch_ifExpr(*bexpr0a, *assignexpr3);


	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr0);
	snippets0.push_back(whileexpr);
	snippets0.push_back(ifexpr);
	snippets0.push_back(ifexpr3);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *seq0);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	//std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	//BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(op0ref0expr);
	printfArgs.push_back(op1ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	snippets.push_back(ifexpr);
	snippets.push_back(ifexpr3);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opw_movs_n(BPatch_point *inspoint)
{
	BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x88);


	BPatch_registerExpr *regesiexpr = csregvalue_to_grregexprptr(X86_REG_ESI);
	BPatch_registerExpr *regediexpr = csregvalue_to_grregexprptr(X86_REG_EDI);


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *regediexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_deref, *regesiexpr);
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesaccessedexpr, *remainderexpr);

	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00a = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr00b = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr00c = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x6));


	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);


	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);

	BPatch_arithExpr *op0plusexpr0 = new BPatch_arithExpr(BPatch_divide, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_arithExpr *op0divide1expr0 = new BPatch_arithExpr(BPatch_divide, *op0plusexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *op0tagaddrexpr0, *op0divide1expr0);

	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *op0tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;

	BPatch_arithExpr *op1divideexpr = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1timesexpr = new BPatch_arithExpr(BPatch_times, *op1divideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1minusexpr = new BPatch_arithExpr(BPatch_minus, *op1ref0expr, *op1timesexpr);

	BPatch_arithExpr *op1timesexpr1a = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1timesexpr1b = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1timesexpr1c = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x40));

	BPatch_arithExpr *op1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *op1minusexpr, *op1timesexpr1a);
	BPatch_arithExpr *op1plusexpr1b = new BPatch_arithExpr(BPatch_plus, *op1timesexpr1b, *op1timesexpr1c);
	BPatch_arithExpr *op1plusexpr1c = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1a, *op1plusexpr1b);
	BPatch_arithExpr *op1plusexpr1d = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1a, *op1timesexpr1b);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *op1plusexpr1c);

	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr1);

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr1);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	// remainder = 2
	BPatch_arithExpr *divide0expr2a = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *divide0expr2a, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *timesexpr2a, *op1minusexpr);
	BPatch_arithExpr *assignexpr2a = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2a);
	// remainder = 4
	BPatch_arithExpr *divide0expr2b = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *divide0expr2b, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *timesexpr2b, *op1timesexpr1a);
	BPatch_arithExpr *assignexpr2b = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2b);
	// remainder = 6
	BPatch_arithExpr *divide0expr2c = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *divide0expr2c, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *timesexpr2c, *op1plusexpr1d);
	BPatch_arithExpr *assignexpr2c = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2c);



	BPatch_ifExpr *ifexprc = new BPatch_ifExpr(*bexpr00c, *assignexpr2c);
	BPatch_ifExpr *ifexprb = new BPatch_ifExpr(*bexpr00b, *assignexpr2b, *ifexprc);
	BPatch_ifExpr *ifexpra = new BPatch_ifExpr(*bexpr00a, *assignexpr2a, *ifexprb);


	// first few tags
	BPatch_arithExpr *deref0expr3 = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr0);
	BPatch_arithExpr *ref0expr3 = deref0expr3;
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x100));


	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr3, *timesexpr4);
	BPatch_arithExpr *divideexpr4a = new BPatch_arithExpr(BPatch_divide, *plusexpr2c, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr4a, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4a, *minusexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *plusexpr4);
	BPatch_arithExpr *assignexpr4 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr0, *plusexpr4a);


	BPatch_arithExpr *divideexpr5 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr5 = new BPatch_arithExpr(BPatch_times, *divideexpr5, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr5 = new BPatch_arithExpr(BPatch_minus, *ref0expr3, *timesexpr5);
	BPatch_arithExpr *divideexpr5a = new BPatch_arithExpr(BPatch_divide, *plusexpr2c, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr5a = new BPatch_arithExpr(BPatch_times, *divideexpr5a, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr5 = new BPatch_arithExpr(BPatch_plus, *timesexpr5a, *minusexpr5);
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *plusexpr5);
	BPatch_arithExpr *assignexpr5 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr0, *plusexpr5a);


	BPatch_arithExpr *divideexpr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divideexpr6, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr6 = new BPatch_arithExpr(BPatch_minus, *ref0expr3, *timesexpr6);
	BPatch_arithExpr *divideexpr6a = new BPatch_arithExpr(BPatch_divide, *plusexpr2c, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr6a, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6a, *minusexpr6);
	BPatch_arithExpr *plusexpr6a = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *plusexpr6);
	BPatch_arithExpr *assignexpr6 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr0, *plusexpr6a);


	BPatch_boolExpr *bexpr7a = new BPatch_boolExpr(BPatch_ne, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr7b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr7c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr7d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *ifexpr7d = new BPatch_ifExpr(*bexpr7d, *assignexpr4);
	BPatch_ifExpr *ifexpr7c = new BPatch_ifExpr(*bexpr7c, *assignexpr5, *ifexpr7d);
	BPatch_ifExpr *ifexpr7b = new BPatch_ifExpr(*bexpr7b, *assignexpr6, *ifexpr7c);
	BPatch_ifExpr *ifexpr7a = new BPatch_ifExpr(*bexpr7a, *ifexpr7b);



	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr0);
	snippets0.push_back(whileexpr);
	snippets0.push_back(ifexpra);
	snippets0.push_back(ifexpr7a);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *seq0);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	//std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	//BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localop0valueexpr);
	printfArgs.push_back(localop1valueexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	snippets.push_back(ifexpra);
	snippets.push_back(ifexpr7a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opb_movs_n(BPatch_point *inspoint)
{
	BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x88);


	BPatch_registerExpr *regesiexpr = csregvalue_to_grregexprptr(X86_REG_ESI);
	BPatch_registerExpr *regediexpr = csregvalue_to_grregexprptr(X86_REG_EDI);


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *regediexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_deref, *regesiexpr);
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));

	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0minusexpr0 = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);
	BPatch_arithExpr *op0minusexpr0a = new BPatch_arithExpr(BPatch_minus, BPatch_constExpr(0x8), *op0minusexpr0);
	BPatch_arithExpr *op0dividesexpr0 = new BPatch_arithExpr(BPatch_divide, *op0minusexpr0a, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0timesexpr0 = new BPatch_arithExpr(BPatch_times, *op0dividesexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *op0minusexpr0a, *op0timesexpr0);

	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesaccessedexpr, *remainderexpr);


	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00a = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr00b = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr00c = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr00d = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr00e = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr00f = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr00g = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x7));

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);


	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);

	BPatch_arithExpr *op0plusexpr0 = new BPatch_arithExpr(BPatch_plus, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_arithExpr *op0divide1expr0 = new BPatch_arithExpr(BPatch_divide, *op0plusexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *op0tagaddrexpr0, *op0divide1expr0);


	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *op0tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;

	BPatch_arithExpr *op1divideexpr = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1timesexpr = new BPatch_arithExpr(BPatch_times, *op1divideexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1minusexpr = new BPatch_arithExpr(BPatch_minus, *op1ref0expr, *op1timesexpr);

	BPatch_arithExpr *op1timesexpr1a = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1timesexpr1b = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1timesexpr1c = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1timesexpr1d = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1timesexpr1e = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *op1timesexpr1f = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op1timesexpr1g = new BPatch_arithExpr(BPatch_times, *op1minusexpr, BPatch_constExpr(0x80));

	BPatch_arithExpr *op1plusexpr1a = new BPatch_arithExpr(BPatch_plus, *op1minusexpr, *op1timesexpr1a);
	BPatch_arithExpr *op1plusexpr1b = new BPatch_arithExpr(BPatch_plus, *op1timesexpr1b, *op1timesexpr1c);
	BPatch_arithExpr *op1plusexpr1c = new BPatch_arithExpr(BPatch_plus, *op1timesexpr1d, *op1timesexpr1e);
	BPatch_arithExpr *op1plusexpr1d = new BPatch_arithExpr(BPatch_plus, *op1timesexpr1f, *op1timesexpr1g);
	BPatch_arithExpr *op1plusexpr1e = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1a, *op1plusexpr1b);
	BPatch_arithExpr *op1plusexpr1f = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1c, *op1plusexpr1d);
	BPatch_arithExpr *op1plusexpr1g = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1e, *op1plusexpr1f);
	BPatch_arithExpr *op1plusexpr1h = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1a, *op1timesexpr1b);
	BPatch_arithExpr *op1plusexpr1i = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1h, *op1timesexpr1c);
	BPatch_arithExpr *op1plusexpr1j = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1i, *op1timesexpr1d);
	BPatch_arithExpr *op1plusexpr1k = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1j, *op1timesexpr1e);
	BPatch_arithExpr *op1plusexpr1l = new BPatch_arithExpr(BPatch_plus, *op1plusexpr1k, *op1timesexpr1f);


	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *op1plusexpr1g);

	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr1);

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr1);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	// remainder = 1
	BPatch_arithExpr *divide0expr2a = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *divide0expr2a, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *timesexpr2a, *op1minusexpr);
	BPatch_arithExpr *assignexpr2a = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2a);
	// remainder = 2
	BPatch_arithExpr *divide0expr2b = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *divide0expr2b, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *timesexpr2b, *op1timesexpr1a);
	BPatch_arithExpr *assignexpr2b = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2b);
	// remainder = 3
	BPatch_arithExpr *divide0expr2c = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *divide0expr2c, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *timesexpr2c, *op1plusexpr1h);
	BPatch_arithExpr *assignexpr2c = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2c);
	// remainder = 4
	BPatch_arithExpr *divide0expr2d = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2d = new BPatch_arithExpr(BPatch_times, *divide0expr2d, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr2d = new BPatch_arithExpr(BPatch_plus, *timesexpr2d, *op1plusexpr1i);
	BPatch_arithExpr *assignexpr2d = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2d);
	// remainder = 5
	BPatch_arithExpr *divide0expr2e = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *timesexpr2e = new BPatch_arithExpr(BPatch_times, *divide0expr2e, BPatch_constExpr(0x20));
	BPatch_arithExpr *plusexpr2e = new BPatch_arithExpr(BPatch_plus, *timesexpr2e, *op1plusexpr1j);
	BPatch_arithExpr *assignexpr2e = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2e);
	// remainder = 6
	BPatch_arithExpr *divide0expr2f = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr2f = new BPatch_arithExpr(BPatch_times, *divide0expr2f, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr2f = new BPatch_arithExpr(BPatch_plus, *timesexpr2f, *op1plusexpr1k);
	BPatch_arithExpr *assignexpr2f = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2f);
	// remainder = 7
	BPatch_arithExpr *divide0expr2g = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x80));
	BPatch_arithExpr *timesexpr2g = new BPatch_arithExpr(BPatch_times, *divide0expr2g, BPatch_constExpr(0x80));
	BPatch_arithExpr *plusexpr2g = new BPatch_arithExpr(BPatch_plus, *timesexpr2g, *op1plusexpr1l);
	BPatch_arithExpr *assignexpr2g = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr2g);

	BPatch_ifExpr *ifexprg = new BPatch_ifExpr(*bexpr00g, *assignexpr2g);
	BPatch_ifExpr *ifexprf = new BPatch_ifExpr(*bexpr00f, *assignexpr2f, *ifexprg);
	BPatch_ifExpr *ifexpre = new BPatch_ifExpr(*bexpr00e, *assignexpr2e, *ifexprf);
	BPatch_ifExpr *ifexprd = new BPatch_ifExpr(*bexpr00d, *assignexpr2d, *ifexpre);
	BPatch_ifExpr *ifexprc = new BPatch_ifExpr(*bexpr00c, *assignexpr2c, *ifexprd);
	BPatch_ifExpr *ifexprb = new BPatch_ifExpr(*bexpr00b, *assignexpr2b, *ifexprc);
	BPatch_ifExpr *ifexpra = new BPatch_ifExpr(*bexpr00a, *assignexpr2a, *ifexprb);



	// first few tags

	BPatch_arithExpr *deref0expr3 = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr0);
	BPatch_arithExpr *ref0expr3 = deref0expr3;
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x100));

	BPatch_arithExpr *squareexpr4 = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op0minusexpr0);

	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr3, *squareexpr4);
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, *squareexpr4);
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *ref0expr3, *timesexpr4);
	BPatch_arithExpr *divideexpr4a = new BPatch_arithExpr(BPatch_divide, *plusexpr2g, *squareexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr4a, *squareexpr4);
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4a, *minusexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr3, *plusexpr4);
	BPatch_arithExpr *assignexpr4 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr0, *plusexpr4a);

	BPatch_boolExpr *bexpr5 = new BPatch_boolExpr(BPatch_ne, *op0minusexpr0, BPatch_constExpr(0x0));
	BPatch_ifExpr *ifexpr5 = new BPatch_ifExpr(*bexpr5, *assignexpr4);




	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr0);
	snippets0.push_back(whileexpr);
	snippets0.push_back(ifexpra);
	snippets0.push_back(ifexpr5);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *seq0);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	//std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	//BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localop0valueexpr);
	printfArgs.push_back(localop1valueexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets0.push_back(assignexpr0);
	snippets0.push_back(whileexpr);
	snippets0.push_back(ifexpra);
	snippets0.push_back(ifexpr5);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opl_pop(x86_reg op0base, x86_reg op0index, unsigned int op0scale, unsigned int op0disp, BPatch_point *inspoint)
{
	BPatch_registerExpr *op0baseexpr, *op0indexexpr, *espexpr;
	BPatch_arithExpr *op0basevalueexpr, *op0indexvalueexpr, *op0addrexpr, *op1addrexpr, *tmpexpr1, *tmpexpr2;

	if(op0base != X86_REG_INVALID and csregvalue_to_grregexprptr(op0base) != NULL)
	{
		op0baseexpr = csregvalue_to_grregexprptr(op0base);
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, *op0baseexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}
	if(op0index != X86_REG_INVALID and csregvalue_to_grregexprptr(op0index) != NULL)
	{
		op0indexexpr = csregvalue_to_grregexprptr(op0index);
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, *op0indexexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}

	tmpexpr1 = new BPatch_arithExpr(BPatch_times, *op0indexvalueexpr, BPatch_constExpr(op0scale));
	tmpexpr2 = new BPatch_arithExpr(BPatch_plus, *tmpexpr1, *op0basevalueexpr);
	op0addrexpr = new BPatch_arithExpr(BPatch_plus, *tmpexpr2, BPatch_constExpr(op0disp));

	//BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *op0addrexpr);
	//BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	//BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	//BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *op0addrexpr, BPatch_constExpr(section_addr_min));
	//BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *op0addrexpr, BPatch_constExpr(section_addr_max));
	//BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	//BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *op0addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	op1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *op1addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;


	// if op0 remainder is 0, 4
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *op0addrexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *op0divideexpr0a = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0a);
	BPatch_arithExpr *op0assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0ref0expr);
	BPatch_boolExpr *op0bexpr0a = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *op0ifexpr0a = new BPatch_ifExpr(*op0bexpr0a, *op0assignexpr0a, *op0assignexpr0b);


	// if op1 remainder is 0, 4
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *op1addrexpr, *op1eaers3ls3expr);

	BPatch_arithExpr *op1divideexpr0a = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0a);
	BPatch_arithExpr *op1assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1ref0expr);
	BPatch_boolExpr *op1bexpr0a = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *op1ifexpr0a = new BPatch_ifExpr(*op1bexpr0a, *op1assignexpr0a, *op1assignexpr0b);


	// compute 4 bits tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1);


	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *op0divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1a);
	BPatch_arithExpr *timesexpr1b = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1b, *minusexpr1);
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);
	BPatch_ifExpr *ifexpr1 = new BPatch_ifExpr(*op0bexpr0a, *assignexpr1, *assignexpr);




	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *op1tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(op0ref0expr);
	printfArgs.push_back(op1ref0expr);
	printfArgs.push_back(op0addrexpr);
	printfArgs.push_back(op1addrexpr);
	printfArgs.push_back(op1minusexpr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0a);
	snippets.push_back(assignexpr0b);
	snippets.push_back(&printfCall);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opw_pop(x86_reg op0base, x86_reg op0index, unsigned int op0scale, unsigned int op0disp, BPatch_point *inspoint)
{
	BPatch_registerExpr *op0baseexpr, *op0indexexpr, *espexpr;
	BPatch_arithExpr *op0basevalueexpr, *op0indexvalueexpr, *op0addrexpr, *op1addrexpr, *tmpexpr1, *tmpexpr2;

	if(op0base != X86_REG_INVALID and csregvalue_to_grregexprptr(op0base) != NULL)
	{
		op0baseexpr = csregvalue_to_grregexprptr(op0base);
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, *op0baseexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}
	if(op0index != X86_REG_INVALID and csregvalue_to_grregexprptr(op0index) != NULL)
	{
		op0indexexpr = csregvalue_to_grregexprptr(op0index);
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, *op0indexexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}

	tmpexpr1 = new BPatch_arithExpr(BPatch_times, *op0indexvalueexpr, BPatch_constExpr(op0scale));
	tmpexpr2 = new BPatch_arithExpr(BPatch_plus, *tmpexpr1, *op0basevalueexpr);
	op0addrexpr = new BPatch_arithExpr(BPatch_plus, *tmpexpr2, BPatch_constExpr(op0disp));
	//op0addrexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x9164906), BPatch_constExpr(0x0));

	//BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *op0addrexpr);
	//BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	//BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	//BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *op0addrexpr, BPatch_constExpr(section_addr_min));
	//BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *op0addrexpr, BPatch_constExpr(section_addr_max));
	//BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	//BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *op0addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	op1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//op1addrexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x9164804), BPatch_constExpr(0x0));

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *op1addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;




	// if op0 remainder is 0, 2, 4, 6
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *op0addrexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *op0divideexpr0b = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0divideexpr0c = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0divideexpr0d = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op0assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0ref0expr);
	BPatch_arithExpr *op0assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0b);
	BPatch_arithExpr *op0assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0c);
	BPatch_arithExpr *op0assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0d);
	BPatch_boolExpr *op0bexpr0a = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *op0bexpr0b = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *op0bexpr0c = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *op0bexpr0d = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *op0ifexpr0d = new BPatch_ifExpr(*op0bexpr0d, *op0assignexpr0d);
	BPatch_ifExpr *op0ifexpr0c = new BPatch_ifExpr(*op0bexpr0c, *op0assignexpr0c, *op0ifexpr0d);
	BPatch_ifExpr *op0ifexpr0b = new BPatch_ifExpr(*op0bexpr0b, *op0assignexpr0b, *op0ifexpr0c);
	BPatch_ifExpr *op0ifexpr0a = new BPatch_ifExpr(*op0bexpr0a, *op0assignexpr0a, *op0ifexpr0b);


	// if op1 remainder is 0, 2, 4, 6
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *op1addrexpr, *op1eaers3ls3expr);

	BPatch_arithExpr *op1divideexpr0b = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1divideexpr0c = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1divideexpr0d = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op1assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1ref0expr);
	BPatch_arithExpr *op1assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0b);
	BPatch_arithExpr *op1assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0c);
	BPatch_arithExpr *op1assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0d);
	BPatch_boolExpr *op1bexpr0a = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *op1bexpr0b = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *op1bexpr0c = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *op1bexpr0d = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *op1ifexpr0d = new BPatch_ifExpr(*op1bexpr0d, *op1assignexpr0d);
	BPatch_ifExpr *op1ifexpr0c = new BPatch_ifExpr(*op1bexpr0c, *op1assignexpr0c, *op1ifexpr0d);
	BPatch_ifExpr *op1ifexpr0b = new BPatch_ifExpr(*op1bexpr0b, *op1assignexpr0b, *op1ifexpr0c);
	BPatch_ifExpr *op1ifexpr0a = new BPatch_ifExpr(*op1bexpr0a, *op1assignexpr0a, *op1ifexpr0b);


	// compute 2 bits tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1);


	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *op0divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1a);
	BPatch_arithExpr *timesexpr1b = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1b, *minusexpr1);
	BPatch_arithExpr *assignexpr1b = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);

	BPatch_arithExpr *timesexpr1c = new BPatch_arithExpr(BPatch_times, *op0divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1a = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1c);
	BPatch_arithExpr *timesexpr1d = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr1b = new BPatch_arithExpr(BPatch_plus, *timesexpr1d, *minusexpr1a);
	BPatch_arithExpr *assignexpr1c = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1b);

	BPatch_arithExpr *timesexpr1e = new BPatch_arithExpr(BPatch_times, *op0divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr1b = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1e);
	BPatch_arithExpr *timesexpr1f = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr1c = new BPatch_arithExpr(BPatch_plus, *timesexpr1f, *minusexpr1b);
	BPatch_arithExpr *assignexpr1d = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1c);

	BPatch_ifExpr *ifexpr1d = new BPatch_ifExpr(*op0bexpr0d, *assignexpr1d);
	BPatch_ifExpr *ifexpr1c = new BPatch_ifExpr(*op0bexpr0c, *assignexpr1c, *ifexpr1d);
	BPatch_ifExpr *ifexpr1b = new BPatch_ifExpr(*op0bexpr0b, *assignexpr1b, *ifexpr1c);
	BPatch_ifExpr *ifexpr1a = new BPatch_ifExpr(*op0bexpr0a, *assignexpr, *ifexpr1b);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *op1tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(op0ref0expr);
	printfArgs.push_back(op1ref0expr);
	printfArgs.push_back(op0addrexpr);
	printfArgs.push_back(op1addrexpr);
	printfArgs.push_back(op1minusexpr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0a);
	snippets.push_back(assignexpr0b);
	snippets.push_back(&printfCall);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opl_push(x86_reg op0base, x86_reg op0index, unsigned int op0scale, unsigned int op0disp, BPatch_point *inspoint)
{
	BPatch_registerExpr *op0baseexpr, *op0indexexpr, *espexpr;
	BPatch_arithExpr *op0basevalueexpr, *op0indexvalueexpr, *op0addrexpr, *op1addrexpr, *tmpexpr1, *tmpexpr2;

	if(op0base != X86_REG_INVALID and csregvalue_to_grregexprptr(op0base) != NULL)
	{
		op0baseexpr = csregvalue_to_grregexprptr(op0base);
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, *op0baseexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}
	if(op0index != X86_REG_INVALID and csregvalue_to_grregexprptr(op0index) != NULL)
	{
		op0indexexpr = csregvalue_to_grregexprptr(op0index);
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, *op0indexexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}

	tmpexpr1 = new BPatch_arithExpr(BPatch_times, *op0indexvalueexpr, BPatch_constExpr(op0scale));
	tmpexpr2 = new BPatch_arithExpr(BPatch_plus, *tmpexpr1, *op0basevalueexpr);
	op1addrexpr = new BPatch_arithExpr(BPatch_plus, *tmpexpr2, BPatch_constExpr(op0disp));

	espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	op0addrexpr = new BPatch_arithExpr(BPatch_minus, *espexpr, BPatch_constExpr(0x4));


	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *op0addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *op1addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;


	// if op0 remainder is 0, 4
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *op0addrexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *op0divideexpr0a = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0a);
	BPatch_arithExpr *op0assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0ref0expr);
	BPatch_boolExpr *op0bexpr0a = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *op0ifexpr0a = new BPatch_ifExpr(*op0bexpr0a, *op0assignexpr0a, *op0assignexpr0b);


	// if op1 remainder is 0, 4
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *op1addrexpr, *op1eaers3ls3expr);

	BPatch_arithExpr *op1divideexpr0a = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0a);
	BPatch_arithExpr *op1assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1ref0expr);
	BPatch_boolExpr *op1bexpr0a = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *op1ifexpr0a = new BPatch_ifExpr(*op1bexpr0a, *op1assignexpr0a, *op1assignexpr0b);



	// compute 4 bits tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1);

	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *op0divideexpr0a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1a);
	BPatch_arithExpr *timesexpr1b = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1b, *minusexpr1);
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);
	BPatch_ifExpr *ifexpr1 = new BPatch_ifExpr(*op0bexpr0a, *assignexpr1, *assignexpr);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *espvalueexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *op1tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(op0ref0expr);
	printfArgs.push_back(op1ref0expr);
	printfArgs.push_back(op0addrexpr);
	printfArgs.push_back(op1addrexpr);
	printfArgs.push_back(espvalueexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0a);
	snippets.push_back(assignexpr0b);
	snippets.push_back(&printfCall);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2m_xfer_opw_push(x86_reg op0base, x86_reg op0index, unsigned int op0scale, unsigned int op0disp, BPatch_point *inspoint)
{
	BPatch_registerExpr *op0baseexpr, *op0indexexpr, *espexpr;
	BPatch_arithExpr *op0basevalueexpr, *op0indexvalueexpr, *op0addrexpr, *op1addrexpr, *tmpexpr1, *tmpexpr2;

	if(op0base != X86_REG_INVALID and csregvalue_to_grregexprptr(op0base) != NULL)
	{
		op0baseexpr = csregvalue_to_grregexprptr(op0base);
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, *op0baseexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0basevalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}
	if(op0index != X86_REG_INVALID and csregvalue_to_grregexprptr(op0index) != NULL)
	{
		op0indexexpr = csregvalue_to_grregexprptr(op0index);
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, *op0indexexpr, BPatch_constExpr(0x0));
	}
	else
	{
		op0indexvalueexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
	}

	tmpexpr1 = new BPatch_arithExpr(BPatch_times, *op0indexvalueexpr, BPatch_constExpr(op0scale));
	tmpexpr2 = new BPatch_arithExpr(BPatch_plus, *tmpexpr1, *op0basevalueexpr);
	op1addrexpr = new BPatch_arithExpr(BPatch_plus, *tmpexpr2, BPatch_constExpr(op0disp));
	//op0addrexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x9164906), BPatch_constExpr(0x0));

	espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	op0addrexpr = new BPatch_arithExpr(BPatch_minus, *espexpr, BPatch_constExpr(0x4));
	//op1addrexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x9164804), BPatch_constExpr(0x0));


	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *op0addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *op1addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;



	// if op0 remainder is 0, 2, 4, 6
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *op0addrexpr, *op0eaers3ls3expr);

	BPatch_arithExpr *op0divideexpr0b = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0divideexpr0c = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op0divideexpr0d = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op0assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0ref0expr);
	BPatch_arithExpr *op0assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0b);
	BPatch_arithExpr *op0assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0c);
	BPatch_arithExpr *op0assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0d);
	BPatch_boolExpr *op0bexpr0a = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *op0bexpr0b = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *op0bexpr0c = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *op0bexpr0d = new BPatch_boolExpr(BPatch_eq, *op0remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *op0ifexpr0d = new BPatch_ifExpr(*op0bexpr0d, *op0assignexpr0d);
	BPatch_ifExpr *op0ifexpr0c = new BPatch_ifExpr(*op0bexpr0c, *op0assignexpr0c, *op0ifexpr0d);
	BPatch_ifExpr *op0ifexpr0b = new BPatch_ifExpr(*op0bexpr0b, *op0assignexpr0b, *op0ifexpr0c);
	BPatch_ifExpr *op0ifexpr0a = new BPatch_ifExpr(*op0bexpr0a, *op0assignexpr0a, *op0ifexpr0b);


	// if op1 remainder is 0, 2, 4, 6
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *op1addrexpr, *op1eaers3ls3expr);

	BPatch_arithExpr *op1divideexpr0b = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1divideexpr0c = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *op1divideexpr0d = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *op1assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1ref0expr);
	BPatch_arithExpr *op1assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0b);
	BPatch_arithExpr *op1assignexpr0c = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0c);
	BPatch_arithExpr *op1assignexpr0d = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0d);
	BPatch_boolExpr *op1bexpr0a = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *op1bexpr0b = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *op1bexpr0c = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *op1bexpr0d = new BPatch_boolExpr(BPatch_eq, *op1remainderexpr, BPatch_constExpr(0x6));
	BPatch_ifExpr *op1ifexpr0d = new BPatch_ifExpr(*op1bexpr0d, *op1assignexpr0d);
	BPatch_ifExpr *op1ifexpr0c = new BPatch_ifExpr(*op1bexpr0c, *op1assignexpr0c, *op1ifexpr0d);
	BPatch_ifExpr *op1ifexpr0b = new BPatch_ifExpr(*op1bexpr0b, *op1assignexpr0b, *op1ifexpr0c);
	BPatch_ifExpr *op1ifexpr0a = new BPatch_ifExpr(*op1bexpr0a, *op1assignexpr0a, *op1ifexpr0b);



	// compute 4 bits tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1);

	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *op0divideexpr0b, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1a);
	BPatch_arithExpr *timesexpr1b = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1b, *minusexpr1);
	BPatch_arithExpr *assignexpr1b = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);

	BPatch_arithExpr *timesexpr1c = new BPatch_arithExpr(BPatch_times, *op0divideexpr0c, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1a = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1c);
	BPatch_arithExpr *timesexpr1d = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr1b = new BPatch_arithExpr(BPatch_plus, *timesexpr1d, *minusexpr1a);
	BPatch_arithExpr *assignexpr1c = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1b);

	BPatch_arithExpr *timesexpr1e = new BPatch_arithExpr(BPatch_times, *op0divideexpr0d, BPatch_constExpr(0x40));
	BPatch_arithExpr *minusexpr1b = new BPatch_arithExpr(BPatch_minus, *op0ref0expr, *timesexpr1e);
	BPatch_arithExpr *timesexpr1f = new BPatch_arithExpr(BPatch_times, *plusexpr1, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr1c = new BPatch_arithExpr(BPatch_plus, *timesexpr1f, *minusexpr1b);
	BPatch_arithExpr *assignexpr1d = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1c);

	BPatch_ifExpr *ifexpr1d = new BPatch_ifExpr(*op0bexpr0d, *assignexpr1d);
	BPatch_ifExpr *ifexpr1c = new BPatch_ifExpr(*op0bexpr0c, *assignexpr1c, *ifexpr1d);
	BPatch_ifExpr *ifexpr1b = new BPatch_ifExpr(*op0bexpr0b, *assignexpr1b, *ifexpr1c);
	BPatch_ifExpr *ifexpr1a = new BPatch_ifExpr(*op0bexpr0a, *assignexpr, *ifexpr1b);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1a);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *espvalueexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *op1tagaddrexpr, BPatch_constExpr(0xfeff0123));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(op0ref0expr);
	printfArgs.push_back(op1ref0expr);
	printfArgs.push_back(op0addrexpr);
	printfArgs.push_back(op1addrexpr);
	printfArgs.push_back(espvalueexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0a);
	snippets.push_back(assignexpr0b);
	snippets.push_back(&printfCall);
	snippets.push_back(op0ifexpr0a);
	snippets.push_back(op1ifexpr0a);
	snippets.push_back(ifexpr1a);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_pop_opl(x86_reg reg0value0, BPatch_arithExpr *espvalueexpr0, BPatch_point *inspoint)
{
	BPatch_arithExpr *espvalueexpr = espvalueexpr0;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);

	x86_reg reg0value = reg0value0;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	BPatch_arithExpr *ref1expr = deref1expr;



	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *espvalueexpr, *eaers3ls3expr);

	BPatch_arithExpr *divideexpr0a = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *divideexpr0a);
	BPatch_arithExpr *assignexpr0b = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *ref1expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_ifExpr *ifexpr0a = new BPatch_ifExpr(*bexpr0a, *assignexpr0a, *assignexpr0b);


	// get bit 0 tag
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *times1expr1);

	// get bit 1 tag
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *minus1expr2, BPatch_constExpr(0x2));

	// get bit 2 tag
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *minus1expr3, BPatch_constExpr(0x4));

	// get bit 3 tag
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *minus1expr4, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *minus1expr1, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr6);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localeffectiveaddressexpr);
	//printfArgs.push_back(insnaddrexpr);
	//printfArgs.push_back(ebpexpr);
	printfArgs.push_back(eaers32expr);
	printfArgs.push_back(eaers32ls29expr);
	printfArgs.push_back(bitmapvaraddrexpr);
	printfArgs.push_back(eaers3expr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(espvalueexpr);
	printfArgs.push_back(remainderexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr0a);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/


}

BPatch_arithExpr* get_tag_from_addr(BPatch_arithExpr * addrexpr0)
{
	BPatch_arithExpr *addrexpr = addrexpr0;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref1expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref1expr = deref1expr;

	return ref1expr;
}

BPatch_arithExpr* get_tag_addr_from_addr(BPatch_arithExpr * addrexpr0)
{
	BPatch_arithExpr *addrexpr = addrexpr0;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);

	return tagaddrexpr;
}

BPatch_arithExpr* get_tag_from_reg(x86_reg reg0value0)
{
	x86_reg reg0value = reg0value0;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);

	return ref0expr;
}

void m2r_restore_opl_1(BPatch_point *inspoint)
{
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	BPatch_arithExpr *espvalueexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *espvalueexpr4 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *espvalueexpr8 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *espvalueexpr10 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *espvalueexpr14 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x14));
	BPatch_arithExpr *espvalueexpr18 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x18));
	BPatch_arithExpr *espvalueexpr1c = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x1c));



	m2r_pop_opl(X86_REG_EDI, espvalueexpr, inspoint);
	m2r_pop_opl(X86_REG_ESI, espvalueexpr4, inspoint);
	m2r_pop_opl(X86_REG_EBP, espvalueexpr8, inspoint);
	m2r_pop_opl(X86_REG_EBX, espvalueexpr10, inspoint);
	m2r_pop_opl(X86_REG_EDX, espvalueexpr14, inspoint);
	m2r_pop_opl(X86_REG_ECX, espvalueexpr18, inspoint);
	m2r_pop_opl(X86_REG_EAX, espvalueexpr1c, inspoint);




	/*
	BPatch_arithExpr *espvalueexpr20 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr), BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr20 = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr20), BPatch_constExpr(0xfeff0123));

	std::vector<BPatch_snippet*> printfArgs0;
	BPatch_snippet* fmt0 = new BPatch_constExpr("%lx...... %lx %lx...... %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs0.push_back(fmt0);
	printfArgs0.push_back(espvalueexpr);
	printfArgs0.push_back(get_tag_from_addr(espvalueexpr));
	printfArgs0.push_back(get_tag_from_addr(espvalueexpr20));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_EDI));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs0.push_back(get_tag_from_reg(X86_REG_EAX));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs0;
	appImage->findFunction("debug_printf", printfFuncs0);
	if (printfFuncs0.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall0(*(printfFuncs0[0]), printfArgs0);

	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr);
	snippets0.push_back(assignexpr20);
	snippets0.push_back(&printfCall0);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq0, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	m2r_pop_opl(X86_REG_EDI, espvalueexpr, inspoint);
	m2r_pop_opl(X86_REG_ESI, espvalueexpr4, inspoint);
	m2r_pop_opl(X86_REG_EBP, espvalueexpr8, inspoint);
	m2r_pop_opl(X86_REG_EBX, espvalueexpr10, inspoint);
	m2r_pop_opl(X86_REG_EDX, espvalueexpr14, inspoint);
	m2r_pop_opl(X86_REG_ECX, espvalueexpr18, inspoint);
	m2r_pop_opl(X86_REG_EAX, espvalueexpr1c, inspoint);


	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx...... %lx %lx...... %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(espvalueexpr);
	printfArgs.push_back(get_tag_from_addr(espvalueexpr));
	printfArgs.push_back(get_tag_from_addr(espvalueexpr20));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDI));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EAX));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_restore_opl(BPatch_point *inspoint)
{
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	BPatch_arithExpr *espvalueexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *espvalueexpr20 = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x20));

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;


	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *neweaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr20, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *neweaers32expr = new BPatch_arithExpr(BPatch_divide, *neweaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *neweaers32ls29expr = new BPatch_arithExpr(BPatch_times, *neweaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *newtagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *neweaers3expr);
	BPatch_arithExpr *newtagaddrexpr = new BPatch_arithExpr(BPatch_minus, *newtagaddrrawexpr, *neweaers32ls29expr);
	BPatch_arithExpr *newderef0expr = new BPatch_arithExpr(BPatch_deref, *newtagaddrexpr);
	BPatch_arithExpr *newref0expr = newderef0expr;


	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *espvalueexpr, *eaers3ls3expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));

	BPatch_arithExpr *divideexpr1a =  new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1a =  new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1a =  new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1a);

	BPatch_arithExpr *divideexpr2a =  new BPatch_arithExpr(BPatch_divide, *divideexpr1a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2a =  new BPatch_arithExpr(BPatch_times, *divideexpr2a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr2a =  new BPatch_arithExpr(BPatch_minus, *divideexpr1a, *timesexpr2a);

	BPatch_arithExpr *divideexpr3a =  new BPatch_arithExpr(BPatch_divide, *divideexpr2a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr3a =  new BPatch_arithExpr(BPatch_times, *divideexpr3a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr3a =  new BPatch_arithExpr(BPatch_minus, *divideexpr2a, *timesexpr3a);

	BPatch_arithExpr *divideexpr4a =  new BPatch_arithExpr(BPatch_divide, *divideexpr3a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr4a =  new BPatch_arithExpr(BPatch_times, *divideexpr4a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr4a =  new BPatch_arithExpr(BPatch_minus, *divideexpr3a, *timesexpr4a);

	BPatch_arithExpr *divideexpr5a =  new BPatch_arithExpr(BPatch_divide, *divideexpr4a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr5a =  new BPatch_arithExpr(BPatch_times, *divideexpr5a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr5a =  new BPatch_arithExpr(BPatch_minus, *divideexpr4a, *timesexpr5a);

	BPatch_arithExpr *divideexpr6a =  new BPatch_arithExpr(BPatch_divide, *divideexpr5a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr6a =  new BPatch_arithExpr(BPatch_times, *divideexpr6a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr6a =  new BPatch_arithExpr(BPatch_minus, *divideexpr5a, *timesexpr6a);

	BPatch_arithExpr *divideexpr7a =  new BPatch_arithExpr(BPatch_divide, *divideexpr6a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr7a =  new BPatch_arithExpr(BPatch_times, *divideexpr7a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr7a =  new BPatch_arithExpr(BPatch_minus, *divideexpr6a, *timesexpr7a);

	BPatch_arithExpr *divideexpr8a =  new BPatch_arithExpr(BPatch_divide, *divideexpr7a, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr8a =  new BPatch_arithExpr(BPatch_times, *divideexpr8a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr8a =  new BPatch_arithExpr(BPatch_minus, *divideexpr7a, *timesexpr8a);

	BPatch_arithExpr *divideexpr9a =  new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr9a =  new BPatch_arithExpr(BPatch_times, *divideexpr9a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr9a =  new BPatch_arithExpr(BPatch_minus, *newref0expr, *timesexpr9a);


	BPatch_arithExpr *editagexpr = get_tag_from_reg(X86_REG_EDI);
	BPatch_arithExpr *esitagexpr = get_tag_from_reg(X86_REG_ESI);
	BPatch_arithExpr *ebptagexpr = get_tag_from_reg(X86_REG_EBP);
	BPatch_arithExpr *ebxtagexpr = get_tag_from_reg(X86_REG_EBX);
	BPatch_arithExpr *edxtagexpr = get_tag_from_reg(X86_REG_EDX);
	BPatch_arithExpr *ecxtagexpr = get_tag_from_reg(X86_REG_ECX);
	BPatch_arithExpr *eaxtagexpr = get_tag_from_reg(X86_REG_EAX);


	BPatch_arithExpr *assignexpr10a = new BPatch_arithExpr(BPatch_assign, *editagexpr, *minusexpr1a);
	BPatch_arithExpr *assignexpr10b = new BPatch_arithExpr(BPatch_assign, *esitagexpr, *minusexpr2a);
	BPatch_arithExpr *assignexpr10c = new BPatch_arithExpr(BPatch_assign, *ebptagexpr, *minusexpr3a);
	BPatch_arithExpr *assignexpr10d = new BPatch_arithExpr(BPatch_assign, *ebxtagexpr, *minusexpr5a);
	BPatch_arithExpr *assignexpr10e = new BPatch_arithExpr(BPatch_assign, *edxtagexpr, *minusexpr6a);
	BPatch_arithExpr *assignexpr10f = new BPatch_arithExpr(BPatch_assign, *ecxtagexpr, *minusexpr7a);
	BPatch_arithExpr *assignexpr10g = new BPatch_arithExpr(BPatch_assign, *eaxtagexpr, *minusexpr8a);


	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr10a);
	snippets0.push_back(assignexpr10b);
	snippets0.push_back(assignexpr10c);
	snippets0.push_back(assignexpr10d);
	snippets0.push_back(assignexpr10e);
	snippets0.push_back(assignexpr10f);
	snippets0.push_back(assignexpr10g);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	BPatch_arithExpr *assignexpr11a = new BPatch_arithExpr(BPatch_assign, *editagexpr, *minusexpr2a);
	BPatch_arithExpr *assignexpr11b = new BPatch_arithExpr(BPatch_assign, *esitagexpr, *minusexpr3a);
	BPatch_arithExpr *assignexpr11c = new BPatch_arithExpr(BPatch_assign, *ebptagexpr, *minusexpr4a);
	BPatch_arithExpr *assignexpr11d = new BPatch_arithExpr(BPatch_assign, *ebxtagexpr, *minusexpr6a);
	BPatch_arithExpr *assignexpr11e = new BPatch_arithExpr(BPatch_assign, *edxtagexpr, *minusexpr7a);
	BPatch_arithExpr *assignexpr11f = new BPatch_arithExpr(BPatch_assign, *ecxtagexpr, *minusexpr8a);
	BPatch_arithExpr *assignexpr11g = new BPatch_arithExpr(BPatch_assign, *eaxtagexpr, *minusexpr9a);

	std::vector<BPatch_snippet*> snippets1;
	snippets1.push_back(assignexpr11a);
	snippets1.push_back(assignexpr11b);
	snippets1.push_back(assignexpr11c);
	snippets1.push_back(assignexpr11d);
	snippets1.push_back(assignexpr11e);
	snippets1.push_back(assignexpr11f);
	snippets1.push_back(assignexpr11g);
	BPatch_sequence *seq1 = new BPatch_sequence(snippets1);

	BPatch_ifExpr *ifexpr12b = new BPatch_ifExpr(*bexpr0a, *seq0, *seq1);


	if (!appBin->insertSnippet(*ifexpr12b, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr), BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr20), BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx...... %lx %lx...... %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(espvalueexpr);
	printfArgs.push_back(get_tag_from_addr(espvalueexpr));
	printfArgs.push_back(get_tag_from_addr(espvalueexpr20));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EAX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDI));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0);
	snippets.push_back(assignexpr0a);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr12b);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void m2r_restore_opw(BPatch_point *inspoint)
{
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	BPatch_arithExpr *espvalueexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//BPatch_constExpr *eae = new BPatch_constExpr(0xbffe9b22);
	//BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	//BPatch_arithExpr *espvalueexpr = new BPatch_arithExpr(BPatch_plus, *localeffectiveaddressexpr, BPatch_constExpr(0x0));

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *espvalueexpr, *eaers3ls3expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));


	BPatch_arithExpr *divideexpr1a =  new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1a =  new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr1a =  new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1a);

	BPatch_arithExpr *divideexpr2a =  new BPatch_arithExpr(BPatch_divide, *divideexpr1a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2a =  new BPatch_arithExpr(BPatch_times, *divideexpr2a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr2a =  new BPatch_arithExpr(BPatch_minus, *divideexpr1a, *timesexpr2a);

	BPatch_arithExpr *divideexpr3a =  new BPatch_arithExpr(BPatch_divide, *divideexpr2a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr3a =  new BPatch_arithExpr(BPatch_times, *divideexpr3a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr3a =  new BPatch_arithExpr(BPatch_minus, *divideexpr2a, *timesexpr3a);

	BPatch_arithExpr *divideexpr4a =  new BPatch_arithExpr(BPatch_divide, *divideexpr3a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4a =  new BPatch_arithExpr(BPatch_times, *divideexpr4a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr4a =  new BPatch_arithExpr(BPatch_minus, *divideexpr3a, *timesexpr4a);

	BPatch_arithExpr *divideexpr5a =  new BPatch_arithExpr(BPatch_divide, *divideexpr4a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr5a =  new BPatch_arithExpr(BPatch_times, *divideexpr5a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr5a =  new BPatch_arithExpr(BPatch_minus, *divideexpr4a, *timesexpr5a);

	BPatch_arithExpr *divideexpr6a =  new BPatch_arithExpr(BPatch_divide, *divideexpr5a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr6a =  new BPatch_arithExpr(BPatch_times, *divideexpr6a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr6a =  new BPatch_arithExpr(BPatch_minus, *divideexpr5a, *timesexpr6a);

	BPatch_arithExpr *divideexpr7a =  new BPatch_arithExpr(BPatch_divide, *divideexpr6a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr7a =  new BPatch_arithExpr(BPatch_times, *divideexpr7a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr7a =  new BPatch_arithExpr(BPatch_minus, *divideexpr6a, *timesexpr7a);

	BPatch_arithExpr *divideexpr8a =  new BPatch_arithExpr(BPatch_divide, *divideexpr7a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr8a =  new BPatch_arithExpr(BPatch_times, *divideexpr8a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr8a =  new BPatch_arithExpr(BPatch_minus, *divideexpr7a, *timesexpr8a);

	BPatch_arithExpr *divideexpr9a =  new BPatch_arithExpr(BPatch_divide, *divideexpr8a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr9a =  new BPatch_arithExpr(BPatch_times, *divideexpr9a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr9a =  new BPatch_arithExpr(BPatch_minus, *divideexpr8a, *timesexpr9a);

	BPatch_arithExpr *divideexpr10a =  new BPatch_arithExpr(BPatch_divide, *divideexpr9a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr10a =  new BPatch_arithExpr(BPatch_times, *divideexpr10a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr10a =  new BPatch_arithExpr(BPatch_minus, *divideexpr9a, *timesexpr10a);

	BPatch_arithExpr *divideexpr11a =  new BPatch_arithExpr(BPatch_divide, *divideexpr10a, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr11a =  new BPatch_arithExpr(BPatch_times, *divideexpr11a, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr11a =  new BPatch_arithExpr(BPatch_minus, *divideexpr10a, *timesexpr11a);

	BPatch_arithExpr *editagexpr = get_tag_from_reg(X86_REG_EDI);
	BPatch_arithExpr *editagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *editagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *editagtimesexpr =  new BPatch_arithExpr(BPatch_times, *editagdivideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *esitagexpr = get_tag_from_reg(X86_REG_ESI);
	BPatch_arithExpr *esitagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *esitagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *esitagtimesexpr =  new BPatch_arithExpr(BPatch_times, *esitagdivideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ebptagexpr = get_tag_from_reg(X86_REG_EBP);
	BPatch_arithExpr *ebptagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *ebptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ebptagtimesexpr =  new BPatch_arithExpr(BPatch_times, *ebptagdivideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ebxtagexpr = get_tag_from_reg(X86_REG_EBX);
	BPatch_arithExpr *ebxtagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *ebxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ebxtagtimesexpr =  new BPatch_arithExpr(BPatch_times, *ebxtagdivideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *edxtagexpr = get_tag_from_reg(X86_REG_EDX);
	BPatch_arithExpr *edxtagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *edxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *edxtagtimesexpr =  new BPatch_arithExpr(BPatch_times, *edxtagdivideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ecxtagexpr = get_tag_from_reg(X86_REG_ECX);
	BPatch_arithExpr *ecxtagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *ecxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ecxtagtimesexpr =  new BPatch_arithExpr(BPatch_times, *ecxtagdivideexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *eaxtagexpr = get_tag_from_reg(X86_REG_EAX);
	BPatch_arithExpr *eaxtagdivideexpr =  new BPatch_arithExpr(BPatch_divide, *eaxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *eaxtagtimesexpr =  new BPatch_arithExpr(BPatch_times, *eaxtagdivideexpr, BPatch_constExpr(0x4));


	BPatch_arithExpr *plusexpr12a =  new BPatch_arithExpr(BPatch_plus, *editagtimesexpr, *minusexpr1a);
	BPatch_arithExpr *assignexpr12a = new BPatch_arithExpr(BPatch_assign, *editagexpr, *plusexpr12a);
	BPatch_arithExpr *plusexpr12b =  new BPatch_arithExpr(BPatch_plus, *esitagtimesexpr, *minusexpr2a);
	BPatch_arithExpr *assignexpr12b = new BPatch_arithExpr(BPatch_assign, *esitagexpr, *plusexpr12b);
	BPatch_arithExpr *plusexpr12c =  new BPatch_arithExpr(BPatch_plus, *ebptagtimesexpr, *minusexpr3a);
	BPatch_arithExpr *assignexpr12c = new BPatch_arithExpr(BPatch_assign, *ebptagexpr, *plusexpr12c);
	BPatch_arithExpr *plusexpr12d =  new BPatch_arithExpr(BPatch_plus, *ebxtagtimesexpr, *minusexpr5a);
	BPatch_arithExpr *assignexpr12d = new BPatch_arithExpr(BPatch_assign, *ebxtagexpr, *plusexpr12d);
	BPatch_arithExpr *plusexpr12e =  new BPatch_arithExpr(BPatch_plus, *edxtagtimesexpr, *minusexpr6a);
	BPatch_arithExpr *assignexpr12e = new BPatch_arithExpr(BPatch_assign, *edxtagexpr, *plusexpr12e);
	BPatch_arithExpr *plusexpr12f =  new BPatch_arithExpr(BPatch_plus, *ecxtagtimesexpr, *minusexpr7a);
	BPatch_arithExpr *assignexpr12f = new BPatch_arithExpr(BPatch_assign, *ecxtagexpr, *plusexpr12f);
	BPatch_arithExpr *plusexpr12g =  new BPatch_arithExpr(BPatch_plus, *eaxtagtimesexpr, *minusexpr8a);
	BPatch_arithExpr *assignexpr12g = new BPatch_arithExpr(BPatch_assign, *eaxtagexpr, *plusexpr12g);

	std::vector<BPatch_snippet*> snippets0;
	snippets0.push_back(assignexpr12a);
	snippets0.push_back(assignexpr12b);
	snippets0.push_back(assignexpr12c);
	snippets0.push_back(assignexpr12d);
	snippets0.push_back(assignexpr12e);
	snippets0.push_back(assignexpr12f);
	snippets0.push_back(assignexpr12g);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	BPatch_arithExpr *plusexpr13a =  new BPatch_arithExpr(BPatch_plus, *editagtimesexpr, *minusexpr2a);
	BPatch_arithExpr *assignexpr13a = new BPatch_arithExpr(BPatch_assign, *editagexpr, *plusexpr13a);
	BPatch_arithExpr *plusexpr13b =  new BPatch_arithExpr(BPatch_plus, *esitagtimesexpr, *minusexpr3a);
	BPatch_arithExpr *assignexpr13b = new BPatch_arithExpr(BPatch_assign, *esitagexpr, *plusexpr13b);
	BPatch_arithExpr *plusexpr13c =  new BPatch_arithExpr(BPatch_plus, *ebptagtimesexpr, *minusexpr4a);
	BPatch_arithExpr *assignexpr13c = new BPatch_arithExpr(BPatch_assign, *ebptagexpr, *plusexpr13c);
	BPatch_arithExpr *plusexpr13d =  new BPatch_arithExpr(BPatch_plus, *ebxtagtimesexpr, *minusexpr6a);
	BPatch_arithExpr *assignexpr13d = new BPatch_arithExpr(BPatch_assign, *ebxtagexpr, *plusexpr13d);
	BPatch_arithExpr *plusexpr13e =  new BPatch_arithExpr(BPatch_plus, *edxtagtimesexpr, *minusexpr7a);
	BPatch_arithExpr *assignexpr13e = new BPatch_arithExpr(BPatch_assign, *edxtagexpr, *plusexpr13e);
	BPatch_arithExpr *plusexpr13f =  new BPatch_arithExpr(BPatch_plus, *ecxtagtimesexpr, *minusexpr8a);
	BPatch_arithExpr *assignexpr13f = new BPatch_arithExpr(BPatch_assign, *ecxtagexpr, *plusexpr13f);
	BPatch_arithExpr *plusexpr13g =  new BPatch_arithExpr(BPatch_plus, *eaxtagtimesexpr, *minusexpr9a);
	BPatch_arithExpr *assignexpr13g = new BPatch_arithExpr(BPatch_assign, *eaxtagexpr, *plusexpr13g);

	std::vector<BPatch_snippet*> snippets1;
	snippets1.push_back(assignexpr13a);
	snippets1.push_back(assignexpr13b);
	snippets1.push_back(assignexpr13c);
	snippets1.push_back(assignexpr13d);
	snippets1.push_back(assignexpr13e);
	snippets1.push_back(assignexpr13f);
	snippets1.push_back(assignexpr13g);
	BPatch_sequence *seq1 = new BPatch_sequence(snippets1);

	BPatch_arithExpr *plusexpr14a =  new BPatch_arithExpr(BPatch_plus, *editagtimesexpr, *minusexpr3a);
	BPatch_arithExpr *assignexpr14a = new BPatch_arithExpr(BPatch_assign, *editagexpr, *plusexpr14a);
	BPatch_arithExpr *plusexpr14b =  new BPatch_arithExpr(BPatch_plus, *esitagtimesexpr, *minusexpr4a);
	BPatch_arithExpr *assignexpr14b = new BPatch_arithExpr(BPatch_assign, *esitagexpr, *plusexpr14b);
	BPatch_arithExpr *plusexpr14c =  new BPatch_arithExpr(BPatch_plus, *ebptagtimesexpr, *minusexpr5a);
	BPatch_arithExpr *assignexpr14c = new BPatch_arithExpr(BPatch_assign, *ebptagexpr, *plusexpr14c);
	BPatch_arithExpr *plusexpr14d =  new BPatch_arithExpr(BPatch_plus, *ebxtagtimesexpr, *minusexpr7a);
	BPatch_arithExpr *assignexpr14d = new BPatch_arithExpr(BPatch_assign, *ebxtagexpr, *plusexpr14d);
	BPatch_arithExpr *plusexpr14e =  new BPatch_arithExpr(BPatch_plus, *edxtagtimesexpr, *minusexpr8a);
	BPatch_arithExpr *assignexpr14e = new BPatch_arithExpr(BPatch_assign, *edxtagexpr, *plusexpr14e);
	BPatch_arithExpr *plusexpr14f =  new BPatch_arithExpr(BPatch_plus, *ecxtagtimesexpr, *minusexpr9a);
	BPatch_arithExpr *assignexpr14f = new BPatch_arithExpr(BPatch_assign, *ecxtagexpr, *plusexpr14f);
	BPatch_arithExpr *plusexpr14g =  new BPatch_arithExpr(BPatch_plus, *eaxtagtimesexpr, *minusexpr10a);
	BPatch_arithExpr *assignexpr14g = new BPatch_arithExpr(BPatch_assign, *eaxtagexpr, *plusexpr14g);

	std::vector<BPatch_snippet*> snippets2;
	snippets2.push_back(assignexpr14a);
	snippets2.push_back(assignexpr14b);
	snippets2.push_back(assignexpr14c);
	snippets2.push_back(assignexpr14d);
	snippets2.push_back(assignexpr14e);
	snippets2.push_back(assignexpr14f);
	snippets2.push_back(assignexpr14g);
	BPatch_sequence *seq2 = new BPatch_sequence(snippets2);

	BPatch_arithExpr *plusexpr15a =  new BPatch_arithExpr(BPatch_plus, *editagtimesexpr, *minusexpr4a);
	BPatch_arithExpr *assignexpr15a = new BPatch_arithExpr(BPatch_assign, *editagexpr, *plusexpr15a);
	BPatch_arithExpr *plusexpr15b =  new BPatch_arithExpr(BPatch_plus, *esitagtimesexpr, *minusexpr5a);
	BPatch_arithExpr *assignexpr15b = new BPatch_arithExpr(BPatch_assign, *esitagexpr, *plusexpr15b);
	BPatch_arithExpr *plusexpr15c =  new BPatch_arithExpr(BPatch_plus, *ebptagtimesexpr, *minusexpr6a);
	BPatch_arithExpr *assignexpr15c = new BPatch_arithExpr(BPatch_assign, *ebptagexpr, *plusexpr15c);
	BPatch_arithExpr *plusexpr15d =  new BPatch_arithExpr(BPatch_plus, *ebxtagtimesexpr, *minusexpr8a);
	BPatch_arithExpr *assignexpr15d = new BPatch_arithExpr(BPatch_assign, *ebxtagexpr, *plusexpr15d);
	BPatch_arithExpr *plusexpr15e =  new BPatch_arithExpr(BPatch_plus, *edxtagtimesexpr, *minusexpr9a);
	BPatch_arithExpr *assignexpr15e = new BPatch_arithExpr(BPatch_assign, *edxtagexpr, *plusexpr15e);
	BPatch_arithExpr *plusexpr15f =  new BPatch_arithExpr(BPatch_plus, *ecxtagtimesexpr, *minusexpr10a);
	BPatch_arithExpr *assignexpr15f = new BPatch_arithExpr(BPatch_assign, *ecxtagexpr, *plusexpr15f);
	BPatch_arithExpr *plusexpr15g =  new BPatch_arithExpr(BPatch_plus, *eaxtagtimesexpr, *minusexpr11a);
	BPatch_arithExpr *assignexpr15g = new BPatch_arithExpr(BPatch_assign, *eaxtagexpr, *plusexpr15g);

	std::vector<BPatch_snippet*> snippets3;
	snippets3.push_back(assignexpr15a);
	snippets3.push_back(assignexpr15b);
	snippets3.push_back(assignexpr15c);
	snippets3.push_back(assignexpr15d);
	snippets3.push_back(assignexpr15e);
	snippets3.push_back(assignexpr15f);
	snippets3.push_back(assignexpr15g);
	BPatch_sequence *seq3 = new BPatch_sequence(snippets3);


	BPatch_ifExpr *ifexpr15d = new BPatch_ifExpr(*bexpr0d, *seq3);
	BPatch_ifExpr *ifexpr15c = new BPatch_ifExpr(*bexpr0c, *seq2, *ifexpr15d);
	BPatch_ifExpr *ifexpr15b = new BPatch_ifExpr(*bexpr0b, *seq1);
	BPatch_ifExpr *ifexpr15a = new BPatch_ifExpr(*bexpr0a, *seq0, *ifexpr15b);

	if (!appBin->insertSnippet(*ifexpr15c, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	if (!appBin->insertSnippet(*ifexpr15a, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr), BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx...... %lx...... %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(espvalueexpr);
	printfArgs.push_back(get_tag_from_addr(espvalueexpr));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EAX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDI));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr15c);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	std::vector<BPatch_snippet*> printfArgs1;
	BPatch_snippet* fmt1 = new BPatch_constExpr("%lx...... %lx...... %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs1.push_back(fmt1);
	printfArgs1.push_back(espvalueexpr);
	printfArgs1.push_back(get_tag_from_addr(espvalueexpr));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EAX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_ESP));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EDI));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs1;
	appImage->findFunction("debug_printf", printfFuncs1);
	if (printfFuncs1.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall1(*(printfFuncs1[0]), printfArgs1);

	std::vector<BPatch_snippet*> snippets1a;
	snippets1a.push_back(ifexpr15a);
	snippets1a.push_back(&printfCall1);
	BPatch_sequence *seq1a = new BPatch_sequence(snippets1a);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq1a, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_save_opl(BPatch_point *inspoint)
{
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	BPatch_arithExpr *espvalueexpr24 = new BPatch_arithExpr(BPatch_minus, *espexpr, BPatch_constExpr(0x24));
	BPatch_arithExpr *espvalueexpr44 = new BPatch_arithExpr(BPatch_minus, *espexpr, BPatch_constExpr(0x44));

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr24, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 4
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *espvalueexpr24, *eaers3ls3expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));

	BPatch_arithExpr *eaxtagexpr = get_tag_from_reg(X86_REG_EAX);
	BPatch_arithExpr *eaxtagtimesexpr = new BPatch_arithExpr(BPatch_times, *eaxtagexpr, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *ecxtagexpr = get_tag_from_reg(X86_REG_ECX);
	BPatch_arithExpr *ecxtagtimesexpr = new BPatch_arithExpr(BPatch_times, *ecxtagexpr, BPatch_constExpr(0x1000000));
	BPatch_arithExpr *edxtagexpr = get_tag_from_reg(X86_REG_EDX);
	BPatch_arithExpr *edxtagtimesexpr = new BPatch_arithExpr(BPatch_times, *edxtagexpr, BPatch_constExpr(0x100000));
	BPatch_arithExpr *ebxtagexpr = get_tag_from_reg(X86_REG_EBX);
	BPatch_arithExpr *ebxtagtimesexpr = new BPatch_arithExpr(BPatch_times, *ebxtagexpr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *esptagexpr = get_tag_from_reg(X86_REG_ESP);
	BPatch_arithExpr *esptagtimesexpr = new BPatch_arithExpr(BPatch_times, *esptagexpr, BPatch_constExpr(0x1000));
	BPatch_arithExpr *ebptagexpr = get_tag_from_reg(X86_REG_EBP);
	BPatch_arithExpr *ebptagtimesexpr = new BPatch_arithExpr(BPatch_times, *ebptagexpr, BPatch_constExpr(0x100));
	BPatch_arithExpr *esitagexpr = get_tag_from_reg(X86_REG_ESI);
	BPatch_arithExpr *esitagtimesexpr = new BPatch_arithExpr(BPatch_times, *esitagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *editagexpr = get_tag_from_reg(X86_REG_EDI);

	BPatch_arithExpr *plusexpr1a =  new BPatch_arithExpr(BPatch_plus, *eaxtagtimesexpr, *ecxtagtimesexpr);
	BPatch_arithExpr *plusexpr1b =  new BPatch_arithExpr(BPatch_plus, *edxtagtimesexpr, *ebxtagtimesexpr);
	BPatch_arithExpr *plusexpr1c =  new BPatch_arithExpr(BPatch_plus, *esptagtimesexpr, *ebptagtimesexpr);
	BPatch_arithExpr *plusexpr1d =  new BPatch_arithExpr(BPatch_plus, *esitagtimesexpr, *editagexpr);
	BPatch_arithExpr *plusexpr1e =  new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *plusexpr1b);
	BPatch_arithExpr *plusexpr1f =  new BPatch_arithExpr(BPatch_plus, *plusexpr1c, *plusexpr1d);
	BPatch_arithExpr *plusexpr1g =  new BPatch_arithExpr(BPatch_plus, *plusexpr1e, *plusexpr1f);

	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr1g);

	BPatch_arithExpr *divideexpr1 =  new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *divideexpr1a =  new BPatch_arithExpr(BPatch_divide, *divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1a =  new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 =  new BPatch_arithExpr(BPatch_minus, *divideexpr1, *timesexpr1a);
	BPatch_arithExpr *timesexpr1b =  new BPatch_arithExpr(BPatch_times, *minusexpr1, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *divideexpr1b =  new BPatch_arithExpr(BPatch_divide, *plusexpr1g, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1c =  new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *minusexpr1a =  new BPatch_arithExpr(BPatch_minus, *divideexpr1b, *timesexpr1c);
	BPatch_arithExpr *plusexpr1i =  new BPatch_arithExpr(BPatch_plus, *timesexpr1b, *minusexpr1a);

	BPatch_arithExpr *assignexpr1a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr1i);

	BPatch_ifExpr *ifexpr1a = new BPatch_ifExpr(*bexpr0a, *assignexpr1a, *assignexpr1);



	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *neweaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr44, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *neweaers32expr = new BPatch_arithExpr(BPatch_divide, *neweaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *neweaers32ls29expr = new BPatch_arithExpr(BPatch_times, *neweaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *newtagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *neweaers3expr);
	BPatch_arithExpr *newtagaddrexpr = new BPatch_arithExpr(BPatch_minus, *newtagaddrrawexpr, *neweaers32ls29expr);
	BPatch_arithExpr *newderef0expr = new BPatch_arithExpr(BPatch_deref, *newtagaddrexpr);
	BPatch_arithExpr *newref0expr = newderef0expr;

	BPatch_arithExpr *divideexpr2 =  new BPatch_arithExpr(BPatch_divide, *newref0expr, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *timesexpr2 =  new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *minusexpr2 =  new BPatch_arithExpr(BPatch_minus, *newref0expr, *timesexpr2);
	BPatch_arithExpr *timesexpr2a =  new BPatch_arithExpr(BPatch_times, *editagexpr, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *plusexpr2 =  new BPatch_arithExpr(BPatch_plus, *timesexpr2a, *minusexpr2);

	BPatch_arithExpr *assignexpr1b = new BPatch_arithExpr(BPatch_assign, *newtagaddrexpr, *plusexpr2);
	BPatch_ifExpr *ifexpr1b = new BPatch_ifExpr(*bexpr0a, *assignexpr1b);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(ifexpr1a);
	snippets.push_back(ifexpr1b);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}




	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr24), BPatch_constExpr(0xfeff0123));
	BPatch_arithExpr *assignexpr0a = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr44), BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx...... %lx %lx...... %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(espvalueexpr24);
	printfArgs.push_back(get_tag_from_addr(espvalueexpr24));
	printfArgs.push_back(get_tag_from_addr(espvalueexpr44));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EAX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDI));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0);
	snippets.push_back(assignexpr0a);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr1a);
	snippets.push_back(ifexpr1b);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2m_save_opw(BPatch_point *inspoint)
{
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	BPatch_arithExpr *espvalueexpr22 = new BPatch_arithExpr(BPatch_minus, *espexpr, BPatch_constExpr(0x22));
	//BPatch_constExpr *eae = new BPatch_constExpr(0xbffe9b24);
	//BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *eae);
	//BPatch_arithExpr *espvalueexpr22 = new BPatch_arithExpr(BPatch_plus, *localeffectiveaddressexpr, BPatch_constExpr(0x0));

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espvalueexpr22, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;

	// if remainder is 0, 2, 4, 6
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *espvalueexpr22, *eaers3ls3expr);
	BPatch_boolExpr *bexpr0a = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr0b = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr0c = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr0d = new BPatch_boolExpr(BPatch_eq, *remainderexpr, BPatch_constExpr(0x6));


	BPatch_arithExpr *eaxtagexpr = get_tag_from_reg(X86_REG_EAX);
	BPatch_arithExpr *divideexpr1a = new BPatch_arithExpr(BPatch_divide, *eaxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1a = new BPatch_arithExpr(BPatch_times, *divideexpr1a, BPatch_constExpr(0x4));
	BPatch_arithExpr *axtagexpr = new BPatch_arithExpr(BPatch_minus, *eaxtagexpr, *timesexpr1a);
	BPatch_arithExpr *ecxtagexpr = get_tag_from_reg(X86_REG_ECX);
	BPatch_arithExpr *divideexpr1b = new BPatch_arithExpr(BPatch_divide, *ecxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1b = new BPatch_arithExpr(BPatch_times, *divideexpr1b, BPatch_constExpr(0x4));
	BPatch_arithExpr *cxtagexpr = new BPatch_arithExpr(BPatch_minus, *ecxtagexpr, *timesexpr1b);
	BPatch_arithExpr *edxtagexpr = get_tag_from_reg(X86_REG_EDX);
	BPatch_arithExpr *divideexpr1c = new BPatch_arithExpr(BPatch_divide, *edxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1c = new BPatch_arithExpr(BPatch_times, *divideexpr1c, BPatch_constExpr(0x4));
	BPatch_arithExpr *dxtagexpr = new BPatch_arithExpr(BPatch_minus, *edxtagexpr, *timesexpr1c);
	BPatch_arithExpr *ebxtagexpr = get_tag_from_reg(X86_REG_EBX);
	BPatch_arithExpr *divideexpr1d = new BPatch_arithExpr(BPatch_divide, *ebxtagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1d = new BPatch_arithExpr(BPatch_times, *divideexpr1d, BPatch_constExpr(0x4));
	BPatch_arithExpr *bxtagexpr = new BPatch_arithExpr(BPatch_minus, *ebxtagexpr, *timesexpr1d);
	BPatch_arithExpr *esptagexpr = get_tag_from_reg(X86_REG_ESP);
	BPatch_arithExpr *divideexpr1e = new BPatch_arithExpr(BPatch_divide, *esptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1e = new BPatch_arithExpr(BPatch_times, *divideexpr1e, BPatch_constExpr(0x4));
	BPatch_arithExpr *sptagexpr = new BPatch_arithExpr(BPatch_minus, *esptagexpr, *timesexpr1e);
	BPatch_arithExpr *ebptagexpr = get_tag_from_reg(X86_REG_EBP);
	BPatch_arithExpr *divideexpr1f = new BPatch_arithExpr(BPatch_divide, *ebptagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1f = new BPatch_arithExpr(BPatch_times, *divideexpr1f, BPatch_constExpr(0x4));
	BPatch_arithExpr *bptagexpr = new BPatch_arithExpr(BPatch_minus, *ebptagexpr, *timesexpr1f);
	BPatch_arithExpr *esitagexpr = get_tag_from_reg(X86_REG_ESI);
	BPatch_arithExpr *divideexpr1g = new BPatch_arithExpr(BPatch_divide, *esitagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1g = new BPatch_arithExpr(BPatch_times, *divideexpr1g, BPatch_constExpr(0x4));
	BPatch_arithExpr *sitagexpr = new BPatch_arithExpr(BPatch_minus, *esitagexpr, *timesexpr1g);
	BPatch_arithExpr *editagexpr = get_tag_from_reg(X86_REG_EDI);
	BPatch_arithExpr *divideexpr1h = new BPatch_arithExpr(BPatch_divide, *editagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr1h = new BPatch_arithExpr(BPatch_times, *divideexpr1h, BPatch_constExpr(0x4));
	BPatch_arithExpr *ditagexpr = new BPatch_arithExpr(BPatch_minus, *editagexpr, *timesexpr1h);

	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *sitagexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *bptagexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *sptagexpr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr2d = new BPatch_arithExpr(BPatch_times, *bxtagexpr, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr2e = new BPatch_arithExpr(BPatch_times, *dxtagexpr, BPatch_constExpr(0x400));
	BPatch_arithExpr *timesexpr2f = new BPatch_arithExpr(BPatch_times, *cxtagexpr, BPatch_constExpr(0x1000));
	BPatch_arithExpr *timesexpr2g = new BPatch_arithExpr(BPatch_times, *axtagexpr, BPatch_constExpr(0x4000));

	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *ditagexpr, *timesexpr2a);
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *timesexpr2b, *timesexpr2c);
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *timesexpr2d, *timesexpr2e);
	BPatch_arithExpr *plusexpr2d = new BPatch_arithExpr(BPatch_plus, *timesexpr2f, *timesexpr2g);
	BPatch_arithExpr *plusexpr2e = new BPatch_arithExpr(BPatch_plus, *plusexpr2a, *plusexpr2b);
	BPatch_arithExpr *plusexpr2f = new BPatch_arithExpr(BPatch_plus, *plusexpr2c, *plusexpr2d);
	BPatch_arithExpr *plusexpr2g = new BPatch_arithExpr(BPatch_plus, *plusexpr2e, *plusexpr2f);


	BPatch_arithExpr *divideexpr3a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10000));
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *divideexpr3a, BPatch_constExpr(0x10000));
	BPatch_arithExpr *minusexpr3a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr3a);
	BPatch_arithExpr *timesexpr3b = new BPatch_arithExpr(BPatch_times, *plusexpr2g, BPatch_constExpr(0x10000));
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *timesexpr3b, *minusexpr3a);
	BPatch_arithExpr *assignexpr3a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr3a);

	BPatch_arithExpr *divideexpr4a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4000));
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divideexpr4a, BPatch_constExpr(0x4000));
	BPatch_arithExpr *minusexpr4a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr4a);
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *plusexpr2g, BPatch_constExpr(0x4000));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *minusexpr4a);
	BPatch_arithExpr *divideexpr4b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40000000));
	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divideexpr4b, BPatch_constExpr(0x40000000));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *plusexpr4a, *timesexpr4c);
	BPatch_arithExpr *assignexpr4a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);

	BPatch_arithExpr *divideexpr5a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x1000));
	BPatch_arithExpr *timesexpr5a = new BPatch_arithExpr(BPatch_times, *divideexpr5a, BPatch_constExpr(0x1000));
	BPatch_arithExpr *minusexpr5a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr5a);
	BPatch_arithExpr *timesexpr5b = new BPatch_arithExpr(BPatch_times, *plusexpr2g, BPatch_constExpr(0x1000));
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *timesexpr5b, *minusexpr5a);
	BPatch_arithExpr *divideexpr5b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *timesexpr5c = new BPatch_arithExpr(BPatch_times, *divideexpr5b, BPatch_constExpr(0x10000000));
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *timesexpr5c);
	BPatch_arithExpr *assignexpr5a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr5b);

	BPatch_arithExpr *divideexpr6a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x400));
	BPatch_arithExpr *timesexpr6a = new BPatch_arithExpr(BPatch_times, *divideexpr6a, BPatch_constExpr(0x400));
	BPatch_arithExpr *minusexpr6a = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr6a);
	BPatch_arithExpr *timesexpr6b = new BPatch_arithExpr(BPatch_times, *plusexpr2g, BPatch_constExpr(0x400));
	BPatch_arithExpr *plusexpr6a = new BPatch_arithExpr(BPatch_plus, *timesexpr6b, *minusexpr6a);
	BPatch_arithExpr *divideexpr6b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4000000));
	BPatch_arithExpr *timesexpr6c = new BPatch_arithExpr(BPatch_times, *divideexpr6b, BPatch_constExpr(0x4000000));
	BPatch_arithExpr *plusexpr6b = new BPatch_arithExpr(BPatch_plus, *plusexpr6a, *timesexpr6c);
	BPatch_arithExpr *assignexpr6a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr6b);


	BPatch_ifExpr *ifexpr7d = new BPatch_ifExpr(*bexpr0d, *assignexpr3a);
	BPatch_ifExpr *ifexpr7c = new BPatch_ifExpr(*bexpr0c, *assignexpr4a, *ifexpr7d);
	BPatch_ifExpr *ifexpr7b = new BPatch_ifExpr(*bexpr0b, *assignexpr5a);
	BPatch_ifExpr *ifexpr7a = new BPatch_ifExpr(*bexpr0a, *assignexpr6a, *ifexpr7b);




	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(ifexpr7c);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	std::vector<BPatch_snippet*> snippets1;
	snippets1.push_back(ifexpr7a);
	BPatch_sequence *seq1 = new BPatch_sequence(snippets1);
	if (!appBin->insertSnippet(*seq1, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *get_tag_addr_from_addr(espvalueexpr22), BPatch_constExpr(0xfeff0123));
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx...... %lx...... %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(espvalueexpr22);
	printfArgs.push_back(get_tag_from_addr(espvalueexpr22));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EAX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs.push_back(get_tag_from_reg(X86_REG_EDI));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr00);
	snippets.push_back(assignexpr0);
	snippets.push_back(&printfCall);
	snippets.push_back(ifexpr7c);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	std::vector<BPatch_snippet*> printfArgs1;
	BPatch_snippet* fmt1 = new BPatch_constExpr("%lx...... %lx...... %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs1.push_back(fmt1);
	printfArgs1.push_back(espvalueexpr22);
	printfArgs1.push_back(get_tag_from_addr(espvalueexpr22));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EAX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_ECX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EDX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EBX));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_ESP));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EBP));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_ESI));
	printfArgs1.push_back(get_tag_from_reg(X86_REG_EDI));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs1;
	appImage->findFunction("debug_printf", printfFuncs1);
	if (printfFuncs1.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall1(*(printfFuncs1[0]), printfArgs1);

	std::vector<BPatch_snippet*> snippets1;
	snippets1.push_back(ifexpr7a);
	snippets1.push_back(&printfCall1);
	BPatch_sequence *seq1 = new BPatch_sequence(snippets1);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq1, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_lea_base_xfer_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *ref1expr);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_lea_base_xfer_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	// get new tag
	BPatch_arithExpr *divide0expr = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *divide0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr = new BPatch_arithExpr(BPatch_minus, *ref1expr, *timesexpr);
	BPatch_arithExpr *divide0expra = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpra = new BPatch_arithExpr(BPatch_times, *divide0expra, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr = new BPatch_arithExpr(BPatch_plus, *timesexpra, *minusexpr);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_lea_idx_xfer_opl(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *ref1expr);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void r2r_lea_idx_xfer_opw(x86_reg reg0value, x86_reg reg1value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);


	// get new tag
	BPatch_arithExpr *divide0expr = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *divide0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *minusexpr = new BPatch_arithExpr(BPatch_minus, *ref1expr, *timesexpr);
	BPatch_arithExpr *divide0expra = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpra = new BPatch_arithExpr(BPatch_times, *divide0expra, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr = new BPatch_arithExpr(BPatch_plus, *timesexpra, *minusexpr);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, *plusexpr);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _lea_r2r_opl(x86_reg reg0value, x86_reg reg1value, x86_reg reg2value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg2value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	int index2 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index2expr = new BPatch_constExpr(index2);
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index2expr);

	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get bit 2
	BPatch_arithExpr *divide0expr3 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times0expr3 = new BPatch_arithExpr(BPatch_times, *divide0expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr3 = new BPatch_arithExpr(BPatch_minus, *divide0expr2, *times0expr3);
	BPatch_arithExpr *divide1expr3 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *times1expr3 = new BPatch_arithExpr(BPatch_times, *divide1expr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr3 = new BPatch_arithExpr(BPatch_minus, *divide1expr2, *times1expr3);
	// get bit 2 tag
	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *minus0expr3, *minus1expr3);
	BPatch_arithExpr *divideexpr3 = new BPatch_arithExpr(BPatch_divide, *plusexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr3 = new BPatch_arithExpr(BPatch_times, *divideexpr3, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr3 = new BPatch_arithExpr(BPatch_minus, *plusexpr3, *timesexpr3);
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *divideexpr3, *minusexpr3);
	BPatch_arithExpr *timesexpr3a = new BPatch_arithExpr(BPatch_times, *plusexpr3a, BPatch_constExpr(0x4));

	// get bit 3
	BPatch_arithExpr *divide0expr4 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times0expr4 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr4 = new BPatch_arithExpr(BPatch_minus, *divide0expr3, *times0expr4);
	BPatch_arithExpr *divide1expr4 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *times1expr4 = new BPatch_arithExpr(BPatch_times, *divide1expr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr4 = new BPatch_arithExpr(BPatch_minus, *divide1expr3, *times1expr4);
	// get bit 3 tag
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *minus0expr4, *minus1expr4);
	BPatch_arithExpr *divideexpr4 = new BPatch_arithExpr(BPatch_divide, *plusexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divideexpr4, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr4 = new BPatch_arithExpr(BPatch_minus, *plusexpr4, *timesexpr4);
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *divideexpr4, *minusexpr4);
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *plusexpr4a, BPatch_constExpr(0x8));

	// get low 4 bits tag
	BPatch_arithExpr *plusexpr5a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);
	BPatch_arithExpr *plusexpr5b = new BPatch_arithExpr(BPatch_plus, *timesexpr3a, *timesexpr4a);
	BPatch_arithExpr *plusexpr5c = new BPatch_arithExpr(BPatch_plus, *plusexpr5a, *plusexpr5b);

	// get new tag
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr4, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr6 = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr5c);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref2expr, *plusexpr6);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx index2: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index2expr);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void _lea_r2r_opw(x86_reg reg0value, x86_reg reg1value, x86_reg reg2value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg2value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);
	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);
	int index2 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index2expr = new BPatch_constExpr(index2);
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index2expr);


	// get bit 0
	BPatch_arithExpr *divide0expr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times0expr1 = new BPatch_arithExpr(BPatch_times, *divide0expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *times0expr1);
	BPatch_arithExpr *divide1expr1 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *times1expr1 = new BPatch_arithExpr(BPatch_times, *divide1expr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr1 = new BPatch_arithExpr(BPatch_minus, *ref1expr, *times1expr1);
	// get bit 0 tag
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *minus0expr1, *minus1expr1);
	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *plusexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *plusexpr1, *timesexpr1);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *divideexpr1, *minusexpr1);

	// get bit 1
	BPatch_arithExpr *divide0expr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times0expr2 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus0expr2 = new BPatch_arithExpr(BPatch_minus, *divide0expr1, *times0expr2);
	BPatch_arithExpr *divide1expr2 = new BPatch_arithExpr(BPatch_divide, *ref1expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *times1expr2 = new BPatch_arithExpr(BPatch_times, *divide1expr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minus1expr2 = new BPatch_arithExpr(BPatch_minus, *divide1expr1, *times1expr2);
	// get bit 1 tag
	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *minus0expr2, *minus1expr2);
	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *plusexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x2));
	BPatch_arithExpr *minusexpr2 = new BPatch_arithExpr(BPatch_minus, *plusexpr2, *timesexpr2);
	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *divideexpr2, *minusexpr2);
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *plusexpr2a, BPatch_constExpr(0x2));

	// get low 2 bits tag
	BPatch_arithExpr *plusexpr3a = new BPatch_arithExpr(BPatch_plus, *plusexpr1a, *timesexpr2a);

	// get new tag
	BPatch_arithExpr *timesexpr4 = new BPatch_arithExpr(BPatch_times, *divide0expr2, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4 = new BPatch_arithExpr(BPatch_plus, *timesexpr4, *plusexpr3a);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref2expr, *plusexpr4);

	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}

	
	/*BPatch_arithExpr *ref0expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *ref1expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *ref2expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *ref3expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x3));
	BPatch_arithExpr *ref4expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *ref5expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x5));
	BPatch_arithExpr *ref6expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x6));
	BPatch_arithExpr *ref7expr1 = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x7));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("index0: %lx index1: %lx index2: %lx gpr array: %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(index2expr);
	printfArgs.push_back(index0expr);
	printfArgs.push_back(index1expr);
	printfArgs.push_back(ref0expr1);
	printfArgs.push_back(ref1expr1);
	printfArgs.push_back(ref2expr1);
	printfArgs.push_back(ref3expr1);
	printfArgs.push_back(ref4expr1);
	printfArgs.push_back(ref5expr1);
	printfArgs.push_back(ref6expr1);
	printfArgs.push_back(ref7expr1);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void set_n_bytes(BPatch_arithExpr *addrexpr, BPatch_arithExpr * bytesexpr, BPatch_arithExpr *setvalueexpr, BPatch_point *inspoint)
{
	//BPatch_snippet *eae = new BPatch_effectiveAddressExpr();
	//BPatch_constExpr *eae = new BPatch_constExpr(0x9164902);

	//BPatch_arithExpr *assignexpr00 = new BPatch_arithExpr(BPatch_assign, *localeffectiveaddressexpr, *addrexpr);

	//BPatch_bytesAccessedExpr *bytesaccessedexpr = new BPatch_bytesAccessedExpr();
	//BPatch_constExpr *bytesaccessedexpr = new BPatch_constExpr(0x81);

	//x86_reg reg1value = X86_REG_AL;


	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *addrexpr, BPatch_constExpr(0x8));

	// if remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *minusexpr0 = new BPatch_arithExpr(BPatch_minus, *addrexpr, *eaers3ls3expr);
	BPatch_arithExpr *minusexpr0a = new BPatch_arithExpr(BPatch_minus, BPatch_constExpr(0x8), *minusexpr0);
	BPatch_arithExpr *dividesexpr0 = new BPatch_arithExpr(BPatch_divide, *minusexpr0a, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr0 = new BPatch_arithExpr(BPatch_times, *dividesexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *remainderexpr = new BPatch_arithExpr(BPatch_minus, *minusexpr0a, *timesexpr0);

	BPatch_arithExpr *restbytesaccessedexpr = new BPatch_arithExpr(BPatch_minus, *bytesexpr, *remainderexpr);


	BPatch_arithExpr *iteratetimesexpr = new BPatch_arithExpr(BPatch_divide, *restbytesaccessedexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr00 = new BPatch_arithExpr(BPatch_times, *iteratetimesexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *restremainderexpr = new BPatch_arithExpr(BPatch_minus, *restbytesaccessedexpr, *timesexpr00);
	BPatch_boolExpr *bexpr00 = new BPatch_boolExpr(BPatch_ne, *restremainderexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr01 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x1));
	BPatch_boolExpr *bexpr02 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x2));
	BPatch_boolExpr *bexpr03 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x3));
	BPatch_boolExpr *bexpr04 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x4));
	BPatch_boolExpr *bexpr05 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x5));
	BPatch_boolExpr *bexpr06 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x6));
	BPatch_boolExpr *bexpr07 = new BPatch_boolExpr(BPatch_eq, *restremainderexpr, BPatch_constExpr(0x7));

	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);







	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr0 = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);

	BPatch_arithExpr *plusexpr0 = new BPatch_arithExpr(BPatch_plus, *remainderexpr, BPatch_constExpr(0x7));
	BPatch_arithExpr *divide1expr0 = new BPatch_arithExpr(BPatch_divide, *plusexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *tagaddrexpr0a = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, *divide1expr0);

	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0a, *localrepeattimeexpr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;

	BPatch_arithExpr *divideexpr2 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr2 = new BPatch_arithExpr(BPatch_times, *divideexpr2, BPatch_constExpr(0x100));


	// get 8 bits tag
	BPatch_arithExpr *timesexpr2a = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr2b = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr2c = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr2d = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr2e = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *timesexpr2f = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr2g = new BPatch_arithExpr(BPatch_times, *setvalueexpr, BPatch_constExpr(0x80));

	BPatch_arithExpr *plusexpr2a = new BPatch_arithExpr(BPatch_plus, *setvalueexpr, *timesexpr2a);
	BPatch_arithExpr *plusexpr2b = new BPatch_arithExpr(BPatch_plus, *plusexpr2a, *timesexpr2b);
	BPatch_arithExpr *plusexpr2c = new BPatch_arithExpr(BPatch_plus, *plusexpr2b, *timesexpr2c);
	BPatch_arithExpr *plusexpr2d = new BPatch_arithExpr(BPatch_plus, *plusexpr2c, *timesexpr2d);
	BPatch_arithExpr *plusexpr2e = new BPatch_arithExpr(BPatch_plus, *plusexpr2d, *timesexpr2e);
	BPatch_arithExpr *plusexpr2f = new BPatch_arithExpr(BPatch_plus, *plusexpr2e, *timesexpr2f);
	BPatch_arithExpr *plusexpr2g = new BPatch_arithExpr(BPatch_plus, *plusexpr2f, *timesexpr2g);

	BPatch_arithExpr *plusexpr2h = new BPatch_arithExpr(BPatch_plus, *timesexpr2, *plusexpr2g);

	// get new tag
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr2h);

	BPatch_arithExpr *plusexpr3 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr3 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr3);


	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr3);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);


	// remainder tags
	// if remainder is 1
	BPatch_arithExpr *divide0expr4a = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x2));
	BPatch_arithExpr *timesexpr4a = new BPatch_arithExpr(BPatch_times, *divide0expr4a, BPatch_constExpr(0x2));
	BPatch_arithExpr *plusexpr4a = new BPatch_arithExpr(BPatch_plus, *timesexpr4a, *setvalueexpr);
	BPatch_arithExpr *assignexpr4a = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4a);
	BPatch_ifExpr *ifexpr4a = new BPatch_ifExpr(*bexpr01, *assignexpr4a);
	// if remainder is 2
	BPatch_arithExpr *divide0expr4b = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x4));
	BPatch_arithExpr *timesexpr4b = new BPatch_arithExpr(BPatch_times, *divide0expr4b, BPatch_constExpr(0x4));
	BPatch_arithExpr *plusexpr4b = new BPatch_arithExpr(BPatch_plus, *timesexpr4b, *plusexpr2a);
	BPatch_arithExpr *assignexpr4b = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4b);
	BPatch_ifExpr *ifexpr4b = new BPatch_ifExpr(*bexpr02, *assignexpr4b);
	// if remainder is 3
	BPatch_arithExpr *divide0expr4c = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *timesexpr4c = new BPatch_arithExpr(BPatch_times, *divide0expr4c, BPatch_constExpr(0x8));
	BPatch_arithExpr *plusexpr4c = new BPatch_arithExpr(BPatch_plus, *timesexpr4c, *plusexpr2b);
	BPatch_arithExpr *assignexpr4c = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4c);
	BPatch_ifExpr *ifexpr4c = new BPatch_ifExpr(*bexpr03, *assignexpr4c);
	// if remainder is 4
	BPatch_arithExpr *divide0expr4d = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr4d = new BPatch_arithExpr(BPatch_times, *divide0expr4d, BPatch_constExpr(0x10));
	BPatch_arithExpr *plusexpr4d = new BPatch_arithExpr(BPatch_plus, *timesexpr4d, *plusexpr2c);
	BPatch_arithExpr *assignexpr4d = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4d);
	BPatch_ifExpr *ifexpr4d = new BPatch_ifExpr(*bexpr04, *assignexpr4d);
	// if remainder is 5
	BPatch_arithExpr *divide0expr4e = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *timesexpr4e = new BPatch_arithExpr(BPatch_times, *divide0expr4e, BPatch_constExpr(0x20));
	BPatch_arithExpr *plusexpr4e = new BPatch_arithExpr(BPatch_plus, *timesexpr4e, *plusexpr2d);
	BPatch_arithExpr *assignexpr4e = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4e);
	BPatch_ifExpr *ifexpr4e = new BPatch_ifExpr(*bexpr05, *assignexpr4e);
	// if remainder is 6
	BPatch_arithExpr *divide0expr4f = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *timesexpr4f = new BPatch_arithExpr(BPatch_times, *divide0expr4f, BPatch_constExpr(0x40));
	BPatch_arithExpr *plusexpr4f = new BPatch_arithExpr(BPatch_plus, *timesexpr4f, *plusexpr2e);
	BPatch_arithExpr *assignexpr4f = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4f);
	BPatch_ifExpr *ifexpr4f = new BPatch_ifExpr(*bexpr06, *assignexpr4f);
	// if remainder is 7
	BPatch_arithExpr *divide0expr4g = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x80));
	BPatch_arithExpr *timesexpr4g = new BPatch_arithExpr(BPatch_times, *divide0expr4g, BPatch_constExpr(0x80));
	BPatch_arithExpr *plusexpr4g = new BPatch_arithExpr(BPatch_plus, *timesexpr4g, *plusexpr2f);
	BPatch_arithExpr *assignexpr4g = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, *plusexpr4g);
	BPatch_ifExpr *ifexpr4g = new BPatch_ifExpr(*bexpr07, *assignexpr4g);

	std::vector<BPatch_snippet*> ifsnippets;
	ifsnippets.push_back(ifexpr4a);
	ifsnippets.push_back(ifexpr4b);
	ifsnippets.push_back(ifexpr4c);
	ifsnippets.push_back(ifexpr4d);
	ifsnippets.push_back(ifexpr4e);
	ifsnippets.push_back(ifexpr4f);
	ifsnippets.push_back(ifexpr4g);
	BPatch_sequence *ifseq = new BPatch_sequence(ifsnippets);

	BPatch_ifExpr *ifexpr5 = new BPatch_ifExpr(*bexpr00, *ifseq);




	// first few tags

	BPatch_arithExpr *deref0expr6 = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr0);
	BPatch_arithExpr *ref0expr6 = deref0expr6;
	BPatch_arithExpr *divide0expr6 = new BPatch_arithExpr(BPatch_divide, *ref0expr6, BPatch_constExpr(0x100));
	BPatch_arithExpr *timesexpr6 = new BPatch_arithExpr(BPatch_times, *divide0expr6, BPatch_constExpr(0x100));

	BPatch_arithExpr *squareexpr7 = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *minusexpr0);
	//BPatch_constExpr *squareexpr7 = new BPatch_constExpr(0x0);

	BPatch_arithExpr *divideexpr7 = new BPatch_arithExpr(BPatch_divide, *ref0expr6, *squareexpr7);
	BPatch_arithExpr *timesexpr7 = new BPatch_arithExpr(BPatch_times, *divideexpr7, *squareexpr7);
	BPatch_arithExpr *minusexpr7 = new BPatch_arithExpr(BPatch_minus, *ref0expr6, *timesexpr7);
	BPatch_arithExpr *divideexpr7a = new BPatch_arithExpr(BPatch_divide, *plusexpr2g, *squareexpr7);
	BPatch_arithExpr *timesexpr7a = new BPatch_arithExpr(BPatch_times, *divideexpr7a, *squareexpr7);
	BPatch_arithExpr *plusexpr7 = new BPatch_arithExpr(BPatch_plus, *timesexpr7a, *minusexpr7);
	BPatch_arithExpr *plusexpr7a = new BPatch_arithExpr(BPatch_plus, *timesexpr6, *plusexpr7);
	BPatch_arithExpr *assignexpr7 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr0, *plusexpr7a);

	BPatch_boolExpr *bexpr8 = new BPatch_boolExpr(BPatch_ne, *minusexpr0, BPatch_constExpr(0x0));
	BPatch_ifExpr *ifexpr8 = new BPatch_ifExpr(*bexpr8, *assignexpr7);






	std::vector<BPatch_snippet*> snippets0;
	//snippets0.push_back(assignexpr00);
	snippets0.push_back(assignexpr0);
	snippets0.push_back(whileexpr);
	snippets0.push_back(ifexpr5);
	BPatch_sequence *seq0 = new BPatch_sequence(snippets0);

	if (!appBin->insertSnippet(*seq0, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(ifexpr8);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs1;
	BPatch_snippet* fmt1 = new BPatch_constExpr("%lx %lx %lx\n");
	printfArgs1.push_back(fmt1);
	printfArgs1.push_back(squareexpr7);
	printfArgs1.push_back(minusexpr0);
	printfArgs1.push_back(plusexpr7a);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs1;
	appImage->findFunction("debug_fprintf", printfFuncs1);
	if (printfFuncs1.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall1(*(printfFuncs1[0]), printfArgs1);

	std::vector<BPatch_snippet*> snippets1;
	snippets1.push_back(&printfCall1);
	BPatch_sequence *seq1 = new BPatch_sequence(snippets1);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq1, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/


	/*BPatch_arithExpr *addrexprt0 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x0));
	BPatch_arithExpr *addrexprt1 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x4));
	BPatch_arithExpr *addrexprt2 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x8));
	BPatch_arithExpr *addrexprt3 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0xc));
	BPatch_arithExpr *addrexprt4 = new BPatch_arithExpr(BPatch_plus, *tagaddrexpr0, BPatch_constExpr(0x10));

	BPatch_arithExpr *derefexprt0 = new BPatch_arithExpr(BPatch_deref, *addrexprt0);
	BPatch_arithExpr *derefexprt1 = new BPatch_arithExpr(BPatch_deref, *addrexprt1);
	BPatch_arithExpr *derefexprt2 = new BPatch_arithExpr(BPatch_deref, *addrexprt2);
	BPatch_arithExpr *derefexprt3 = new BPatch_arithExpr(BPatch_deref, *addrexprt3);
	BPatch_arithExpr *derefexprt4 = new BPatch_arithExpr(BPatch_deref, *addrexprt4);

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(derefexprt0);
	printfArgs.push_back(derefexprt1);
	printfArgs.push_back(derefexprt2);
	printfArgs.push_back(derefexprt3);
	printfArgs.push_back(derefexprt4);
	printfArgs.push_back(iteratetimesexpr);
	printfArgs.push_back(tagaddrexpr);
	printfArgs.push_back(tagaddrexpr0);
	printfArgs.push_back(remainderexpr);
	printfArgs.push_back(localeffectiveaddressexpr);
	printfArgs.push_back(squareexpr7);
	printfArgs.push_back(minusexpr0);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr00);
	//snippets.push_back(assignexpr0);
	//snippets.push_back(&printfCall);
	//snippets.push_back(whileexpr);
	//snippets.push_back(ifexpr5);
	snippets.push_back(ifexpr8);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void taint_source_recv(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	//BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	//BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	//BPatch_arithExpr *refp0expr = derefp0expr;

	BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;


	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	set_n_bytes(refp1expr, refp2expr, oneexpr, inspoint);



	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint source: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp1expr);
	printfArgs.push_back(refp2expr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp1expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}

void taint_source_gnutls_record_recv(BPatch_point *inspoint)
{
	taint_source_recv(inspoint);
}

void taint_source_read(BPatch_point *inspoint)
{
	taint_source_recv(inspoint);
}

void taint_source_fgets(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	//BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;

	BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;


	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, refp1expr, oneexpr, inspoint);



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint source: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp0expr);
	printfArgs.push_back(refp1expr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp0expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}

void taint_source_fread(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;

	BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;

	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *refp1expr, *refp2expr);

	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, timesexpr, oneexpr, inspoint);



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint source: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp0expr);
	printfArgs.push_back(timesexpr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp0expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}

void taint_source_jpeg_read_raw_data(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;

	//BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	//BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;

	BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, BPatch_constExpr(0x1000), *refp2expr);

	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, timesexpr, oneexpr, inspoint);



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint source: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp0expr);
	printfArgs.push_back(timesexpr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp0expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}

void taint_source_jpeg_read_header(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	//BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;

	//BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	//BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;

	//BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *BPatch_constExpr(0x1000), *refp2expr);

	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	BPatch_arithExpr *sizeexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1000000), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, sizeexpr, oneexpr, inspoint);



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint source: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp0expr);
	printfArgs.push_back(timesexpr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp0expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}


void taint_source_free(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	//BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;

	//BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	//BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;

	//BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *BPatch_constExpr(0x1000), *refp2expr);

	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	BPatch_arithExpr *fourexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x4), BPatch_constExpr(0x0));
	//BPatch_arithExpr *sizeexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1000000), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, fourexpr, oneexpr, inspoint);



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp0expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint source: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp0expr);
	printfArgs.push_back(oneexpr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp0expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}





void taint_single_register(x86_reg reg0value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, BPatch_constExpr(0xf));

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*assignexpr, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
}

void taint_single_register_1(x86_reg reg0value, BPatch_point *inspoint)
{
	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *ref0expr, BPatch_constExpr(0xf));

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*assignexpr, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
}




void taint_source__IO_getc(BPatch_point *inspoint)
{
	taint_single_register(X86_REG_EAX, inspoint);
}

void taint_source_fgetc(BPatch_point *inspoint)
{
	taint_single_register(X86_REG_EAX, inspoint);
}

void m2m_xfer_opb(BPatch_arithExpr *op0expr, BPatch_arithExpr *op1expr, BPatch_point *inspoint)
{
	BPatch_arithExpr *regesiexpr = op0expr;
	BPatch_arithExpr *regediexpr = op1expr;


	/*BPatch_arithExpr *op0valueexpr = new BPatch_arithExpr(BPatch_deref, *regediexpr);
	BPatch_arithExpr *assignexprlocalop0a = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, *op0valueexpr);
	BPatch_arithExpr *assignexprlocalop0b = new BPatch_arithExpr(BPatch_assign, *localop0valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op0bminexpr = new BPatch_boolExpr(BPatch_ge, *regediexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op0bmaxexpr = new BPatch_boolExpr(BPatch_le, *regediexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op0maxifexpr = new BPatch_ifExpr(*op0bmaxexpr, *assignexprlocalop0a, *assignexprlocalop0b);
	BPatch_ifExpr *op0minifexpr = new BPatch_ifExpr(*op0bminexpr, *op0maxifexpr, *assignexprlocalop0b);


	BPatch_arithExpr *op1valueexpr = new BPatch_arithExpr(BPatch_deref, *regesiexpr);
	BPatch_arithExpr *assignexprlocalop1a = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, *op1valueexpr);
	BPatch_arithExpr *assignexprlocalop1b = new BPatch_arithExpr(BPatch_assign, *localop1valueexpr, BPatch_constExpr(0x0));

	BPatch_boolExpr *op1bminexpr = new BPatch_boolExpr(BPatch_ge, *regesiexpr, BPatch_constExpr(section_addr_min));
	BPatch_boolExpr *op1bmaxexpr = new BPatch_boolExpr(BPatch_le, *regesiexpr, BPatch_constExpr(section_addr_max));
	BPatch_ifExpr *op1maxifexpr = new BPatch_ifExpr(*op1bmaxexpr, *assignexprlocalop1a, *assignexprlocalop1b);
	BPatch_ifExpr *op1minifexpr = new BPatch_ifExpr(*op1bminexpr, *op1maxifexpr, *assignexprlocalop1b);*/

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;


	// if op0 remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);
	BPatch_arithExpr *op0squareexpr = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op0remainderexpr);

	BPatch_arithExpr *op0divideexpr0 = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, *op0squareexpr);
	BPatch_arithExpr *op0timesexpr0 = new BPatch_arithExpr(BPatch_times, *op0divideexpr0, *op0squareexpr);
	BPatch_arithExpr *op0minusexpr0 = new BPatch_arithExpr(BPatch_times, *op0ref0expr, *op0timesexpr0);
	BPatch_arithExpr *op0assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0);


	// if op1 remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *regesiexpr, *op1eaers3ls3expr);
	BPatch_arithExpr *op1squareexpr = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op1remainderexpr);

	BPatch_arithExpr *op1divideexpr0 = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, *op1squareexpr);
	//BPatch_arithExpr *op1timesexpr0 = new BPatch_arithExpr(BPatch_times, *op1divideexpr0, *op1squareexpr);
	//BPatch_arithExpr *op1minusexpr0 = new BPatch_arithExpr(BPatch_times, *op1ref0expr, *op1timesexpr0);
	BPatch_arithExpr *op1assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0);





	// get new tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *plusexpr1, *op0squareexpr);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *op0minusexpr0);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);



	//BPatch_boolExpr *op0bnzexpr = new BPatch_boolExpr(BPatch_ne, *localop0valueexpr, BPatch_constExpr(0x0));
	//BPatch_boolExpr *op1bnzxexpr = new BPatch_boolExpr(BPatch_ne, *localop1valueexpr, BPatch_constExpr(0x0));
	//BPatch_ifExpr *op1bnzifexpr = new BPatch_ifExpr(*op1bnzxexpr, *assignexpr);
	//BPatch_ifExpr *op0bnzifexpr = new BPatch_ifExpr(*op0bnzexpr, *op1bnzifexpr);



	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0assignexpr0);
	snippets.push_back(op1assignexpr0);
	snippets.push_back(assignexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(localop0tagexpr);
	printfArgs.push_back(localop1tagexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_printf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(op0minifexpr);
	//snippets.push_back(op1minifexpr);
	//snippets.push_back(op0bnzifexpr);
	snippets.push_back(op0assignexpr0);
	snippets.push_back(op1assignexpr0);
	snippets.push_back(assignexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}


void taint_source_memcpy(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;

	BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	BPatch_arithExpr *refp1expr = derefp1expr;

	BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	BPatch_arithExpr *refp2expr = derefp2expr;


	BPatch_arithExpr *iteratetimesexpr = refp2expr;
	BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, *iteratetimesexpr);



	BPatch_arithExpr *regesiexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);
	BPatch_arithExpr *regediexpr = new BPatch_arithExpr(BPatch_plus, *refp0expr, *localrepeattimeexpr);

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers3expr = new BPatch_arithExpr(BPatch_divide, *regediexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op0eaers32expr = new BPatch_arithExpr(BPatch_divide, *op0eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op0eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op0tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op0eaers3expr);
	BPatch_arithExpr *op0tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op0tagaddrrawexpr, *op0eaers32ls29expr);
	//BPatch_arithExpr *op0deref0expr = new BPatch_arithExpr(BPatch_deref, *op0tagaddrexpr);
	//BPatch_arithExpr *op0ref0expr = op0deref0expr;

	// compute tag addr
	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers3expr = new BPatch_arithExpr(BPatch_divide, *regesiexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *op1eaers32expr = new BPatch_arithExpr(BPatch_divide, *op1eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *op1eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *op1tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *op1eaers3expr);
	BPatch_arithExpr *op1tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *op1tagaddrrawexpr, *op1eaers32ls29expr);
	BPatch_arithExpr *op1deref0expr = new BPatch_arithExpr(BPatch_deref, *op1tagaddrexpr);
	BPatch_arithExpr *op1ref0expr = op1deref0expr;


	/*// if op0 remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op0eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op0eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op0remainderexpr = new BPatch_arithExpr(BPatch_minus, *regediexpr, *op0eaers3ls3expr);
	BPatch_arithExpr *op0squareexpr = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op0remainderexpr);

	BPatch_arithExpr *op0divideexpr0 = new BPatch_arithExpr(BPatch_divide, *op0ref0expr, *op0squareexpr);
	BPatch_arithExpr *op0timesexpr0 = new BPatch_arithExpr(BPatch_times, *op0divideexpr0, *op0squareexpr);
	BPatch_arithExpr *op0minusexpr0 = new BPatch_arithExpr(BPatch_times, *op0ref0expr, *op0timesexpr0);
	BPatch_arithExpr *op0assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localop0tagexpr, *op0divideexpr0);

	// if op1 remainder is 0, 1, 2, 3, 4, 5, 6, 7
	BPatch_arithExpr *op1eaers3ls3expr = new BPatch_arithExpr(BPatch_times, *op1eaers3expr, BPatch_constExpr(0x8));
	BPatch_arithExpr *op1remainderexpr = new BPatch_arithExpr(BPatch_minus, *regesiexpr, *op1eaers3ls3expr);
	BPatch_arithExpr *op1squareexpr = new BPatch_arithExpr(BPatch_ref, *twosquarevarexpr, *op1remainderexpr);

	BPatch_arithExpr *op1divideexpr0 = new BPatch_arithExpr(BPatch_divide, *op1ref0expr, *op1squareexpr);
	BPatch_arithExpr *op1assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localop1tagexpr, *op1divideexpr0);

	// get new tag
	BPatch_arithExpr *op0divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop0tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op0timesexpr1 = new BPatch_arithExpr(BPatch_times, *op0divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1divideexpr1 = new BPatch_arithExpr(BPatch_divide, *localop1tagexpr, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1timesexpr1 = new BPatch_arithExpr(BPatch_times, *op1divideexpr1, BPatch_constExpr(0x2));
	BPatch_arithExpr *op1minusexpr1 = new BPatch_arithExpr(BPatch_minus, *localop1tagexpr, *op1timesexpr1);
	BPatch_arithExpr *plusexpr1 = new BPatch_arithExpr(BPatch_plus, *op0timesexpr1, *op1minusexpr1);
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *plusexpr1, *op0squareexpr);
	BPatch_arithExpr *plusexpr1a = new BPatch_arithExpr(BPatch_plus, *timesexpr1, *op0minusexpr0);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *plusexpr1a);*/

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *op0tagaddrexpr, *op1ref0expr);

	BPatch_arithExpr *plusexpr1b = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x1));
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr1b);



	std::vector<BPatch_snippet*> bodysnippets;
	//bodysnippets.push_back(op0assignexpr0);
	//bodysnippets.push_back(op1assignexpr0);
	bodysnippets.push_back(assignexpr);
	bodysnippets.push_back(assignexpr1);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);



	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0);
	snippets.push_back(whileexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);
	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}


	/*std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("%lx %lx %lx, %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(refp0expr);
	printfArgs.push_back(refp1expr);
	printfArgs.push_back(refp2expr);
	printfArgs.push_back(localrepeattimeexpr);
	printfArgs.push_back(regediexpr);
	printfArgs.push_back(regesiexpr);
	printfArgs.push_back(get_tag_from_addr(refp0expr));
	printfArgs.push_back(get_tag_from_addr(refp1expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr0);
	snippets.push_back(bodyseq);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



}




void taint_source_memcpy_2(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	//BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;
	//BPatch_arithExpr *derefp00expr = new BPatch_arithExpr(BPatch_deref, *refp0expr);
	//BPatch_arithExpr *refp00expr = derefp00expr;


	//BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	//BPatch_arithExpr *refp1expr = derefp1expr;
	//BPatch_arithExpr *derefp11expr = new BPatch_arithExpr(BPatch_deref, *refp1expr);
	//BPatch_arithExpr *refp11expr = derefp11expr;

	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;

	//BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *refp1expr, *refp2expr);

	BPatch_arithExpr *plusexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10000), BPatch_constExpr(0x0));
	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, plusexpr, oneexpr, inspoint);



	/*BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint_source_memcpy: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp1expr);
	printfArgs.push_back(refp11expr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp1expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}

void taint_source_memcpy_1(BPatch_point *inspoint)
{
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);



	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));
	//BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x8));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0xc));


	BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	BPatch_arithExpr *refp0expr = derefp0expr;
	//BPatch_arithExpr *derefp00expr = new BPatch_arithExpr(BPatch_deref, *refp0expr);
	//BPatch_arithExpr *refp00expr = derefp00expr;


	BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	BPatch_arithExpr *refp1expr = derefp1expr;
	BPatch_arithExpr *derefp11expr = new BPatch_arithExpr(BPatch_deref, *refp1expr);
	BPatch_arithExpr *refp11expr = derefp11expr;

	//BPatch_arithExpr *t1expr = new BPatch_arithExpr(BPatch_divide, *derefp1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t2expr = new BPatch_arithExpr(BPatch_times, *t1expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *t3expr = new BPatch_arithExpr(BPatch_plus, *t2expr, BPatch_constExpr(0xc));
	//BPatch_arithExpr *refp1expr = t3expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;
	//BPatch_arithExpr *t4expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10), BPatch_constExpr(0x0));
	//BPatch_arithExpr *refp2expr = t4expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;

	//BPatch_arithExpr *timesexpr = new BPatch_arithExpr(BPatch_times, *refp1expr, *refp2expr);

	BPatch_arithExpr *plusexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x10000), BPatch_constExpr(0x0));
	BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	set_n_bytes(refp0expr, plusexpr, oneexpr, inspoint);



	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	BPatch_arithExpr *refp120expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x20));
	BPatch_arithExpr *refp140expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x40));
	BPatch_arithExpr *refp160expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x60));
	BPatch_arithExpr *refp1800expr = new BPatch_arithExpr(BPatch_plus, *refp1expr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("taint_source_memcpy: insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx\n");
	printfArgs.push_back(fmt);
	//printfArgs.push_back(refp0expr);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(refp1expr);
	printfArgs.push_back(refp11expr);
	//printfArgs.push_back(refp3expr);
	printfArgs.push_back(get_tag_from_addr(refp1expr));
	printfArgs.push_back(get_tag_from_addr(refp120expr));
	printfArgs.push_back(get_tag_from_addr(refp140expr));
	printfArgs.push_back(get_tag_from_addr(refp160expr));
	printfArgs.push_back(get_tag_from_addr(refp1800expr));

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	//snippets.push_back(assignexpr0);
	//snippets.push_back(whileexpr);
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*BPatch_arithExpr *assignexpr0 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *bufferindexexpr = new BPatch_arithExpr(BPatch_plus, *refp1expr, *localrepeattimeexpr);

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *bufferindexexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;
	BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *tagaddrexpr, BPatch_constExpr(0x12344321));

	BPatch_arithExpr *plusexpr2 = new BPatch_arithExpr(BPatch_plus, *localrepeattimeexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *assignexpr2 = new BPatch_arithExpr(BPatch_assign, *localrepeattimeexpr, *plusexpr2);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_lt, *localrepeattimeexpr, BPatch_constExpr(0x800));

	std::vector<BPatch_snippet*> bodysnippets;
	bodysnippets.push_back(assignexpr1);
	bodysnippets.push_back(assignexpr2);
	BPatch_sequence *bodyseq = new BPatch_sequence(bodysnippets);

	BPatch_whileExpr *whileexpr = new BPatch_whileExpr(*bexpr, *bodyseq);
	*/
}

void show_values(BPatch_point *inspoint)
{

	x86_reg reg0value = X86_REG_EAX;
	x86_reg reg1value = X86_REG_EBX;
	x86_reg reg2value = X86_REG_ECX;
	x86_reg reg3value = X86_REG_EDX;
	x86_reg reg4value = X86_REG_EDI;
	x86_reg reg5value = X86_REG_ESI;
	x86_reg reg6value = X86_REG_ESP;
	x86_reg reg7value = X86_REG_EBP;

	int index0 = csregvalue_to_grregindex(reg0value);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);

	int index1 = csregvalue_to_grregindex(reg1value);
	BPatch_constExpr *index1expr = new BPatch_constExpr(index1);
	BPatch_arithExpr *ref1expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index1expr);

	int index2 = csregvalue_to_grregindex(reg2value);
	BPatch_constExpr *index2expr = new BPatch_constExpr(index2);
	BPatch_arithExpr *ref2expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index2expr);

	int index3 = csregvalue_to_grregindex(reg3value);
	BPatch_constExpr *index3expr = new BPatch_constExpr(index3);
	BPatch_arithExpr *ref3expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index3expr);

	int index4 = csregvalue_to_grregindex(reg4value);
	BPatch_constExpr *index4expr = new BPatch_constExpr(index4);
	BPatch_arithExpr *ref4expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index4expr);

	int index5 = csregvalue_to_grregindex(reg5value);
	BPatch_constExpr *index5expr = new BPatch_constExpr(index5);
	BPatch_arithExpr *ref5expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index5expr);

	int index6 = csregvalue_to_grregindex(reg6value);
	BPatch_constExpr *index6expr = new BPatch_constExpr(index6);
	BPatch_arithExpr *ref6expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index6expr);

	int index7 = csregvalue_to_grregindex(reg7value);
	BPatch_constExpr *index7expr = new BPatch_constExpr(index7);
	BPatch_arithExpr *ref7expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index7expr);


	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	BPatch_arithExpr *espderefexpr = new BPatch_arithExpr(BPatch_deref, *espexpr);

	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x20));
	BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x40));
	BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x60));


	//BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	//BPatch_arithExpr *refp0expr = derefp0expr;

	//BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	//BPatch_arithExpr *refp1expr = derefp1expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;


	
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx %lx %lx %lx %lx %lx %lx, %lx %lx %lx %lx, value inside esp: %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(ref0expr);
	printfArgs.push_back(ref1expr);
	printfArgs.push_back(ref2expr);
	printfArgs.push_back(ref3expr);
	printfArgs.push_back(ref4expr);
	printfArgs.push_back(ref5expr);
	printfArgs.push_back(ref6expr);
	printfArgs.push_back(ref7expr);
	printfArgs.push_back(get_tag_from_addr(p0addrexpr));
	printfArgs.push_back(get_tag_from_addr(p1addrexpr));
	printfArgs.push_back(get_tag_from_addr(p2addrexpr));
	printfArgs.push_back(get_tag_from_addr(p3addrexpr));
	printfArgs.push_back(espderefexpr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}




	/*BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	std::vector<BPatch_snippet*> printfArgs;
	printfArgs.push_back(oneexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_test", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	//BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*printfCall, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(espexpr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void taint_sink_free(BPatch_point *inspoint)
{
	/*
	// get parameter values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	BPatch_arithExpr *p0addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x0));
	//BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x20));
	//BPatch_arithExpr *p2addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x40));
	//BPatch_arithExpr *p3addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x60));


	//BPatch_arithExpr *derefp0expr = new BPatch_arithExpr(BPatch_deref, *p0addrexpr);
	//BPatch_arithExpr *refp0expr = derefp0expr;

	//BPatch_arithExpr *derefp1expr = new BPatch_arithExpr(BPatch_deref, *p1addrexpr);
	//BPatch_arithExpr *refp1expr = derefp1expr;

	//BPatch_arithExpr *derefp2expr = new BPatch_arithExpr(BPatch_deref, *p2addrexpr);
	//BPatch_arithExpr *refp2expr = derefp2expr;

	//BPatch_arithExpr *derefp3expr = new BPatch_arithExpr(BPatch_deref, *p3addrexpr);
	//BPatch_arithExpr *refp3expr = derefp3expr;


	
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(get_tag_from_addr(p0addrexpr));


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}
	*/



	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	//BPatch_arithExpr *derefespexpr = new BPatch_arithExpr(BPatch_deref, *espexpr);
	//BPatch_arithExpr *refespexpr = derefespexpr;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;


	//BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x10));
	//BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *ref0expr);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localtmptagexpr, BPatch_constExpr(0x0));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("warning!!! taint found at insn addr: %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr, *printfCall);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}










	/*BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	std::vector<BPatch_snippet*> printfArgs;
	printfArgs.push_back(oneexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_test", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	//BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*printfCall, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(espexpr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void taint_sink_call_para2(BPatch_point *inspoint)
{
	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	BPatch_arithExpr *p1addrexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(0x4));

	//BPatch_arithExpr *derefespexpr = new BPatch_arithExpr(BPatch_deref, *espexpr);
	//BPatch_arithExpr *refespexpr = derefespexpr;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *p1addrexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;


	//BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	//BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x10));
	//BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *ref0expr);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localtmptagexpr, BPatch_constExpr(0x0));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("warning!!! taint found at insn addr: %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);


	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr, *printfCall);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}










	/*BPatch_arithExpr *oneexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x1), BPatch_constExpr(0x0));
	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	std::vector<BPatch_snippet*> printfArgs;
	printfArgs.push_back(oneexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_test", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	//BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);


	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*printfCall, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/



	/*
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(espexpr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}




void taint_sink_ret(BPatch_point *inspoint)
{
	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);

	//BPatch_arithExpr *derefespexpr = new BPatch_arithExpr(BPatch_deref, *espexpr);
	//BPatch_arithExpr *refespexpr = derefespexpr;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;


	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *minusexpr1);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localtmptagexpr, BPatch_constExpr(0x0));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("warning!!! taint found at insn addr: %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr, *printfCall);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(espexpr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

void taint_sink_use_eax(BPatch_point *inspoint)
{
	// get eax tag
	int index0 = csregvalue_to_grregindex(X86_REG_ESP);
	BPatch_constExpr *index0expr = new BPatch_constExpr(index0);
	BPatch_arithExpr *ref0expr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, *index0expr);

	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *ref0expr);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localtmptagexpr, BPatch_constExpr(0x0));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("warning!!! taint found at insn addr: %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr, *printfCall);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_callAfter, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(espexpr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}




void taint_sink_epilogue(int epilogue_offset, BPatch_point *inspoint)
{
	// get esp values
	BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
	BPatch_arithExpr *espplusexpr = new BPatch_arithExpr(BPatch_plus, *espexpr, BPatch_constExpr(epilogue_offset));

	//BPatch_arithExpr *derefespexpr = new BPatch_arithExpr(BPatch_deref, *espexpr);
	//BPatch_arithExpr *refespexpr = derefespexpr;

	// signed right shift 3 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers3expr = new BPatch_arithExpr(BPatch_divide, *espplusexpr, BPatch_constExpr(0x8));
	// signed right shift 32 bits for effectiveaddressexpr
	BPatch_arithExpr *eaers32expr = new BPatch_arithExpr(BPatch_divide, *eaers3expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *eaers32ls29expr = new BPatch_arithExpr(BPatch_times, *eaers32expr, BPatch_constExpr(0x20000000));
	BPatch_arithExpr *tagaddrrawexpr = new BPatch_arithExpr(BPatch_plus, *bitmapvaraddrexpr, *eaers3expr);
	BPatch_arithExpr *tagaddrexpr = new BPatch_arithExpr(BPatch_minus, *tagaddrrawexpr, *eaers32ls29expr);
	BPatch_arithExpr *deref0expr = new BPatch_arithExpr(BPatch_deref, *tagaddrexpr);
	BPatch_arithExpr *ref0expr = deref0expr;


	BPatch_arithExpr *divideexpr1 = new BPatch_arithExpr(BPatch_divide, *ref0expr, BPatch_constExpr(0x10));
	BPatch_arithExpr *timesexpr1 = new BPatch_arithExpr(BPatch_times, *divideexpr1, BPatch_constExpr(0x10));
	BPatch_arithExpr *minusexpr1 = new BPatch_arithExpr(BPatch_minus, *ref0expr, *timesexpr1);
	BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *localtmptagexpr, *minusexpr1);

	BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ne, *localtmptagexpr, BPatch_constExpr(0x0));
	BPatch_originalAddressExpr *addrexpr = new BPatch_originalAddressExpr();

	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("warning!!! taint found at insn addr: %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("result_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr *printfCall = new BPatch_funcCallExpr(*(printfFuncs[0]), printfArgs);
	BPatch_ifExpr *ifexpr = new BPatch_ifExpr(*bexpr, *printfCall);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(assignexpr);
	snippets.push_back(ifexpr);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}



	/*
	std::vector<BPatch_snippet*> printfArgs;
	BPatch_snippet* fmt = new BPatch_constExpr("insn addr: %lx, %lx %lx\n");
	printfArgs.push_back(fmt);
	printfArgs.push_back(addrexpr);
	printfArgs.push_back(espexpr);
	printfArgs.push_back(ref0expr);

	// Find the debug_printf function
	std::vector<BPatch_function*> printfFuncs;
	appImage->findFunction("debug_fprintf", printfFuncs);
	if (printfFuncs.size() == 0)
	{
		fprintf(stderr, "Could not find debug_printf\n");
		return;
	}
	// Construct a function call snippet
	BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);

	std::vector<BPatch_snippet*> snippets;
	snippets.push_back(&printfCall);
	BPatch_sequence *seq = new BPatch_sequence(snippets);

	// Insert the snippet at the instrumentation points
	if (!appBin->insertSnippet(*seq, *inspoint, BPatch_lastSnippet))
	{
		fprintf(stderr, "insertSnippet failed\n");
		return;
	}*/
}

//void inspect_insn(cs_insn *csinsn, BPatch_function* curFunc)

//int tmp_count_1 = 0, tmp_count_2 = 0;

void inspect_insn(cs_insn *csinsn, cs_insn *csinsn_after, BPatch_function* curFunc, int selective_flag)
{
	char funcName[1024];
	curFunc->getName(funcName, 1024);
	Address csinsn_addr = (Address)(csinsn->address);
	cs_x86 *x86_cs_insn = &(csinsn->detail->x86);
	BPatch_point *inspoint = curFunc->findPoint(csinsn_addr);
	//if(inspoint == NULL)
	//	cout << hex << csinsn_addr << endl;
	inspoint = inspoint;
	//long long curaddr = (long long)(csinsn_addr);


	Address csinsn_after_addr = (Address)(csinsn_after->address);
	BPatch_point *inspoint_after = curFunc->findPoint(csinsn_after_addr);
	inspoint_after = inspoint_after;


	//cs_detail *detail = csinsn->detail;
	//int count = (int) detail->x86.op_count;
	//cout << count << endl;
	//cout << (int)(x86_cs_insn->op_count) << endl;

	//if(csinsn->detail == NULL)
	//{
	//	cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
	//}

	//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

	//std::vector<BPatch_function*> printfFuncs;
	//appImage->findFunction("debug_printf", printfFuncs);
	//if (printfFuncs.size() == 0) {
	//fprintf(stderr, "Could not find printf\n");
	//return;
	//}




	//FILE *fp = fopen("hi4", "a");
	//fprintf(fp, "%lx\n", curaddr);
	//fclose(fp);


	if(inspoint == NULL)
	{
		//tmp_count_1++;
		return;
	}
	else
		//tmp_count_2++;

	//cout << tmp_count_1 << " " << tmp_count_2 << endl;

	switch(csinsn->id)
	{
		// adc, add, and, or, xor, sbb, sub
		case X86_INS_ADC:
		case X86_INS_ADD:
		case X86_INS_AND:
		case X86_INS_OR:
		case X86_INS_XOR:
		case X86_INS_SBB:
		case X86_INS_SUB:
		{
			if(configuration == 0)
				break;
			if(selective_flag == 0)
				break;

			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);

			// check if it is epilogue
			if(configuration == 2)
			{
				std::vector<long long>::iterator it;
				it = find(epilogue_addrs.begin(), epilogue_addrs.end(), (unsigned long)csinsn_addr);
				if(it != epilogue_addrs.end())
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					int index = distance(epilogue_addrs.begin(), it);
					taint_sink_epilogue(epilogue_stack_offsets[index], inspoint);
				}
			}



			// 2nd operand is an immediate
			if(op1->type == X86_OP_IMM)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			}
			// both operands are registers
			else if(op0->type == X86_OP_REG && op1->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				//vector<BPatch_register> bpregs;
				//appBin->getRegisters(bpregs);
				//size_t i;
				//for(i = 0; i < bpregs.size(); i++)
				//{
				//	cout << bpregs[i].name() << endl;
				//}
				//cout << x86::al << endl;
				//cout << op0->reg << " " << csregvalue_to_regwidth(op0->reg) << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// check for x86 clear register idiom
					if((csinsn->id == X86_INS_XOR || csinsn->id == X86_INS_SUB || csinsn->id == X86_INS_SBB) && (op0->reg == op1->reg))
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r_clrl(op0->reg, inspoint);
					}

					// default behavior
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_binary_opl(op0->reg, op1->reg, inspoint);
					}
				}
				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// check for x86 clear register idiom
					if((csinsn->id == X86_INS_XOR || csinsn->id == X86_INS_SUB || csinsn->id == X86_INS_SBB) && (op0->reg == op1->reg))
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r_clrw(op0->reg, inspoint);
					}

					// default behavior
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_binary_opw(op0->reg, op1->reg, inspoint);
					}
				}
				// 8-bit operands
				else if(csregvalue_is_gr8(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// check for x86 clear register idiom
					if((csinsn->id == X86_INS_XOR || csinsn->id == X86_INS_SUB || csinsn->id == X86_INS_SBB) && (op0->reg == op1->reg))
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

						// 8-bit upper
						if(csregvalue_is_grupper8bits(op0->reg) == 1)
						{
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							r_clrb_u(op0->reg, inspoint);
						}

						// 8-bit lower
						else if(csregvalue_is_grlower8bits(op0->reg) == 1)
						{
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							r_clrb_l(op0->reg, inspoint);
						}
					}

					// default behavior
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

						// lower 8-bit registers
						if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grlower8bits(op1->reg) == 1)
						{
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							r2r_binary_opb_l(op0->reg, op1->reg, inspoint);
						}
						// upper 8-bit registers
						else if(csregvalue_is_grupper8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
						{
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							r2r_binary_opb_u(op0->reg, op1->reg, inspoint);
						}
						// reg0 is a lower 8-bit register and reg1 is an upper 8-bit register
						else if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
						{
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							r2r_binary_opb_lu(op0->reg, op1->reg, inspoint);
						}
						// reg0 is a upper 8-bit register and reg1 is an lower 8-bit register
						else
						{
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							r2r_binary_opb_ul(op0->reg, op1->reg, inspoint);
						}
					}
				}
			}

			// op1 is a memory operand
			else if(op1->type == X86_OP_MEM && op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1) // && std::find(func_loadstore_addrs.begin(), func_loadstore_addrs.end(), curaddr) != func_loadstore_addrs.end()
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_binary_opl(op0->reg, inspoint);
				}
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_binary_opw(op0->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_binary_opb_u(op0->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_binary_opb_l(op0->reg, inspoint);
				}
			}

			// op0 is a memory operand
			else if(op0->type == X86_OP_MEM && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				if(csregvalue_is_gr32(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_binary_opl(op1->reg, inspoint);
				}
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_binary_opw(op1->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_binary_opb_u(op1->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_binary_opb_l(op1->reg, inspoint);
				}
			}
			break;
		}

		// bsf, bsr, mov
		case X86_INS_BSF:
		case X86_INS_BSR:
		case X86_INS_MOV:
		{
			if(selective_flag == 0)
				break;

			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			//cout << (int) (x86_cs_insn->op_count) << endl;
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);

			// 2nd operand is an immediate operand or a segment register operand
			if((op1->type == X86_OP_IMM) || (op1->type == X86_OP_REG && csregvalue_is_seg(op1->reg) == 1))
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// op0 is a memory operand
				if(op0->type == X86_OP_MEM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// op0 is 4 bytes
					if(op0->size == 4)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						tagmap_clrl(inspoint);
					}

					// op0 is 2 bytes
					else if(op0->size == 2)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						tagmap_clrw(inspoint);
					}

					// op0 is 1 byte
					else if(op0->size == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						tagmap_clrb(inspoint);
					}
				}

				// op0 is a register operand
				else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
				{
					if(csregvalue_is_gr32(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r_clrl(op0->reg, inspoint);
					}
					else if(csregvalue_is_gr16(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r_clrw(op0->reg, inspoint);
					}
					else if(csregvalue_is_grupper8bits(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r_clrb_u(op0->reg, inspoint);
					}
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r_clrb_l(op0->reg, inspoint);
					}
				}


			}

			// both operands are registers
			else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_xfer_opl(op0->reg, op1->reg, inspoint);
				}
				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_xfer_opw(op0->reg, op1->reg, inspoint);
				}
				// 8-bit operands
				else if(csregvalue_is_gr8(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// lower 8-bit registers
					if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grlower8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_xfer_opb_l(op0->reg, op1->reg, inspoint);
					}
					// upper 8-bit registers
					else if(csregvalue_is_grupper8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_xfer_opb_u(op0->reg, op1->reg, inspoint);
					}
					// reg0 is a lower 8-bit register and reg1 is an upper 8-bit register
					else if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_xfer_opb_lu(op0->reg, op1->reg, inspoint);
					}
					// reg0 is a upper 8-bit register and reg1 is an lower 8-bit register
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_xfer_opb_ul(op0->reg, op1->reg, inspoint);
					}
				}
			}

			// op1 is a memory operand
			else if(op1->type == X86_OP_MEM && op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opl(op0->reg, inspoint);

					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					//if (op1->mem.segment != X86_REG_INVALID)
					//{
					//	//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					//	printf("operands[%u].mem.segment: REG = %s\n", 0, cs_reg_name(capstone_handle, op1->mem.segment));
					//}
					//if(op1->mem.base != X86_REG_INVALID)
					//{
					//	printf("operands[%u].mem.base: REG = %s\n", 0, cs_reg_name(capstone_handle, op1->mem.base));
					//}
					//if(op1->mem.index != X86_REG_INVALID)
					//{
					//	printf("operands[%u].mem.index: REG = %s\n", 0, cs_reg_name(capstone_handle, op1->mem.index));
					//}
					//if(op1->mem.scale != 1)
					//{
					//	printf("operands[%u].mem.scale: 0x%lx\n", 0, op1->mem.scale);
					//}
					//if(op1->mem.disp != 0)
					//{
					//	printf("operands[%u].mem.disp: 0x%lx\n", 0, op1->mem.disp);
					//}


				}
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opw(op0->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opb_u(op0->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opb_l(op0->reg, inspoint);
				}
			}

			// op0 is a memory operand
			else if(op0->type == X86_OP_MEM && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(csregvalue_is_gr32(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_xfer_opl(op1->reg, inspoint);
				}
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_xfer_opw(op1->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_xfer_opb_u(op1->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_xfer_opb_l(op1->reg, inspoint);
				}








				//FILE *fp = fopen("hi3", "a");
				//fprintf(fp, "%lx\n", curaddr);
				//fclose(fp);
				//if(std::find(func_loadstore_addrs.begin(), func_loadstore_addrs.end(), curaddr) == func_loadstore_addrs.end())
				//{
				//	//cout << hex << curaddr << endl;
				//	FILE *fp = fopen("hi1", "a");
				//	fprintf(fp, "%lx\n", curaddr);
				//	fclose(fp);
				//}
				//else
				//{
				//	FILE *fp = fopen("hi2", "a");
				//	fprintf(fp, "%lx\n", curaddr);
				//	fclose(fp);
				//}

				//if(std::find(func_loadstore_addrs.begin(), func_loadstore_addrs.end(), curaddr) == func_loadstore_addrs.end())
				{
					//if(std::find(instrumented_addrs.begin(), instrumented_addrs.end(), curaddr) == instrumented_addrs.end())
					{
						//FILE *fp = fopen("hi1", "a");
						//fprintf(fp, "%lx\n", curaddr);
						//fclose(fp);

						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						//if (op0->mem.segment != X86_REG_INVALID)
						//{
						//	cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						//	printf("operands[%u].mem.segment: REG = %s\n", 0, cs_reg_name(capstone_handle, op0->mem.segment));
						//}
						/*
						if(op0->mem.base != X86_REG_INVALID)
						{
							printf("operands[%u].mem.base: REG = %s\n", 0, cs_reg_name(capstone_handle, op0->mem.base));
						}
						if(op0->mem.index != X86_REG_INVALID)
						{
							printf("operands[%u].mem.index: REG = %s\n", 0, cs_reg_name(capstone_handle, op0->mem.index));
						}
						if(op0->mem.scale != 1)
						{
							printf("operands[%u].mem.scale: 0x%lx\n", 0, op0->mem.scale);
						}
						if(op0->mem.disp != 0)
						{
							printf("operands[%u].mem.disp: 0x%lx\n", 0, op0->mem.disp);
						}
						*/
						//if (op0->mem.disp < 0)
						//	printf("operands[%u].mem.disp < 0\n", 0, op0->mem.disp);

						/*
						if(op0->mem.base != X86_REG_INVALID && op0->mem.disp != 0)
						{
							std::vector<BPatch_snippet*> printfArgs;
							BPatch_snippet* fmt = new BPatch_constExpr("Access at: 0x%lx\n");
							printfArgs.push_back(fmt);
							//BPatch_snippet* eae = new BPatch_effectiveAddressExpr();
							printfArgs.push_back(regstr_to_regexprptr("eax"));

							// Find the debug_printf function
							std::vector<BPatch_function*> printfFuncs;
							appImage->findFunction("debug_printf", printfFuncs);
							if (printfFuncs.size() == 0)
							{
								fprintf(stderr, "Could not find debug_printf\n");
								return;
							}
							// Construct a function call snippet
							BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);
							// Insert the snippet at the instrumentation points
							if (!appBin->insertSnippet(printfCall, *inspoint))
							{
								fprintf(stderr, "insertSnippet failed\n");
								return;
							}

						}
					
						instrumented_addrs.push_back(curaddr);
						*/
					}
				}
				//else
				{
					//if(std::find(instrumented_addrs.begin(), instrumented_addrs.end(), curaddr) == instrumented_addrs.end())
					{
						/*
						if(curaddr == 0x8048565)
						{
							cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							BPatch_variableExpr *gprvarexpr = appImage->findVariable("gpr");
							BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *gprvarexpr, BPatch_constExpr(0x0));
							BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *refexpr, BPatch_arithExpr(BPatch_plus, *refexpr, BPatch_constExpr(0x1)));
							std::vector<BPatch_snippet*> printfArgs;
							BPatch_snippet* fmt = new BPatch_constExpr("gpr value: 0x%lx\n");
							printfArgs.push_back(fmt);
							printfArgs.push_back(gprvarexpr);

							// Find the debug_printf function
							std::vector<BPatch_function*> printfFuncs;
							appImage->findFunction("debug_printf", printfFuncs);
							if (printfFuncs.size() == 0)
							{
								fprintf(stderr, "Could not find debug_printf\n");
								return;
							}
							// Construct a function call snippet
							BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);
							std::vector<BPatch_snippet*> snippets;
							snippets.push_back(assignexpr1);
							snippets.push_back(&printfCall);
							BPatch_sequence *seq = new BPatch_sequence(snippets);
						
							// Insert the snippet at the instrumentation points
							if (!appBin->insertSnippet(*seq, *inspoint))
							{
								fprintf(stderr, "insertSnippet failed\n");
								return;
							}

						}
						*/


						//FILE *fp = fopen("hi2", "a");
						//fprintf(fp, "%lx\n", curaddr);
						//fclose(fp)

						/*BPatch_Vector<BPatch_snippet *>instArgs;
						BPatch_snippet* eae = new BPatch_effectiveAddressExpr();
						instArgs.push_back(eae);
						BPatch_funcCallExpr instBBCallExpr(*printint_fun, instArgs);
						appBin->insertSnippet(instBBCallExpr, *inspoint);
						*/

						/*
						std::vector<BPatch_snippet*> printfArgs;
						BPatch_snippet* fmt = new BPatch_constExpr("Access at: 0x%lx\n");
						printfArgs.push_back(fmt);
						BPatch_snippet* eae = new BPatch_effectiveAddressExpr();
						printfArgs.push_back(eae);

						// Find the debug_printf function
						std::vector<BPatch_function*> printfFuncs;
						appImage->findFunction("debug_printf", printfFuncs);
						if (printfFuncs.size() == 0)
						{
							fprintf(stderr, "Could not find debug_printf\n");
							return;
						}
						// Construct a function call snippet
						BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);
						// Insert the snippet at the instrumentation points
						if (!appBin->insertSnippet(printfCall, *inspoint))
						{
							fprintf(stderr, "insertSnippet failed\n");
							return;
						}



						BPatch_variableExpr *bm = appImage->findVariable("bitmap");
						BPatch_arithExpr *addrexpr = new BPatch_arithExpr(BPatch_addr, *bm);
						//BPatch_snippet *bm = (BPatch_snippet *)appImage->findVariable("bitmap");

						// set the tag bit of address 0xbf898e70 to be 1
						int a = 0xbf898e70;
						int b = 0x8;
						int c = 0x80000000;
						int d = 0xe0000000;
						BPatch_arithExpr *elementexpr = new BPatch_arithExpr(BPatch_plus, *addrexpr, BPatch_constExpr(0x8));//
						BPatch_arithExpr *divideexpr = new BPatch_arithExpr(BPatch_divide, BPatch_constExpr(a), BPatch_constExpr(b));
						BPatch_boolExpr *bexpr = new BPatch_boolExpr(BPatch_ge, BPatch_constExpr(a), BPatch_constExpr(c));
						BPatch_arithExpr *minusexpr = new BPatch_arithExpr(BPatch_minus, *divideexpr, BPatch_constExpr(d));
					
						//BPatch_variableExpr *varexpr = appBin->createVariable();
						BPatch_arithExpr *entryaddrexpr = new BPatch_arithExpr(BPatch_plus, *addrexpr, *minusexpr);
						BPatch_arithExpr *refexpr = new BPatch_arithExpr(BPatch_ref, *bm, *minusexpr);
						BPatch_arithExpr *assignexpr = new BPatch_arithExpr(BPatch_assign, *refexpr, BPatch_constExpr(0x80000000));

						BPatch_arithExpr *refexpr1 = new BPatch_arithExpr(BPatch_ref, *bm, *divideexpr);
						BPatch_arithExpr *assignexpr1 = new BPatch_arithExpr(BPatch_assign, *refexpr, BPatch_constExpr(0x80000000));

						BPatch_ifExpr *assignexpr2 = new BPatch_ifExpr(*bexpr, *assignexpr, *assignexpr1);

						printfArgs.clear();

						fmt = new BPatch_constExpr("bitmap at: 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n");
						printfArgs.push_back(fmt);
						printfArgs.push_back(addrexpr);
						printfArgs.push_back(elementexpr);
						printfArgs.push_back(divideexpr);
						printfArgs.push_back(bexpr);
						printfArgs.push_back(minusexpr);
						printfArgs.push_back(refexpr);
						printfArgs.push_back(entryaddrexpr);

						// Find the debug_printf function
						appImage->findFunction("debug_printf", printfFuncs);
						if (printfFuncs.size() == 0)
						{
							fprintf(stderr, "Could not find debug_printf\n");
							return;
						}
						// Construct a function call snippet
						BPatch_funcCallExpr printfCall1(*(printfFuncs[0]), printfArgs);
					

						std::vector<BPatch_snippet*> snippets;
						snippets.push_back(assignexpr2);
						snippets.push_back(&printfCall1);
						BPatch_sequence *seq = new BPatch_sequence(snippets);


						// Insert the snippet at the instrumentation points
						if (!appBin->insertSnippet(*seq, *inspoint))
						{
							fprintf(stderr, "insertSnippet failed\n");
							return;
						}
						*/

						//instrumented_addrs.push_back(curaddr);
					}
				}

			

				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				//if(csinsn_addr >= 0x8048426 && csinsn_addr <= 0x8048426)
				//if(csinsn_addr != 0x804c826)
				{
					/*
					BPatch_Vector<BPatch_snippet *>instArgs;
					BPatch_snippet* eae = new BPatch_effectiveAddressExpr();
					instArgs.push_back(eae);
					BPatch_funcCallExpr instBBCallExpr(*printint_fun, instArgs);
					appBin->insertSnippet(instBBCallExpr, *inspoint);
					*/

				

					/*
					std::vector<BPatch_snippet*> printfArgs;
					BPatch_snippet* fmt = new BPatch_constExpr("Access at: 0x%lx\n");
					printfArgs.push_back(fmt);
					BPatch_snippet* eae = new BPatch_effectiveAddressExpr();
					printfArgs.push_back(eae);

					// Find the printf function
					std::vector<BPatch_function*> printfFuncs;
					appImage->findFunction("debug_printf", printfFuncs);
					if (printfFuncs.size() == 0) {
					fprintf(stderr, "Could not find printf\n");
					return;
					}
					// Construct a function call snippet
					BPatch_funcCallExpr printfCall(*(printfFuncs[0]), printfArgs);
					// Insert the snippet at the instrumentation points
					if (!appBin->insertSnippet(printfCall, *inspoint)) {
					fprintf(stderr, "insertSnippet failed\n");
					return;
					}
					*/


				}

				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			}
			break;
		}

		// cmovcc instructions
		case X86_INS_CMOVA:
		case X86_INS_CMOVAE:
		case X86_INS_CMOVB:
		case X86_INS_CMOVBE:
		case X86_INS_CMOVE:
		case X86_INS_CMOVG:
		case X86_INS_CMOVGE:
		case X86_INS_CMOVL:
		case X86_INS_CMOVLE:
		case X86_INS_CMOVNE:
		case X86_INS_CMOVNO:
		case X86_INS_CMOVNP:
		case X86_INS_CMOVNS:
		case X86_INS_CMOVO:
		case X86_INS_CMOVP:
		case X86_INS_CMOVS:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;

			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			//cout << (int)(x86_cs_insn->xop_cc) << endl;
			//if(x86_cs_insn->xop_cc != X86_XOP_CC_INVALID)
			//	printf("xop_cc: %u\n", x86_cs_insn->xop_cc);
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
			// both operands are registers
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_xfer_opl_cmovcc(op0->reg, op1->reg, inspoint);
				}
				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_xfer_opw_cmovcc(op0->reg, op1->reg, inspoint);
				}
			}

			// op1 is a memory operand
			else if(op1->type == X86_OP_MEM && op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opl_cmovcc(op0->reg, inspoint);
				}
				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opw_cmovcc(op0->reg, inspoint);
				}
			}
			break;
		}

		// cbw
		case X86_INS_CBW:
		{
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// move the tag associated with AL to AH
			r2r_xfer_opb_ul(X86_REG_AH, X86_REG_AL, inspoint);
			break;
		}

		// cwd
		case X86_INS_CWD:
		{
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// move the tag associated with AX to DX
			r2r_xfer_opw(X86_REG_DX, X86_REG_AX, inspoint);
			break;
		}

		// cwde
		case X86_INS_CWDE:
		{
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// move the tag associated with AX to EAX
			_cwde(inspoint);
			break;
		}

		// cdq
		case X86_INS_CDQ:
		{
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// move the tag associated with EAX to EDX
			r2r_xfer_opl(X86_REG_EDX, X86_REG_EAX, inspoint);
			break;
		}

		// movsx
		case X86_INS_MOVSX:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// t[dst] = t[src] and extend the tag bits accordingly
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// both operands are registers
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 16-bit & 8-bit operands
				if(csregvalue_is_gr16(op0->reg) == 1)
				{
					// upper 8-bit
					if(csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_movsx_r2r_opwb_u(op0->reg, op1->reg, inspoint);
					}

					// lower 8-bit
					else if(csregvalue_is_grlower8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_movsx_r2r_opwb_l(op0->reg, op1->reg, inspoint);
					}
				}

				// 32-bit & 16-bit operands
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movsx_r2r_oplw(op0->reg, op1->reg, inspoint);
				}

				// 32-bit & 8-bit operands (upper 8-bit)
				else if(csregvalue_is_grupper8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movsx_r2r_oplb_u(op0->reg, op1->reg, inspoint);
				}

				// 32-bit & 8-bit operands (lower 8-bit)
				else if(csregvalue_is_grlower8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movsx_r2r_oplb_l(op0->reg, op1->reg, inspoint);
				}
			}

			// op1 is a memory operand
			else if(op1->type == X86_OP_MEM && op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 16-bit & 8-bit operands
				if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movsx_m2r_opwb(op0->reg, inspoint);
				}

				// 32-bit & 16-bit operands
				else if(op1->size == 2)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movsx_m2r_oplw(op0->reg, inspoint);
				}

				// 32-bit & 8-bit operands
				else if(op1->size == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movsx_m2r_oplb(op0->reg, inspoint);
				}
			}
			break;
		}

		// movzx
		case X86_INS_MOVZX:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// t[dst] = t[src] and extend the tag bits accordingly
			// zero extension always results in clearing the tags associated with the higher bytes of the destination operand
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// both operands are registers
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 16-bit & 8-bit operands
				if(csregvalue_is_gr16(op0->reg) == 1)
				{
					// upper 8-bit
					if(csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_movzx_r2r_opwb_u(op0->reg, op1->reg, inspoint);
					}

					// lower 8-bit
					else if(csregvalue_is_grlower8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_movzx_r2r_opwb_l(op0->reg, op1->reg, inspoint);
					}
				}

				// 32-bit & 16-bit operands
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movzx_r2r_oplw(op0->reg, op1->reg, inspoint);
				}

				// 32-bit & 8-bit operands (upper 8-bit)
				else if(csregvalue_is_grupper8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movzx_r2r_oplb_u(op0->reg, op1->reg, inspoint);
				}

				// 32-bit & 8-bit operands (lower 8-bit)
				else if(csregvalue_is_grlower8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movzx_r2r_oplb_l(op0->reg, op1->reg, inspoint);
				}
			}

			// op1 is a memory operand
			else if(op1->type == X86_OP_MEM && op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 16-bit & 8-bit operands
				if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movzx_m2r_opwb(op0->reg, inspoint);
				}

				// 32-bit & 16-bit operands
				else if(op1->size == 2)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movzx_m2r_oplw(op0->reg, inspoint);
				}

				// 32-bit & 8-bit operands
				else if(op1->size == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_movzx_m2r_oplb(op0->reg, inspoint);
				}
			}
			break;
		}

		// div, idiv, mul
		case X86_INS_DIV:
		case X86_INS_IDIV:
		case X86_INS_MUL:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;

			// t[dst1]:t[dst2] |= t[src]
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// memory operand
			if(op0->type == X86_OP_MEM)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// op0 is 4 bytes
				if(op0->size == 4)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_ternary_opl(inspoint);
				}

				// op0 is 2 bytes
				else if(op0->size == 2)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_ternary_opw(inspoint);
				}

				// op0 is 1 byte
				else if(op0->size == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_ternary_opb(inspoint);
				}
			}

			// register operand
			else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operand
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_ternary_opl(op0->reg, inspoint);
				}

				// 16-bit operand
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_ternary_opw(op0->reg, inspoint);
				}

				// 8-bit operand (upper)
				else if(csregvalue_is_grupper8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_ternary_opb_u(op0->reg, inspoint);
				}

				// 8-bit operand (lower)
				else if(csregvalue_is_grlower8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_ternary_opb_l(op0->reg, inspoint);
				}
			}
			break;
		}

		// imul
		case X86_INS_IMUL:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// one-operand form
			if(x86_cs_insn->op_count == 1)
			{
				cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// memory operand
				if(op0->type == X86_OP_MEM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// op0 is 4 bytes
					if(op0->size == 4)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_ternary_opl(inspoint);
					}

					// op0 is 2 bytes
					else if(op0->size == 2)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_ternary_opw(inspoint);
					}

					// op0 is 1 byte
					else if(op0->size == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_ternary_opb(inspoint);
					}
				}

				// register operand
				else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// 32-bit operand
					if(csregvalue_is_gr32(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_ternary_opl(op0->reg, inspoint);
					}

					// 16-bit operand
					else if(csregvalue_is_gr16(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_ternary_opw(op0->reg, inspoint);
					}

					// 8-bit operand (upper)
					else if(csregvalue_is_grupper8bits(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_ternary_opb_u(op0->reg, inspoint);
					}

					// 8-bit operand (lower)
					else if(csregvalue_is_grlower8bits(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_ternary_opb_l(op0->reg, inspoint);
					}
				}

			}

			// two-operands form
			else if(x86_cs_insn->op_count == 2)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
				cs_x86_op *op1 = &(x86_cs_insn->operands[1]);


				// op1 is an immediate operand
				if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_IMM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// do nothing
				}

				// op1 is a register operand
				else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// 32-bit operand
					if(csregvalue_is_gr32(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_binary_opl(op0->reg, op1->reg, inspoint);
					}

					// 16-bit operand
					else if(csregvalue_is_gr16(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_binary_opw(op0->reg, op1->reg, inspoint);
					}

				}

				// op1 is a memory operand
				else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_MEM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// 32-bit operand
					if(csregvalue_is_gr32(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_binary_opl(op0->reg, inspoint);
					}

					// 16-bit operand
					else if(csregvalue_is_gr16(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_binary_opw(op0->reg, inspoint);
					}

				}

			}

			// three-operands form
			else if(x86_cs_insn->op_count == 3)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
				cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
				cs_x86_op *op2 = &(x86_cs_insn->operands[2]);

				// op1 is a register operand
				if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1 && op2->type == X86_OP_IMM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// 32-bit operand
					if(csregvalue_is_gr32(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_xfer_opl(op0->reg, op1->reg, inspoint);
					}

					// 16-bit operand
					else if(csregvalue_is_gr16(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						r2r_xfer_opw(op0->reg, op1->reg, inspoint);
					}
				}

				// op1 is a memory operand
				else if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_MEM && op2->type == X86_OP_IMM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// 32-bit operand
					if(csregvalue_is_gr32(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_xfer_opl(op0->reg, inspoint);
					}

					// 16-bit operand
					else if(csregvalue_is_gr16(op0->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						m2r_xfer_opw(op0->reg, inspoint);
					}
				}
			}
			break;
		}

		// setcc instructions
		case X86_INS_SETAE:
		case X86_INS_SETA:
		case X86_INS_SETBE:
		case X86_INS_SETB:
		case X86_INS_SETE:
		case X86_INS_SETGE:
		case X86_INS_SETG:
		case X86_INS_SETLE:
		case X86_INS_SETL:
		case X86_INS_SETNE:
		case X86_INS_SETNO:
		case X86_INS_SETNP:
		case X86_INS_SETNS:
		case X86_INS_SETO:
		case X86_INS_SETP:
		case X86_INS_SETS:
		{
			if(selective_flag == 0)
				break;
			// clear the tag information associated with the destination operand
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// register operand
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 8-bit operand (upper)
				if(csregvalue_is_grupper8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r_clrb_u(op0->reg, inspoint);
				}

				// 8-bit operand (lower)
				else if(csregvalue_is_grlower8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r_clrb_l(op0->reg, inspoint);
				}
			}

			// memory operand
			else if(op0->type == X86_OP_MEM)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				tagmap_clrb(inspoint);
			}
			break;
		}

		// stmxcsr
		case X86_INS_STMXCSR:
		{
			if(selective_flag == 0)
				break;

			// clear the destination operand (register only)

			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			tagmap_clrl(inspoint);
			break;
		}

		// smsw, str
		case X86_INS_SMSW:
		case X86_INS_STR:
		{
			if(selective_flag == 0)
				break;
			// clear the tag information associated with the destination operand
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// register operand
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 16-bit register
				if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r_clrw(op0->reg, inspoint);
				}

				// 32-bit register
				else if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r_clrl(op0->reg, inspoint);
				}
			}

			// memory operand
			else if(op0->type == X86_OP_MEM)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				tagmap_clrw(inspoint);
			}
			break;
		}

		// lar
		case X86_INS_LAR:
		{
			if(selective_flag == 0)
				break;
			// clear the destination operand (register only)
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// 16-bit register
			if(csregvalue_is_gr16(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r_clrw(op0->reg, inspoint);
			}

			// 32-bit register
			else if(csregvalue_is_gr32(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r_clrl(op0->reg, inspoint);
			}
			break;
		}

		// rdpmc, rdtsc
		case X86_INS_RDPMC:
		case X86_INS_RDTSC:
		{
			if(selective_flag == 0)
				break;
			// clear the tag information associated with EAX and EDX
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r_clrl2(inspoint);
			break;
		}

		// cpuid
		case X86_INS_CPUID:
		{
			if(selective_flag == 0)
				break;
			// clear the tag information associated with EAX, EBX, ECX, and EDX
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r_clrl4(inspoint);
			break;
		}

		// lahf
		case X86_INS_LAHF:
		{
			if(selective_flag == 0)
				break;
			// clear the tag information of AH
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r_clrb_u(X86_REG_AH, inspoint);
			break;
		}

		// cmpxchg
		case X86_INS_CMPXCHG:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// t[dst] = t[src] iff EAX/AX/AL == dst, else t[EAX/AX/AL] = t[dst]
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// both operands are registers
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_cmpxchg_r2r_opl(op0->reg, op1->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_cmpxchg_r2r_opw(op0->reg, op1->reg, inspoint);
				}
			}

			// op0 is a memory operand
			else if(op0->type == X86_OP_MEM && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_cmpxchg_r2m_opl(op1->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_cmpxchg_r2m_opw(op1->reg, inspoint);
				}
			}
			break;
		}

		// cmpsw
		case X86_INS_CMPSW:
		{
			if(selective_flag == 0)
				break;
			// do nothing
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			break;
		}

		// cmpsb
		case X86_INS_CMPSB:
		{
			if(selective_flag == 0)
				break;
			// do nothing
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			break;
		}

		// cmp, test
		case X86_INS_CMP:
		case X86_INS_TEST:
		{
			if(selective_flag == 0)
				break;
			// do nothing
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			break;
		}

		// xchg
		case X86_INS_XCHG:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// exchange the tag information of the two operands
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// both operands are registers
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_r2r_opl(op0->reg, op1->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_r2r_opw(op0->reg, op1->reg, inspoint);
				}

				// 8-bit operands
				else if(csregvalue_is_gr8(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// lower 8-bit registers
					if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grlower8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xchg_r2r_opb_l(op0->reg, op1->reg, inspoint);
					}
					// upper 8-bit registers
					else if(csregvalue_is_grupper8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xchg_r2r_opb_u(op0->reg, op1->reg, inspoint);
					}
					// reg0 is a lower 8-bit register and reg1 is an upper 8-bit register
					else if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xchg_r2r_opb_lu(op0->reg, op1->reg, inspoint);
					}
					// reg0 is a upper 8-bit register and reg1 is an lower 8-bit register
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xchg_r2r_opb_ul(op0->reg, op1->reg, inspoint);
					}
				}
			}

			// op1 is a memory operand
			else if(op1->type == X86_OP_MEM && op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opl(op0->reg, inspoint);
				}
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opw(op0->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opb_u(op0->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opb_l(op0->reg, inspoint);
				}
			}

			// op0 is a memory operand
			else if(op0->type == X86_OP_MEM && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(csregvalue_is_gr32(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opl(op1->reg, inspoint);
				}
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opw(op1->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opb_u(op1->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xchg_m2r_opb_l(op1->reg, inspoint);
				}
			}
			break;
		}

		// xadd
		case X86_INS_XADD:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// xadd: xchg + add
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// both operands are registers
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1 && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xadd_r2r_opl(op0->reg, op1->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xadd_r2r_opw(op0->reg, op1->reg, inspoint);
				}

				// 8-bit operands
				else if(csregvalue_is_gr8(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					// lower 8-bit registers
					if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grlower8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xadd_r2r_opb_l(op0->reg, op1->reg, inspoint);
					}
					// upper 8-bit registers
					else if(csregvalue_is_grupper8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xadd_r2r_opb_u(op0->reg, op1->reg, inspoint);
					}
					// reg0 is a lower 8-bit register and reg1 is an upper 8-bit register
					else if(csregvalue_is_grlower8bits(op0->reg) == 1 && csregvalue_is_grupper8bits(op1->reg) == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xadd_r2r_opb_lu(op0->reg, op1->reg, inspoint);
					}
					// reg0 is a upper 8-bit register and reg1 is an lower 8-bit register
					else
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						_xadd_r2r_opb_ul(op0->reg, op1->reg, inspoint);
					}
				}
			}

			// op0 is a memory operand
			else if(op0->type == X86_OP_MEM && op1->type == X86_OP_REG && csregvalue_is_gr(op1->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(csregvalue_is_gr32(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xadd_m2r_opl(op1->reg, inspoint);
				}
				else if(csregvalue_is_gr16(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xadd_m2r_opw(op1->reg, inspoint);
				}
				else if(csregvalue_is_grupper8bits(op1->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xadd_m2r_opb_u(op1->reg, inspoint);
				}
				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_xadd_m2r_opb_l(op1->reg, inspoint);
				}
			}
			break;
		}

		// xlatb
		case X86_INS_XLATB:
		// lodsb
		case X86_INS_LODSB:
		{
			if(selective_flag == 0)
				break;
			// similar to a mov between a memory location and AL
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			m2r_xfer_opb_l_al(inspoint);
			break;
		}

		// lodsw
		case X86_INS_LODSW:
		{
			if(selective_flag == 0)
				break;
			// similar to a mov between a memory location and AX
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			m2r_xfer_opw_ax(inspoint);
			break;
		}

		// lodsd
		case X86_INS_LODSD:
		{
			if(selective_flag == 0)
				break;
			// similar to a mov between a memory location and EAX
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			m2r_xfer_opl_eax(inspoint);
			break;
		}

		// stosb
		case X86_INS_STOSB:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// the opposite of lodsb; however, since the instruction can also be prefixed with 'rep', the analysis code moves the tag information, accordingly
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			//cout << hex << (int)(x86_cs_insn->prefix[0]) << endl;

			// the instruction is rep prefixed
			if(x86_cs_insn->prefix[0] != 0)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r2m_xfer_opb_l_al_n(inspoint);
			}

			// no rep prefix
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r2m_xfer_opb_l_al(inspoint);
			}
			break;
		}

		// stosw
		case X86_INS_STOSW:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// the opposite of lodsw; however, since the instruction can also be prefixed with 'rep', the analysis code moves the tag information, accordingly
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			//cout << hex << (int)(x86_cs_insn->prefix[0]) << endl;

			// the instruction is rep prefixed
			if(x86_cs_insn->prefix[0] != 0)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r2m_xfer_opw_ax_n(inspoint);
			}

			// no rep prefix
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r2m_xfer_opw_ax(inspoint);
			}
			break;
		}

		// stosd
		case X86_INS_STOSD:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			// the opposite of lodsd; however, since the instruction can also be prefixed with 'rep', the analysis code moves the tag information, accordingly
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			//cout << hex << (int)(x86_cs_insn->prefix[0]) << endl;

			// the instruction is rep prefixed
			if(x86_cs_insn->prefix[0] != 0)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r2m_xfer_opl_eax_n(inspoint);
			}

			// no rep prefix
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				r2m_xfer_opl_eax(inspoint);
			}
			break;
		}

		// movsb
		case X86_INS_MOVSD:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// the instruction is rep prefixed
			if(x86_cs_insn->prefix[0] != 0)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				m2m_xfer_opl_movs_n(inspoint);
			}

			// no rep prefix
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				m2m_xfer_opl_movs(inspoint);
			}
			break;
		}

		// movsw
		case X86_INS_MOVSW:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// the instruction is rep prefixed
			if(x86_cs_insn->prefix[0] != 0)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				m2m_xfer_opw_movs_n(inspoint);
			}

			// no rep prefix
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				m2m_xfer_opw_movs(inspoint);
			}
			break;
		}

		// movsb
		case X86_INS_MOVSB:
		{
			if(configuration == 0 || configuration == 9)
				break;
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// the instruction is rep prefixed
			if(x86_cs_insn->prefix[0] != 0)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				m2m_xfer_opb_movs_n(inspoint);
			}

			// no rep prefix
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
				m2m_xfer_opb_movs(inspoint);
			}
			break;
		}

		// salc
		case X86_INS_SALC:
		{
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r_clrb_l_al(inspoint);
			break;
		}

		// rcl, rcr, rol, ror, sal/shl, sar, shr, shld, shrd
		case X86_INS_RCL:
		case X86_INS_RCR:
		case X86_INS_ROL:
		case X86_INS_ROR:
		case X86_INS_SAL:
		case X86_INS_SHL:
		case X86_INS_SAR:
		case X86_INS_SHR:
		case X86_INS_SHLD:
		case X86_INS_SHRD:
		{
			if(configuration == 0)
				break;
			if(selective_flag == 0)
				break;
			// do nothing
			break;
		}

		// pop
		case X86_INS_POP:
		{
			if(selective_flag == 0)
				break;
			// mov equivalent
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// register operand
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opl(op0->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2r_xfer_opw(op0->reg, inspoint);
				}

			}

			// memory operand
			else if(op0->type == X86_OP_MEM)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// op0 is 4 bytes
				if(op0->size == 4)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2m_xfer_opl_pop(op0->mem.base, op0->mem.index, op0->mem.scale, op0->mem.disp, inspoint);
				}

				// op0 is 2 bytes
				else if(op0->size == 2)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2m_xfer_opw_pop(op0->mem.base, op0->mem.index, op0->mem.scale, op0->mem.disp, inspoint);
				}
			}
			break;
		}

		// push
		case X86_INS_PUSH:
		{
			if(selective_flag == 0)
				break;
			// mov equivalent
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

			// register operand
			if(op0->type == X86_OP_REG && csregvalue_is_gr(op0->reg) == 1)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_xfer_opl(op0->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2m_xfer_opw(op0->reg, inspoint);
				}

			}

			// memory operand
			else if(op0->type == X86_OP_MEM)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// op0 is 4 bytes
				if(op0->size == 4)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2m_xfer_opl_push(op0->mem.base, op0->mem.index, op0->mem.scale, op0->mem.disp, inspoint);
				}

				// op0 is 2 bytes
				else if(op0->size == 2)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					m2m_xfer_opw_push(op0->mem.base, op0->mem.index, op0->mem.scale, op0->mem.disp, inspoint);
				}
			}

			// immediate or segment operand; clean
			else
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(op0->type == X86_OP_IMM)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

					if(op0->size == 4)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						tagmap_clrl(inspoint);
					}
					else if(op0->size == 2)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						tagmap_clrw(inspoint);
					}
					else if(op0->size == 1)
					{
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						tagmap_clrb(inspoint);
					}
				}

				else
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					tagmap_clrw(inspoint);
				}
			}
			break;
		}

		// popaw
		case X86_INS_POPAW:
		{
			if(selective_flag == 0)
				break;
			// similar to pop but for all the 16-bit general purpose registers
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			m2r_restore_opw(inspoint);
			break;
		}

		// popal
		case X86_INS_POPAL:
		{
			if(selective_flag == 0)
				break;
			// similar to pop but for all the 32-bit general purpose registers
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			m2r_restore_opl(inspoint);
			break;
		}

		// pushaw
		case X86_INS_PUSHAW:
		{
			if(selective_flag == 0)
				break;
			// similar to push but for all the 16-bit general purpose registers
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r2m_save_opw(inspoint);
			break;
		}

		// pushal
		case X86_INS_PUSHAL:
		{
			if(selective_flag == 0)
				break;
			// similar to push but for all the 32-bit general purpose registers
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r2m_save_opl(inspoint);
			break;
		}

		// pushf
		case X86_INS_PUSHF:
		{
			if(selective_flag == 0)
				break;
			// clear a memory word (i.e., 16-bits)
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			tagmap_clrw(inspoint);
			break;
		}

		// pushfd
		case X86_INS_PUSHFD:
		{
			if(selective_flag == 0)
				break;
			// clear a double memory word (i.e., 32-bits)
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			tagmap_clrl(inspoint);
			break;
		}

		// call
		case X86_INS_CALL:
		{

			////break;
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			//cout << hex << int(x86_cs_insn->op_count) << endl;
			tagmap_clrl(inspoint);
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			if(op0->type == X86_OP_IMM)
			{
				//cout << hex << op0->imm << endl;

				// if called function is library function
				std::map<long long, std::string>::iterator it;
				it = lib_func_addrs_names_map.find(op0->imm);
				if(it != lib_func_addrs_names_map.end())
				{
					//cout << "found " << hex << op0->imm << endl;
					char *lib_func_name = (char *)lib_func_addrs_names_map[op0->imm].c_str();
					//cout << lib_func_addrs_names_map[op0->imm] << endl;


					// taint sources
					if(configuration != 1)
					{
						if(strcmp(lib_func_name, "recv") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							taint_source_recv(inspoint);
						}

						if(configuration == 0)
							break;

						if(strcmp(lib_func_name, "gnutls_record_recv") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_gnutls_record_recv(inspoint);
						}

						if(strcmp(lib_func_name, "read") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_read(inspoint);
						}

						if(strcmp(lib_func_name, "fgets") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_fgets(inspoint);
						}

						if(strcmp(lib_func_name, "fread") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_fread(inspoint);
						}

						if(strcmp(lib_func_name, "_IO_getc") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source__IO_getc(inspoint);
						}

						if(strcmp(lib_func_name, "fgetc") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_fgetc(inspoint);
						}

						if(strcmp(lib_func_name, "__uflow") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_fgetc(inspoint);
						}

						if(strcmp(lib_func_name, "jpeg_read_raw_data") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_jpeg_read_raw_data(inspoint);
						}

						if(strcmp(lib_func_name, "jpeg_read_header") == 0)
						{
							//cout << "found " << lib_func_name << endl;
							//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
							taint_source_jpeg_read_header(inspoint);
						}
					}

					//if(strcmp(lib_func_name, "free") == 0)
					//{
					//	//cout << "found " << lib_func_name << endl;
					//	//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					//	taint_source_free(inspoint);
					//}




					// taint propagation in libraries
					if(strcmp(lib_func_name, "memcpy") == 0)
					{
						//cout << "found " << lib_func_name << endl;
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						taint_source_memcpy(inspoint);
					}
					if(strcmp(lib_func_name, "strcpy") == 0)
					{
						//cout << "found " << lib_func_name << endl;
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						taint_source_memcpy(inspoint);
					}
					if(strcmp(lib_func_name, "strncpy") == 0)
					{
						//cout << "found " << lib_func_name << endl;
						//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
						taint_source_memcpy(inspoint);
					}



					//if(strcmp(lib_func_name, "__stack_chk_fail") == 0)
					//{
					//	//cout << "found " << lib_func_name << endl;
					//	//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					//	taint_sink_ret(inspoint);
					//}


					//std::vector<std::string>::iterator it1 = lib_func_names.begin();
					//std::vector<long long>::iterator it2 = lib_func_addrs.begin();
					//for(; it2 != lib_func_addrs.end(); it1++, it2++)
					//{
					//	//cout << hex << *it2 << " " << *it1 << endl;
					//}
					//std::map<std::string, long long>::iterator it11 = lib_func_names_addrs_map.begin();
					//for(; it11 != lib_func_names_addrs_map.end(); it11++)
					//{
					//	//cout << hex << it11->second << " " << it11->first <<  endl;
					//}
					//std::map<long long, std::string>::iterator it12 = lib_func_addrs_names_map.begin();
					//for(; it12 != lib_func_addrs_names_map.end(); it12++)
					//{
					//	//cout << hex << it12->first << " " << it12->second << endl;
					//}


				}

			}
			break;
		}

		// ret
		case X86_INS_RET:
		{
			if(configuration != 1 && \
			configuration != 3 && \
			configuration != 4 && \
			configuration != 5 && \
			configuration != 8 && \
			configuration != 9)
				break;
			if(selective_flag == 0)
				break;
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			taint_sink_ret(inspoint);

			// untaint the stacks in this function
			//BPatch_registerExpr *espexpr = csregvalue_to_grregexprptr(X86_REG_ESP);
			//BPatch_arithExpr *minusexpr = new BPatch_arithExpr(BPatch_minus, *espexpr, BPatch_constExpr(0x100));
			//BPatch_arithExpr *c256expr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x100), BPatch_constExpr(0x0));
			//BPatch_arithExpr *zeroexpr = new BPatch_arithExpr(BPatch_plus, BPatch_constExpr(0x0), BPatch_constExpr(0x0));
			//set_n_bytes(minusexpr, c256expr, zeroexpr, inspoint);


			break;
		}

		// leave
		case X86_INS_LEAVE:
		{
			if(selective_flag == 0)
				break;
			// similar to a mov between ESP/SP and EBP/BP, and a pop
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			r2r_xfer_opl(X86_REG_ESP, X86_REG_EBP, inspoint);
			m2r_xfer_opl(X86_REG_EBP, inspoint);
			break;
		}

		// lea
		case X86_INS_LEA:
		{
			if(selective_flag == 0)
				break;
			// the general format of this instruction is the following: dst = src_base | src_indx. We move the tags of the source base and index registers to the destination (i.e., t[dst] = t[src_base] | t[src_indx])
			//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
			cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
			cs_x86_op *op1 = &(x86_cs_insn->operands[1]);

			// no base or index register; clear the destination
			if(op1->mem.base == X86_REG_INVALID && op1->mem.index == X86_REG_INVALID)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r_clrl(op0->reg, inspoint);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r_clrw(op0->reg, inspoint);
				}
			}

			// base register exists; no index register
			else if(op1->mem.base != X86_REG_INVALID && op1->mem.index == X86_REG_INVALID)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(inspoint_after == NULL)
				{
					break;
				}


				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_lea_base_xfer_opl(op0->reg, op1->mem.base, inspoint_after);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_lea_base_xfer_opw(op0->reg, op1->mem.base, inspoint_after);
				}
			}

			// index register exists; no base register
			else if(op1->mem.base == X86_REG_INVALID && op1->mem.index != X86_REG_INVALID)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(inspoint_after == NULL)
				{
					break;
				}

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_lea_idx_xfer_opl(op0->reg, op1->mem.index, inspoint_after);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					r2r_lea_idx_xfer_opw(op0->reg, op1->mem.index, inspoint_after);
				}
			}

			// base and index registers exist
			else if(op1->mem.base != X86_REG_INVALID && op1->mem.index != X86_REG_INVALID)
			{
				//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;

				if(inspoint_after == NULL)
				{
					break;
				}

				// 32-bit operands
				if(csregvalue_is_gr32(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_lea_r2r_opl(op0->reg, op1->mem.base, op1->mem.index, inspoint_after);
				}

				// 16-bit operands
				else if(csregvalue_is_gr16(op0->reg) == 1)
				{
					//cout << hex << csinsn_addr << " " << csinsn->id << " " << csinsn->mnemonic << " " << csinsn->op_str << endl;
					_lea_r2r_opw(op0->reg, op1->mem.base, op1->mem.index, inspoint_after);
				}
			}
			break;
		}

		// cmpxchg8b, enter
		case X86_INS_CMPXCHG8B:
		case X86_INS_ENTER:
		{
			if(selective_flag == 0)
				break;
			// do nothing
			break;
		}

		default:
			// do nothing
			break;
	}

	


	//if(0)

	//configuration 1
	// to show the value details at taint sink

	if(configuration == 1)
	{
		if((unsigned long )(csinsn_addr) == 0x805f944)
		{
			taint_single_register(X86_REG_ECX, inspoint);
			//show_values(inspoint);
		}

		if((unsigned long )(csinsn_addr) >= 0x805fa15 && (unsigned long )(csinsn_addr) <= 0x805fa1f)
		{
			show_values(inspoint);
		}
	}

	//configuration 3
	if(configuration == 3)
	{
		if((unsigned long )(csinsn_addr) >= 0x8082fae && (unsigned long )(csinsn_addr) <= 0x8082fb2)
		{
			if(inspoint != NULL)
			{
				show_values(inspoint);
			}
		}
	}


	//configuration 6
	if(configuration == 6)
	{
		if((unsigned long )(csinsn_addr) == 0x80547e7)
		{
			if(inspoint != NULL)
			{
				taint_sink_ret(inspoint);
			}
		}
	}

	//configuration 7
	if(configuration == 7)
	{
		if((unsigned long )(csinsn_addr) == 0x804d1cb)
		{
			if(inspoint != NULL)
			{
				taint_source_free(inspoint);
				taint_sink_free(inspoint);
			}
		}
	}

	//configuration 8
	if(configuration == 8)
	{
		if((unsigned long )(csinsn_addr) >= 0x804fac5 && (unsigned long )(csinsn_addr) <= 0x804fad8)
		{
			//if(inspoint != NULL)
			{
				taint_sink_call_para2(inspoint);
				//show_values(inspoint);
			}
		}
	}

	//configuration 9
	if(configuration == 9)
	{
		if((unsigned long )(csinsn_addr) >= 0x8062705 && (unsigned long )(csinsn_addr) <= 0x8063169)
		{
			if(inspoint != NULL)
			{
				show_values(inspoint);
			}
		}
	}



}

int get_offset_from_addr(int addr)
{
	if(shdrInfos.empty())
	{
		cerr << "get_offset_from_addr shdrInfos.empty()" << endl;
	}

	int index = 0;
	long long shdr_addr = 0, shdr_offset = 0, shdr_size = 0;

	std::vector<std::vector<int>>::iterator shdrInfosIt;
	for(shdrInfosIt = shdrInfos.begin(); shdrInfosIt != shdrInfos.end(); ++shdrInfosIt)
	{
		//cout << shdrInfosIt << endl;
		std::vector<int>::iterator shdrInfosEntryIt;
		for(shdrInfosEntryIt = shdrInfosIt->begin(); shdrInfosEntryIt != shdrInfosIt->end(); ++shdrInfosEntryIt)
		{
			//cout << hex << *shdrInfosEntryIt << " ";
			if(index == 0) shdr_addr = *shdrInfosEntryIt;
			else if(index == 1) shdr_offset = *shdrInfosEntryIt;
			else if(index == 2)
			{
				shdr_size = *shdrInfosEntryIt;
				//cout << hex << shdr_addr << " " << shdr_offset << " " << shdr_size << endl;
			}
			index++;
			index %= 3;
			//cout << index << endl;
		}
		//cout << endl;
		//cout << hex << shdr_addr << " " << shdr_offset << " " << shdr_size << endl;
		if(addr >= shdr_addr && addr <= shdr_addr + shdr_size -1)
		{
			return addr - (shdr_addr - shdr_offset);
		}
	}
	if(index != 0)
	{
		cerr << "get_offset_from_addr shdrInfos unstructured" << endl;
	}
	//cerr << "get_offset_from_addr addr not in sections" << hex << addr << endl;
	return 0;
}







// APIs


int taint_initialize(int argc, char **argv)
{

	//char *func2patch = NULL;
	//int loop;

	if (argc < 3 || strncmp(argv[1], "-h", 2) == 0 || strncmp(argv[1], "--h", 3) == 0)
	{
		cout << "Usage: " << argv[0] << USAGE;
		return false;
	}

	if (!parse_options(argc, argv))
	{
		//return EXIT_FAILURE;
		exit(0);
	}

	appBin = bpatch.openBinary(originalBinary, true);

	if (appBin == NULL)
	{
		cerr << "Failed to open binary" << endl;
		return EXIT_FAILURE;
	}

	appImage = appBin->getImage();

	modules = appImage->getModules();
	vector<BPatch_module*>::iterator moduleIterator;
	for(moduleIterator = modules->begin(); moduleIterator != modules->end(); ++moduleIterator)
	{
		char moduleName[1024];
		(*moduleIterator)->getName(moduleName, 1024);
		if(!(*moduleIterator)->isSharedLib())
		{			
			exemodules.push_back(*(moduleIterator));
			//cout << moduleName << endl;
		}
	}

	if(!appBin->loadLibrary("libtaintutils.so"))
	{
		cerr << "Failed to open instrumentation library libtaintutils.so" << endl;
		cerr << "It needs to be located in the current working directory." << endl;
		return EXIT_FAILURE;
	}

	// load library
	// global variables
	bitmapvarexpr = appImage->findVariable("bitmap");
	bitmapvaraddrexpr = new BPatch_arithExpr(BPatch_addr, *bitmapvarexpr);
	gprvarexpr = appImage->findVariable("gpr");
	gprvaraddrexpr = new BPatch_arithExpr(BPatch_addr, *gprvarexpr);
	localrepeattimeexpr = appImage->findVariable("local_repeat_time");
	localeffectiveaddressexpr = appImage->findVariable("local_effective_address");
	localregvaluebeforeexpr = appImage->findVariable("local_reg_value_before");
	localregvalueafterexpr = appImage->findVariable("local_reg_value_after");
	localinsnaddrexpr = appImage->findVariable("local_insn_addr");
	localop0valueexpr = appImage->findVariable("local_op0_value");
	localop1valueexpr = appImage->findVariable("local_op1_value");
	localtmptagexpr = appImage->findVariable("local_tmp_tag");
	localop0tagexpr = appImage->findVariable("local_op0_tag");
	localop1tagexpr = appImage->findVariable("local_op1_tag");
	localfirstbytesexpr = appImage->findVariable("local_first_bytes");
	twosquarevarexpr = appImage->findVariable("twosquare");
	squarevaluevarexpr = appImage->findVariable("squarevalue");

	// debug functions
	readmemaddr_fun = find_func_by_name(appImage, (char *)"readmemaddr");
	printint_fun = find_func_by_name(appImage, (char *)"printint");

	// read elf program header table with libelf
	int i, originalBinary_fd;
	Elf *elf;
	size_t n;
	GElf_Phdr phdr;
	Elf_Scn *scn, *symscn;
	Elf_Data *data;
	GElf_Shdr shdr, symshdr;
	size_t shstrndx;//, sz;
	char *name;
	int symindex, symcount;
	GElf_Sym sym;

	if(elf_version(EV_CURRENT) == EV_NONE)
	{
		cerr << "libelf library initialization failed" << endl;
	}
	if((originalBinary_fd = open(originalBinary, O_RDONLY, 0)) < 0)
	{
		cerr << "libelf failed to open binary" << endl;
	}
	if ((elf = elf_begin(originalBinary_fd, ELF_C_READ, NULL)) == NULL)
	{
		cerr << "libelf elf_begin() failed" << endl;
	}
	if (elf_kind(elf) != ELF_K_ELF)
	{
		cerr << originalBinary << "is not an ELF object" << endl;
	}

	// program headers
	if (elf_getphdrnum(elf, &n) != 0)
	{
		cerr << "libelf elf_getphdrnum() failed" << endl;
	}

	// iterate on each program header table entry
	for(i = 0; i < int(n); i++)
	{
		if(gelf_getphdr(elf, i, &phdr) != &phdr)
		{
			cerr << "libelf gelf_getphdr() failed" << endl;
		}
		//cout << hex << phdr.p_vaddr << " " << phdr.p_memsz << " " << phdr.p_offset << endl;
	}

	// section headers
	if(elf_getshdrstrndx(elf, &shstrndx) != 0)
	{
		cerr << "libelf elf_getshdrstrndx() failed" << endl;
	}

	scn = NULL;
	while((scn = elf_nextscn(elf, scn)) != NULL)
	{
		if(gelf_getshdr(scn, &shdr) != &shdr)
		{
			cerr << "libelf gelf_getshdr() failed" << endl;
		}
		if((name = elf_strptr(elf, shstrndx, shdr.sh_name)) == NULL)
		{
			cerr << "libelf elf_strptr() failed" << endl;
		}
		//cout << name << endl;
		//cout << hex << shdr.sh_addr << " " << shdr.sh_offset << " " << shdr.sh_size << endl;
		std::vector<int> tmp;
		tmp.push_back(shdr.sh_addr);
		tmp.push_back(shdr.sh_offset);
		tmp.push_back(shdr.sh_size);
		shdrInfos.push_back(tmp);

		if(shdr.sh_addr != 0)
		{
			if(shdr.sh_addr < (unsigned int)(section_addr_min))
			{
				section_addr_min = shdr.sh_addr;
				section_size_addr_min = shdr.sh_size;
			}
			else if(shdr.sh_addr > (unsigned int)(section_addr_max))
			{
				section_addr_max = shdr.sh_addr + shdr.sh_size - 1;
				section_size_addr_max = shdr.sh_size;
			}
		}

		// check for symbol table
		//if(shdr.sh_type == SHT_SYMTAB)
		if(shdr.sh_type == SHT_DYNSYM)
		{
			symscn = scn;
			symshdr = shdr;

			// parse symbol table
			data = elf_getdata(symscn, NULL);
			symcount = symshdr.sh_size /symshdr.sh_entsize;

			for(symindex = 0; symindex < symcount; symindex++)
			{
				gelf_getsym(data, symindex, &sym);
				//printf("%d: %s\n", symindex, elf_strptr(elf, symshdr.sh_link, sym.st_name));

				//cout << hex << (unsigned long)(sym.st_info) << " " << (unsigned long)(sym.st_other) << " " << sym.st_shndx << " " << sym.st_value << " " << sym.st_size << " " << elf_strptr(elf, symshdr.sh_link, sym.st_name) << " " << endl;


				// skip the first entry
				if(symindex != 0)
				{
					char *lib_func_name_c_str = (char *) elf_strptr(elf, symshdr.sh_link, sym.st_name);
					if(strcmp(lib_func_name_c_str, "_ITM_deregisterTMCloneTable") != 0 && strcmp(lib_func_name_c_str, "_Jv_RegisterClasses") != 0 && strcmp(lib_func_name_c_str, "_ITM_registerTMCloneTable") != 0)
					{
						std::string str(elf_strptr(elf, symshdr.sh_link, sym.st_name));
						lib_func_names.push_back(str);
					}
				}
				// we might have more dynsym than actual library stub
			}

		}

		//if(strcmp(name, ".rel.plt") == 0)
		//{
		//	GElf_Rel dst;
		//	data = elf_getdata(scn, NULL);
		//	int count = shdr.sh_size /shdr.sh_entsize;
		//	for(int index = 0; index < count; index++)
		//	{
		//		GElf_Rel *rel = gelf_getrel(data, index, &dst);
		//		//if(rel != NULL)
		//		//	printf("%llx %llx\n", dst.r_offset, dst.r_info);
		//	}
		//}

		if(strcmp(name, ".plt") == 0)
		{
			data = elf_getdata(scn, NULL);

			// the entry size for i386 needs to be multipled by 4
			int count = shdr.sh_size / (4 * shdr.sh_entsize);

			//cout << hex << shdr.sh_size << " " << shdr.sh_entsize;

			for(int index = 0; index < count; index++)
			{
				gelf_getsym(data, index, &sym);
				//printf("%d: %s\n", index, elf_strptr(elf, shdr.sh_link, sym.st_name));

				// skip the first entry
				if(index != 0)
					//cout << hex << shdr.sh_addr + index * 4 * shdr.sh_entsize << endl;
					lib_func_addrs.push_back(shdr.sh_addr + index * 4 * shdr.sh_entsize);
			}
		}
	}


	//cout << hex << lib_func_names.size() << endl;
	//cout << hex << lib_func_addrs.size() << endl;
	
	std::vector<std::string>::iterator it1 = lib_func_names.begin();
	std::vector<long long>::iterator it2 = lib_func_addrs.begin();
	for(; it2 != lib_func_addrs.end(); it1++, it2++)
	{
		//cout << hex << *it2 << " " << *it1 << endl;
		lib_func_names_addrs_map[*it1] = *it2;
		lib_func_addrs_names_map[*it2] = *it1;
	}

	//std::map<std::string, long long>::iterator it11 = lib_func_names_addrs_map.begin();
	//for(; it11 != lib_func_names_addrs_map.end(); it11++)
	//{
	//	cout << it11->first << " " << hex << it11->second << endl;
	//}

	//std::map<long long, std::string>::iterator it12 = lib_func_addrs_names_map.begin();
	//for(; it12 != lib_func_addrs_names_map.end(); it12++)
	//{
	//	cout << hex << it12->first << " " << it12->second << endl;
	//}



	(void)elf_end(elf);
	(void)close(originalBinary_fd);

	//cout << hex << "section_addr_min: " << section_addr_min << " section_size_addr_min: " << section_size_addr_min << " section_addr_max: " << section_addr_max << " section_size_addr_max: " << section_size_addr_max << endl;


	//std::vector<std::vector<int>>::iterator shdrInfosIt;
	//for(shdrInfosIt = shdrInfos.begin(); shdrInfosIt != shdrInfos.end(); ++shdrInfosIt)
	//{
	//	std::vector<int>::iterator shdrInfosEntryIt;
	//	for(shdrInfosEntryIt = shdrInfosIt->begin(); shdrInfosEntryIt != shdrInfosIt->end(); ++shdrInfosEntryIt)
	//	{
	//		cout << hex << *shdrInfosEntryIt << " ";
	//	}
	//	cout << endl;
	//}

	//cout << hex << get_offset_from_addr(0x8073188) << endl;




	// initialize capstone
	if (cs_open(CS_ARCH_X86, CS_MODE_32, &capstone_handle) != CS_ERR_OK)
		return -1;
	cs_option(capstone_handle, CS_OPT_DETAIL, CS_OPT_ON);


	if(taintAll == 0)
	{
		char selectiveline[1024] = {0};
		// load instrumented insn addresses
		FILE *selectiveFile = fopen(selectiveFileName, "r");
		while(fgets(selectiveline, 1024, selectiveFile))
		{
			//cout << selectiveline << endl;
			unsigned long selective_addr = strtol(selectiveline, NULL, 0);
			//cout << hex << selective_addr << endl;
			selective_addrs.push_back(selective_addr);
		}
		fclose(selectiveFile);
	}

	//cout << selective_addrs.size() << endl;

	/*
	fseek(originalBinaryFile, 0x2b041, SEEK_SET);
	originalBinaryFileReadLen = 0x3f4;
	originalBinaryFileBuffer = (char *)malloc(originalBinaryFileReadLen+1);
	fread(originalBinaryFileBuffer, originalBinaryFileReadLen, 1, originalBinaryFile);
	//fclose(originalBinaryFile);

	func_insn_count = cs_disasm(capstone_handle, (const uint8_t*)originalBinaryFileBuffer, 0x3f4, 0x8073041, 0, &func_insns);
	if (func_insn_count > 0)
	{
		size_t j;
		for (j = 0; j < func_insn_count; j++)
		{
			;//cout << hex << func_insns[j].address << " " << func_insns[j].id << " " << func_insns[j].mnemonic << " " << func_insns[j].op_str << endl;
		}
		cs_free(func_insns, func_insn_count);
	}
	else
	{
		cerr << "capstone failed to disassemble given code\n";
		//return EXIT_FAILURE;
	}
	*/

	// customized configurations
	//cout << originalBinary << endl;
	//cout << instrumentedBinary << endl;
	char *pch, *short_name;
	short_name = originalBinary;
	pch = strchr(originalBinary, '/');
	if(pch != NULL) short_name = pch;
	while(pch != NULL)
	{
		short_name = pch;
		pch = strchr(pch + 1, '/');
	}
	pch = strchr(originalBinary, '/');
	if(pch != NULL) short_name = short_name + 1;
	//cout << short_name << endl;

	if(strstr(instrumentedBinary, "dir") != NULL)
	{
		configuration = 0;
		//cout << "dir" << endl;
	}
	else if(strcmp(short_name, "sox") == 0)
	{
		configuration = 1;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "tt++") == 0)
	{
		configuration = 2;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "dcraw") == 0)
	{
		configuration = 3;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "gif2tga") == 0)
	{
		configuration = 4;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "gravity") == 0)
	{
		configuration = 5;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "mp3gain") == 0)
	{
		configuration = 6;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "nasm") == 0)
	{
		configuration = 7;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "jhead") == 0)
	{
		configuration = 8;
		//cout << short_name << endl;
	}
	else if(strcmp(short_name, "nginx") == 0)
	{
		configuration = 9;
		//cout << short_name << endl;
	}
	else
	{
		configuration = 0;
		//cout << "no specific name provided" << endl;
	}

	return 0;
}


int taint_instrument()
{
	vector<BPatch_module*>::iterator moduleIterator;
	//instrument selectively
	//iterator over all modules in executable (not libraries)
	vector<long long > funcaddrs;
	for(moduleIterator = exemodules.begin(); moduleIterator != exemodules.end(); ++moduleIterator)
	{
		char moduleName[1024];
		(*moduleIterator)->getName(moduleName, 1024);
		//cout << moduleName << endl;

		vector<BPatch_function*>::iterator funcsIterator;
		vector<BPatch_function*> *functions = (*moduleIterator)->getProcedures();


		//iterator over all functions in executable
		for(funcsIterator = functions->begin(); funcsIterator != functions->end(); ++funcsIterator)
		{
			char *funcName = (char*)malloc(1024);
			(*funcsIterator)->getName(funcName, 1024);
			//cout << funcName << endl;
			BPatch_function* curFunc = (*funcsIterator);

			/*
			// collect instructions in CFG
			// inintialize dyninst CFG
			BPatch_flowGraph *appCFG = curFunc->getCFG();
			BPatch_Set < BPatch_basicBlock * > basicblocks;
			if(!appCFG->getAllBasicBlocks(basicblocks))
			{
				cerr << "Failed to find basic blocks for function " << curFunc << endl;
				//return false;
			}
			else if(basicblocks.size() == 0)
			{
				cerr << "No basic blocks for function " << funcName << endl;
				//return false;
			}
			vector<long long> cfginsnaddrs;
			BPatch_Set<BPatch_basicBlock *>::iterator bbIterator;
			for(bbIterator = basicblocks.begin(); bbIterator != basicblocks.end(); ++bbIterator)
			{
				BPatch_basicBlock *curbb = (*bbIterator);
				//unsigned long address = (*bbIterator)->getStartAddress();
				//cout << hex << "0x" << address << endl;
				//BPatch_point *bbEntry = (*bbIterator)->findEntryPoint();
				BPatch_Vector<BPatch_snippet *> instArgs;
				BPatch_funcCallExpr instBBCallExpr(*instrubb_fun, instArgs);
				//BPatchSnippetHandle *handle = appBin->insertSnippet(instBBCallExpr, *bbEntry, BPatch_callBefore, BPatch_lastSnippet);
				//if(!handle)
				//{
				//	cerr << "Failed to insert instrumention in basic block at 0x" << hex << address << endl;
				//	return false;
				//}
				std::vector<std::pair<Instruction::Ptr, Address>> insnsByAddr;
				curbb->getInstructions(insnsByAddr);
				for(std::vector<std::pair<Instruction::Ptr, Address>>::const_iterator cur = insnsByAddr.begin(); cur != insnsByAddr.end(); ++cur)
				{
					Address addr = cur->second;
					cfginsnaddrs.push_back((long long)(addr));
				}
			}
			*/

			void *func_start, *func_end;
			long long func_start_offset, func_end_offset, func_start_addr, func_end_addr;
			curFunc->getAddressRange(func_start, func_end);
			func_start_addr = (long long )(func_start);
			func_end_addr = (long long )(func_end);
			//cout << hex << func_start << " " << func_end << endl;
			//cout << hex << get_offset_from_addr(func_start_addr) << " " << get_offset_from_addr(func_end_addr) << endl;
			func_start_offset = get_offset_from_addr(func_start_addr);
			func_end_offset = get_offset_from_addr(func_end_addr);
			// in case func end next insn addr (func_end_addr) is out of the section
			if(func_end_offset == 0) func_end_offset = get_offset_from_addr(func_end_addr - 1) + 1;
			//cout << hex << func_start_offset << " " << func_end_offset << endl;
			int func_bytes_len = func_end_offset - func_start_offset;
			//cout << hex << func_bytes_len << endl;

			/*
			if(func_start_offset == 0)
			{
				cout << "1" << endl;
				cout << hex << func_start << " " << func_end << endl;
			}
			if(func_end_offset == 0)
			{
				cout << "2" << endl;
				cout << hex << func_start << " " << func_end << endl;
			}
			*/

			//FILE *fp = fopen("hi", "a");
			//fprintf(fp, "%lx  %lx\n", func_start_addr, func_end_addr);
			//fclose(fp);

			//if(std::find(funcaddrs.begin(), funcaddrs.end(), func_start_addr) != func_loadstore_addrs.end()) cout << hex << func_start << " " << func_end << endl;
			funcaddrs.push_back(func_start_addr);


			// load raw instructions into buffer
			originalBinaryFile = fopen(originalBinary, "rb");
			if(!originalBinaryFile)
			{
				cerr << "unable to open original binary file" << endl;
				return EXIT_FAILURE;
			}
			fseek(originalBinaryFile, func_start_offset, SEEK_SET);
			originalBinaryFileReadLen = func_bytes_len;
			originalBinaryFileBuffer = (char *)malloc(originalBinaryFileReadLen+1);
			int readLen = fread(originalBinaryFileBuffer, originalBinaryFileReadLen, 1, originalBinaryFile);
			readLen = readLen;
			fclose(originalBinaryFile);
			//cout << hex << func_start_addr << " " << hex << originalBinaryFileBuffer << endl;

			// capstone disassemble this function
			func_insn_count = cs_disasm(capstone_handle, (const uint8_t*)originalBinaryFileBuffer, originalBinaryFileReadLen, func_start_addr, 0, &func_insns);

			// find all load/store points in the function
			std::set<BPatch_opCode> axs;
			axs.insert(BPatch_opLoad);
			axs.insert(BPatch_opStore);
			std::vector<BPatch_point*>* points = curFunc->findPoint(axs);
			std::vector<BPatch_point*>::iterator it;
			
			for(it = points->begin(); it != points->end(); it++)
			{
				func_loadstore_addrs.push_back((long long)((*it)->getAddress()));
				//cout << hex << *it << endl;
				//FILE *fp = fopen("hi", "a");
				//fprintf(fp, "%lx\n", (long long)((*it)->getAddress()));
				//fclose(fp);
			}


			// first we find the epilogue
			if (func_insn_count > 0)
			{

				int insnxor = 0, insncallcheck = 0;
				int popcount = 0, epilogue_offset = 0;
				unsigned long addr = 0;

				size_t index;
				for (index = 0; index < func_insn_count; index++)
				{
					if(func_insns[index].id == X86_INS_XOR)
					{
						//cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;
						if(strstr(func_insns[index].op_str, "gs") != NULL)
						{
							//cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;
							insnxor = 1;
							addr = (unsigned long)func_insns[index].address;
						}
					}

					if(insnxor == 1)
					{
						if(func_insns[index].id == X86_INS_CALL)
						{
							cs_x86 *x86_cs_insn = &(func_insns[index].detail->x86);
							cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
							if(op0->type == X86_OP_IMM)
							{
								//cout << hex << op0->imm << endl;

								// if called function is library function
								std::map<long long, std::string>::iterator it;
								it = lib_func_addrs_names_map.find(op0->imm);
								if(it != lib_func_addrs_names_map.end())
								{
									//cout << "found " << hex << op0->imm << endl;
									char *lib_func_name = (char *)lib_func_addrs_names_map[op0->imm].c_str();
									//cout << lib_func_addrs_names_map[op0->imm] << endl;


									// taint sources
									if(strcmp(lib_func_name, "__stack_chk_fail") == 0)
									{
										//cout << "found " << lib_func_name << endl;
										//cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;
										insncallcheck = 1;
									}
								}
							}
						}


						if(func_insns[index].id == X86_INS_ADD)
						{
							cs_x86 *x86_cs_insn = &(func_insns[index].detail->x86);
							cs_x86_op *op0 = &(x86_cs_insn->operands[0]);
							cs_x86_op *op1 = &(x86_cs_insn->operands[1]);
							if(op0->type == X86_OP_REG && op1->type == X86_OP_IMM && op0->reg == X86_REG_ESP)
							{
								//cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;
								//cout << hex << op1->imm << endl;
								epilogue_offset = epilogue_offset + op1->imm;
							}
						}
					}

					if(insncallcheck == 1)
					{
						if(func_insns[index].id == X86_INS_POP)
						{
							popcount++;
						}

						if(func_insns[index].id == X86_INS_RET)
						{
							epilogue_addrs.push_back(addr);
							epilogue_offset = epilogue_offset + popcount * 4;
							epilogue_stack_offsets.push_back(epilogue_offset);
							break;
						}
					}
				}
				//cout << hex << func_start_addr << " " << func_end_addr << endl;
			}


			//std::vector<long long>::iterator it1 = epilogue_addrs.begin();
			//std::vector<int>::iterator it2 = epilogue_stack_offsets.begin();
			//for(; it1 != epilogue_addrs.end(); it1++, it2++)
			//{
			//	cout << hex << *it1 << " " << *it2 << endl;
			//}



			// instrument at local function level
			if (func_insn_count > 0)
			{
				size_t index;
				for (index = 0; index < func_insn_count; index++)
				{
					//long long key = func_insns[index].address;
					//if(std::find(cfginsnaddrs.begin(), cfginsnaddrs.end(), key) != cfginsnaddrs.end())
					//{
					//	;//continue;
					//	FILE *fp = fopen("hi", "a");
					//	fprintf(fp, "%lx  %lx  %s  %s\n", (long long )(func_insns[index].address), (long long)(func_insns[index].id), func_insns[index].mnemonic, func_insns[index].op_str);
					//	fclose(fp);
					//}
					//FILE *fp = fopen("hi", "a");
					//fprintf(fp, "%lx  %lx  %s  %s\n", (long long )(func_insns[index].address), (long long)(func_insns[index].id), func_insns[index].mnemonic, func_insns[index].op_str);
					//fclose(fp);

					/*
					if(appCFG->findBlockByAddr(func_insns[index].address) == NULL)
					{
						//cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;
						FILE *fp = fopen("hi", "a");
						fprintf(fp, "%lx  %lx  %s  %s\n", (long long )(func_insns[index].address), (long long)(func_insns[index].id), func_insns[index].mnemonic, func_insns[index].op_str);
						fclose(fp);
					}
					*/
					//cs_x86 *x86_cs_insn = &(func_insns[index].detail->x86);
					//cs_detail *detail = func_insns[index].detail;
					//int count = (int) detail->x86.op_count;
					//cout << count << endl;
					//detail->x86.operands;

					//if(func_insns[index].detail == NULL)
					//{
					//	cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;
					//}

					//inspect_insn(&func_insns[index], curFunc);


					long long insn_addr = func_insns[index].address;
					int selective_flag = 0;
					if(std::find(selective_addrs.begin(), selective_addrs.end(), insn_addr) != selective_addrs.end())
					{
						//cout << hex << insn_addr << endl;
						selective_flag = 1;
					}
					
					if(taintAll == 1)
					{
						selective_flag = 1;
					}

					if(strstr(instrumentedBinary, "dir") != NULL && func_insns[index].id != X86_INS_POP)// && func_insns[index].id !=  X86_INS_CMOVE)
					{
						selective_flag = 0;
						//cout << "dir" << endl;
					}

					// instrument instructions
					if(index + 1 < func_insn_count)
						inspect_insn(&func_insns[index], &func_insns[index + 1], curFunc, selective_flag);
					else
						inspect_insn(&func_insns[index], &func_insns[index], curFunc, selective_flag);


					//cout << typeid(func_insns[index]).name() << endl;
					//if(func_start_addr == 0x80497b0)
					//	cout << hex << func_insns[index].address << " " << func_insns[index].id << " " << func_insns[index].mnemonic << " " << func_insns[index].op_str << endl;

				}
				cs_free(func_insns, func_insn_count);
				//cout << hex << func_start_addr << " " << func_end_addr << endl;
			}
			else
			{
				cerr << "capstone failed to disassemble given code " << hex << func_start_addr << " " << func_end_addr << " " << originalBinaryFileReadLen << endl;
				//return EXIT_FAILURE;
			}


			func_loadstore_addrs.clear();
		}

	}

	return 0;
}


int taint_finalize()
{	
	cs_close(&capstone_handle);


	if (originalBinary == NULL || instrumentedBinary == NULL) {
		return false;
	}

	//char *instrumentedBinary = "nginx1";
	cout << "Saving the instrumented binary to " << instrumentedBinary << " ..." << endl;
	//Output the instrumented binary
	if(!appBin->writeFile(instrumentedBinary))
	{
		cerr << "Failed to write output file: " << instrumentedBinary << endl;
		return EXIT_FAILURE;
	}


	return 0;
}




